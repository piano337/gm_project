(function(){
'use strict';var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.arrayIteratorImpl=function(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}};$jscomp.arrayIterator=function(a){return{next:$jscomp.arrayIteratorImpl(a)}};$jscomp.makeIterator=function(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):$jscomp.arrayIterator(a)};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;
$jscomp.SIMPLE_FROUND_POLYFILL=!1;$jscomp.ISOLATE_POLYFILLS=!1;$jscomp.FORCE_POLYFILL_PROMISE=!1;$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,g){if(a==Array.prototype||a==Object.prototype)return a;a[b]=g.value;return a};
$jscomp.getGlobal=function(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<a.length;++b){var g=a[b];if(g&&g.Math==Math)return g}throw Error("Cannot find global object");};$jscomp.global=$jscomp.getGlobal(this);$jscomp.IS_SYMBOL_NATIVE="function"===typeof Symbol&&"symbol"===typeof Symbol("x");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};
$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREFIX="$jscp$";var $jscomp$lookupPolyfilledValue=function(a,b){var g=$jscomp.propertyToPolyfillSymbol[b];if(null==g)return a[b];g=a[g];return void 0!==g?g:a[b]};$jscomp.polyfill=function(a,b,g,f){b&&($jscomp.ISOLATE_POLYFILLS?$jscomp.polyfillIsolated(a,b,g,f):$jscomp.polyfillUnisolated(a,b,g,f))};
$jscomp.polyfillUnisolated=function(a,b,g,f){g=$jscomp.global;a=a.split(".");for(f=0;f<a.length-1;f++){var m=a[f];if(!(m in g))return;g=g[m]}a=a[a.length-1];f=g[a];b=b(f);b!=f&&null!=b&&$jscomp.defineProperty(g,a,{configurable:!0,writable:!0,value:b})};
$jscomp.polyfillIsolated=function(a,b,g,f){var m=a.split(".");a=1===m.length;f=m[0];f=!a&&f in $jscomp.polyfills?$jscomp.polyfills:$jscomp.global;for(var k=0;k<m.length-1;k++){var c=m[k];if(!(c in f))return;f=f[c]}m=m[m.length-1];g=$jscomp.IS_SYMBOL_NATIVE&&"es6"===g?f[m]:null;b=b(g);null!=b&&(a?$jscomp.defineProperty($jscomp.polyfills,m,{configurable:!0,writable:!0,value:b}):b!==g&&(void 0===$jscomp.propertyToPolyfillSymbol[m]&&($jscomp.propertyToPolyfillSymbol[m]=$jscomp.IS_SYMBOL_NATIVE?$jscomp.global.Symbol(m):
$jscomp.POLYFILL_PREFIX+m),$jscomp.defineProperty(f,$jscomp.propertyToPolyfillSymbol[m],{configurable:!0,writable:!0,value:b})))};$jscomp.underscoreProtoCanBeSet=function(){var a={a:!0},b={};try{return b.__proto__=a,b.a}catch(g){}return!1};$jscomp.setPrototypeOf=$jscomp.TRUST_ES6_POLYFILLS&&"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf:$jscomp.underscoreProtoCanBeSet()?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null;
$jscomp.generator={};$jscomp.generator.ensureIteratorResultIsObject_=function(a){if(!(a instanceof Object))throw new TypeError("Iterator result "+a+" is not an object");};$jscomp.generator.Context=function(){this.isRunning_=!1;this.yieldAllIterator_=null;this.yieldResult=void 0;this.nextAddress=1;this.finallyAddress_=this.catchAddress_=0;this.finallyContexts_=this.abruptCompletion_=null};
$jscomp.generator.Context.prototype.start_=function(){if(this.isRunning_)throw new TypeError("Generator is already running");this.isRunning_=!0};$jscomp.generator.Context.prototype.stop_=function(){this.isRunning_=!1};$jscomp.generator.Context.prototype.jumpToErrorHandler_=function(){this.nextAddress=this.catchAddress_||this.finallyAddress_};$jscomp.generator.Context.prototype.next_=function(a){this.yieldResult=a};
$jscomp.generator.Context.prototype.throw_=function(a){this.abruptCompletion_={exception:a,isException:!0};this.jumpToErrorHandler_()};$jscomp.generator.Context.prototype.return=function(a){this.abruptCompletion_={return:a};this.nextAddress=this.finallyAddress_};$jscomp.generator.Context.prototype.jumpThroughFinallyBlocks=function(a){this.abruptCompletion_={jumpTo:a};this.nextAddress=this.finallyAddress_};$jscomp.generator.Context.prototype.yield=function(a,b){this.nextAddress=b;return{value:a}};
$jscomp.generator.Context.prototype.yieldAll=function(a,b){a=$jscomp.makeIterator(a);var g=a.next();$jscomp.generator.ensureIteratorResultIsObject_(g);if(g.done)this.yieldResult=g.value,this.nextAddress=b;else return this.yieldAllIterator_=a,this.yield(g.value,b)};$jscomp.generator.Context.prototype.jumpTo=function(a){this.nextAddress=a};$jscomp.generator.Context.prototype.jumpToEnd=function(){this.nextAddress=0};
$jscomp.generator.Context.prototype.setCatchFinallyBlocks=function(a,b){this.catchAddress_=a;void 0!=b&&(this.finallyAddress_=b)};$jscomp.generator.Context.prototype.setFinallyBlock=function(a){this.catchAddress_=0;this.finallyAddress_=a||0};$jscomp.generator.Context.prototype.leaveTryBlock=function(a,b){this.nextAddress=a;this.catchAddress_=b||0};
$jscomp.generator.Context.prototype.enterCatchBlock=function(a){this.catchAddress_=a||0;a=this.abruptCompletion_.exception;this.abruptCompletion_=null;return a};$jscomp.generator.Context.prototype.enterFinallyBlock=function(a,b,g){g?this.finallyContexts_[g]=this.abruptCompletion_:this.finallyContexts_=[this.abruptCompletion_];this.catchAddress_=a||0;this.finallyAddress_=b||0};
$jscomp.generator.Context.prototype.leaveFinallyBlock=function(a,b){b=this.finallyContexts_.splice(b||0)[0];if(b=this.abruptCompletion_=this.abruptCompletion_||b){if(b.isException)return this.jumpToErrorHandler_();void 0!=b.jumpTo&&this.finallyAddress_<b.jumpTo?(this.nextAddress=b.jumpTo,this.abruptCompletion_=null):this.nextAddress=this.finallyAddress_}else this.nextAddress=a};$jscomp.generator.Context.prototype.forIn=function(a){return new $jscomp.generator.Context.PropertyIterator(a)};
$jscomp.generator.Context.PropertyIterator=function(a){this.object_=a;this.properties_=[];for(var b in a)this.properties_.push(b);this.properties_.reverse()};$jscomp.generator.Context.PropertyIterator.prototype.getNext=function(){for(;0<this.properties_.length;){var a=this.properties_.pop();if(a in this.object_)return a}return null};$jscomp.generator.Engine_=function(a){this.context_=new $jscomp.generator.Context;this.program_=a};
$jscomp.generator.Engine_.prototype.next_=function(a){this.context_.start_();if(this.context_.yieldAllIterator_)return this.yieldAllStep_(this.context_.yieldAllIterator_.next,a,this.context_.next_);this.context_.next_(a);return this.nextStep_()};
$jscomp.generator.Engine_.prototype.return_=function(a){this.context_.start_();var b=this.context_.yieldAllIterator_;if(b)return this.yieldAllStep_("return"in b?b["return"]:function(g){return{value:g,done:!0}},a,this.context_.return);this.context_.return(a);return this.nextStep_()};
$jscomp.generator.Engine_.prototype.throw_=function(a){this.context_.start_();if(this.context_.yieldAllIterator_)return this.yieldAllStep_(this.context_.yieldAllIterator_["throw"],a,this.context_.next_);this.context_.throw_(a);return this.nextStep_()};
$jscomp.generator.Engine_.prototype.yieldAllStep_=function(a,b,g){try{var f=a.call(this.context_.yieldAllIterator_,b);$jscomp.generator.ensureIteratorResultIsObject_(f);if(!f.done)return this.context_.stop_(),f;var m=f.value}catch(k){return this.context_.yieldAllIterator_=null,this.context_.throw_(k),this.nextStep_()}this.context_.yieldAllIterator_=null;g.call(this.context_,m);return this.nextStep_()};
$jscomp.generator.Engine_.prototype.nextStep_=function(){for(;this.context_.nextAddress;)try{var a=this.program_(this.context_);if(a)return this.context_.stop_(),{value:a.value,done:!1}}catch(b){this.context_.yieldResult=void 0,this.context_.throw_(b)}this.context_.stop_();if(this.context_.abruptCompletion_){a=this.context_.abruptCompletion_;this.context_.abruptCompletion_=null;if(a.isException)throw a.exception;return{value:a.return,done:!0}}return{value:void 0,done:!0}};
$jscomp.generator.Generator_=function(a){this.next=function(b){return a.next_(b)};this.throw=function(b){return a.throw_(b)};this.return=function(b){return a.return_(b)};this[Symbol.iterator]=function(){return this}};$jscomp.generator.createGenerator=function(a,b){b=new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(b));$jscomp.setPrototypeOf&&a.prototype&&$jscomp.setPrototypeOf(b,a.prototype);return b};
$jscomp.asyncExecutePromiseGenerator=function(a){function b(f){return a.next(f)}function g(f){return a.throw(f)}return new Promise(function(f,m){function k(c){c.done?f(c.value):Promise.resolve(c.value).then(b,g).then(k,m)}k(a.next())})};$jscomp.asyncExecutePromiseGeneratorFunction=function(a){return $jscomp.asyncExecutePromiseGenerator(a())};$jscomp.asyncExecutePromiseGeneratorProgram=function(a){return $jscomp.asyncExecutePromiseGenerator(new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(a)))};
$jscomp.initSymbol=function(){};$jscomp.polyfill("Symbol",function(a){if(a)return a;var b=function(m,k){this.$jscomp$symbol$id_=m;$jscomp.defineProperty(this,"description",{configurable:!0,writable:!0,value:k})};b.prototype.toString=function(){return this.$jscomp$symbol$id_};var g=0,f=function(m){if(this instanceof f)throw new TypeError("Symbol is not a constructor");return new b("jscomp_symbol_"+(m||"")+"_"+g++,m)};return f},"es6","es3");
$jscomp.polyfill("Symbol.iterator",function(a){if(a)return a;a=Symbol("Symbol.iterator");for(var b="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),g=0;g<b.length;g++){var f=$jscomp.global[b[g]];"function"===typeof f&&"function"!=typeof f.prototype[a]&&$jscomp.defineProperty(f.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this))}})}return a},"es6",
"es3");$jscomp.iteratorPrototype=function(a){a={next:a};a[Symbol.iterator]=function(){return this};return a};
$jscomp.polyfill("Promise",function(a){function b(){this.batch_=null}function g(c){return c instanceof m?c:new m(function(l,e){l(c)})}if(a&&(!($jscomp.FORCE_POLYFILL_PROMISE||$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION&&"undefined"===typeof $jscomp.global.PromiseRejectionEvent)||!$jscomp.global.Promise||-1===$jscomp.global.Promise.toString().indexOf("[native code]")))return a;b.prototype.asyncExecute=function(c){if(null==this.batch_){this.batch_=[];var l=this;this.asyncExecuteFunction(function(){l.executeBatch_()})}this.batch_.push(c)};
var f=$jscomp.global.setTimeout;b.prototype.asyncExecuteFunction=function(c){f(c,0)};b.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var c=this.batch_;this.batch_=[];for(var l=0;l<c.length;++l){var e=c[l];c[l]=null;try{e()}catch(d){this.asyncThrow_(d)}}}this.batch_=null};b.prototype.asyncThrow_=function(c){this.asyncExecuteFunction(function(){throw c;})};var m=function(c){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];this.isRejectionHandled_=!1;var l=this.createResolveAndReject_();
try{c(l.resolve,l.reject)}catch(e){l.reject(e)}};m.prototype.createResolveAndReject_=function(){function c(d){return function(h){e||(e=!0,d.call(l,h))}}var l=this,e=!1;return{resolve:c(this.resolveTo_),reject:c(this.reject_)}};m.prototype.resolveTo_=function(c){if(c===this)this.reject_(new TypeError("A Promise cannot resolve to itself"));else if(c instanceof m)this.settleSameAsPromise_(c);else{a:switch(typeof c){case "object":var l=null!=c;break a;case "function":l=!0;break a;default:l=!1}l?this.resolveToNonPromiseObj_(c):
this.fulfill_(c)}};m.prototype.resolveToNonPromiseObj_=function(c){var l=void 0;try{l=c.then}catch(e){this.reject_(e);return}"function"==typeof l?this.settleSameAsThenable_(l,c):this.fulfill_(c)};m.prototype.reject_=function(c){this.settle_(2,c)};m.prototype.fulfill_=function(c){this.settle_(1,c)};m.prototype.settle_=function(c,l){if(0!=this.state_)throw Error("Cannot settle("+c+", "+l+"): Promise already settled in state"+this.state_);this.state_=c;this.result_=l;2===this.state_&&this.scheduleUnhandledRejectionCheck_();
this.executeOnSettledCallbacks_()};m.prototype.scheduleUnhandledRejectionCheck_=function(){var c=this;f(function(){if(c.notifyUnhandledRejection_()){var l=$jscomp.global.console;"undefined"!==typeof l&&l.error(c.result_)}},1)};m.prototype.notifyUnhandledRejection_=function(){if(this.isRejectionHandled_)return!1;var c=$jscomp.global.CustomEvent,l=$jscomp.global.Event,e=$jscomp.global.dispatchEvent;if("undefined"===typeof e)return!0;"function"===typeof c?c=new c("unhandledrejection",{cancelable:!0}):
"function"===typeof l?c=new l("unhandledrejection",{cancelable:!0}):(c=$jscomp.global.document.createEvent("CustomEvent"),c.initCustomEvent("unhandledrejection",!1,!0,c));c.promise=this;c.reason=this.result_;return e(c)};m.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var c=0;c<this.onSettledCallbacks_.length;++c)k.asyncExecute(this.onSettledCallbacks_[c]);this.onSettledCallbacks_=null}};var k=new b;m.prototype.settleSameAsPromise_=function(c){var l=this.createResolveAndReject_();
c.callWhenSettled_(l.resolve,l.reject)};m.prototype.settleSameAsThenable_=function(c,l){var e=this.createResolveAndReject_();try{c.call(l,e.resolve,e.reject)}catch(d){e.reject(d)}};m.prototype.then=function(c,l){function e(p,r){return"function"==typeof p?function(q){try{d(p(q))}catch(t){h(t)}}:r}var d,h,n=new m(function(p,r){d=p;h=r});this.callWhenSettled_(e(c,d),e(l,h));return n};m.prototype.catch=function(c){return this.then(void 0,c)};m.prototype.callWhenSettled_=function(c,l){function e(){switch(d.state_){case 1:c(d.result_);
break;case 2:l(d.result_);break;default:throw Error("Unexpected state: "+d.state_);}}var d=this;null==this.onSettledCallbacks_?k.asyncExecute(e):this.onSettledCallbacks_.push(e);this.isRejectionHandled_=!0};m.resolve=g;m.reject=function(c){return new m(function(l,e){e(c)})};m.race=function(c){return new m(function(l,e){for(var d=$jscomp.makeIterator(c),h=d.next();!h.done;h=d.next())g(h.value).callWhenSettled_(l,e)})};m.all=function(c){var l=$jscomp.makeIterator(c),e=l.next();return e.done?g([]):new m(function(d,
h){function n(q){return function(t){p[q]=t;r--;0==r&&d(p)}}var p=[],r=0;do p.push(void 0),r++,g(e.value).callWhenSettled_(n(p.length-1),h),e=l.next();while(!e.done)})};return m},"es6","es3");$jscomp.owns=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)};$jscomp.assign=$jscomp.TRUST_ES6_POLYFILLS&&"function"==typeof Object.assign?Object.assign:function(a,b){for(var g=1;g<arguments.length;g++){var f=arguments[g];if(f)for(var m in f)$jscomp.owns(f,m)&&(a[m]=f[m])}return a};
$jscomp.polyfill("Object.assign",function(a){return a||$jscomp.assign},"es6","es3");$jscomp.checkEs6ConformanceViaProxy=function(){try{var a={},b=Object.create(new $jscomp.global.Proxy(a,{get:function(g,f,m){return g==a&&"q"==f&&m==b}}));return!0===b.q}catch(g){return!1}};$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS=!1;$jscomp.ES6_CONFORMANCE=$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS&&$jscomp.checkEs6ConformanceViaProxy();
$jscomp.polyfill("WeakMap",function(a){function b(){if(!a||!Object.seal)return!1;try{var d=Object.seal({}),h=Object.seal({}),n=new a([[d,2],[h,3]]);if(2!=n.get(d)||3!=n.get(h))return!1;n.delete(d);n.set(h,4);return!n.has(d)&&4==n.get(h)}catch(p){return!1}}function g(){}function f(d){var h=typeof d;return"object"===h&&null!==d||"function"===h}function m(d){if(!$jscomp.owns(d,c)){var h=new g;$jscomp.defineProperty(d,c,{value:h})}}function k(d){if(!$jscomp.ISOLATE_POLYFILLS){var h=Object[d];h&&(Object[d]=
function(n){if(n instanceof g)return n;Object.isExtensible(n)&&m(n);return h(n)})}}if($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(a&&$jscomp.ES6_CONFORMANCE)return a}else if(b())return a;var c="$jscomp_hidden_"+Math.random();k("freeze");k("preventExtensions");k("seal");var l=0,e=function(d){this.id_=(l+=Math.random()+1).toString();if(d){d=$jscomp.makeIterator(d);for(var h;!(h=d.next()).done;)h=h.value,this.set(h[0],h[1])}};e.prototype.set=function(d,h){if(!f(d))throw Error("Invalid WeakMap key");
m(d);if(!$jscomp.owns(d,c))throw Error("WeakMap key fail: "+d);d[c][this.id_]=h;return this};e.prototype.get=function(d){return f(d)&&$jscomp.owns(d,c)?d[c][this.id_]:void 0};e.prototype.has=function(d){return f(d)&&$jscomp.owns(d,c)&&$jscomp.owns(d[c],this.id_)};e.prototype.delete=function(d){return f(d)&&$jscomp.owns(d,c)&&$jscomp.owns(d[c],this.id_)?delete d[c][this.id_]:!1};return e},"es6","es3");$jscomp.MapEntry=function(){};
$jscomp.polyfill("Map",function(a){function b(){if($jscomp.ASSUME_NO_NATIVE_MAP||!a||"function"!=typeof a||!a.prototype.entries||"function"!=typeof Object.seal)return!1;try{var e=Object.seal({x:4}),d=new a($jscomp.makeIterator([[e,"s"]]));if("s"!=d.get(e)||1!=d.size||d.get({x:4})||d.set({x:4},"t")!=d||2!=d.size)return!1;var h=d.entries(),n=h.next();if(n.done||n.value[0]!=e||"s"!=n.value[1])return!1;n=h.next();return n.done||4!=n.value[0].x||"t"!=n.value[1]||!h.next().done?!1:!0}catch(p){return!1}}
if($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(a&&$jscomp.ES6_CONFORMANCE)return a}else if(b())return a;var g=new WeakMap,f=function(e){this.data_={};this.head_=c();this.size=0;if(e){e=$jscomp.makeIterator(e);for(var d;!(d=e.next()).done;)d=d.value,this.set(d[0],d[1])}};f.prototype.set=function(e,d){e=0===e?0:e;var h=m(this,e);h.list||(h.list=this.data_[h.id]=[]);h.entry?h.entry.value=d:(h.entry={next:this.head_,previous:this.head_.previous,head:this.head_,key:e,value:d},h.list.push(h.entry),
this.head_.previous.next=h.entry,this.head_.previous=h.entry,this.size++);return this};f.prototype.delete=function(e){e=m(this,e);return e.entry&&e.list?(e.list.splice(e.index,1),e.list.length||delete this.data_[e.id],e.entry.previous.next=e.entry.next,e.entry.next.previous=e.entry.previous,e.entry.head=null,this.size--,!0):!1};f.prototype.clear=function(){this.data_={};this.head_=this.head_.previous=c();this.size=0};f.prototype.has=function(e){return!!m(this,e).entry};f.prototype.get=function(e){return(e=
m(this,e).entry)&&e.value};f.prototype.entries=function(){return k(this,function(e){return[e.key,e.value]})};f.prototype.keys=function(){return k(this,function(e){return e.key})};f.prototype.values=function(){return k(this,function(e){return e.value})};f.prototype.forEach=function(e,d){for(var h=this.entries(),n;!(n=h.next()).done;)n=n.value,e.call(d,n[1],n[0],this)};f.prototype[Symbol.iterator]=f.prototype.entries;var m=function(e,d){var h=d&&typeof d;"object"==h||"function"==h?g.has(d)?h=g.get(d):
(h=""+ ++l,g.set(d,h)):h="p_"+d;var n=e.data_[h];if(n&&$jscomp.owns(e.data_,h))for(e=0;e<n.length;e++){var p=n[e];if(d!==d&&p.key!==p.key||d===p.key)return{id:h,list:n,index:e,entry:p}}return{id:h,list:n,index:-1,entry:void 0}},k=function(e,d){var h=e.head_;return $jscomp.iteratorPrototype(function(){if(h){for(;h.head!=e.head_;)h=h.previous;for(;h.next!=h.head;)return h=h.next,{done:!1,value:d(h)};h=null}return{done:!0,value:void 0}})},c=function(){var e={};return e.previous=e.next=e.head=e},l=0;
return f},"es6","es3");
$jscomp.polyfill("Set",function(a){function b(){if($jscomp.ASSUME_NO_NATIVE_SET||!a||"function"!=typeof a||!a.prototype.entries||"function"!=typeof Object.seal)return!1;try{var f=Object.seal({x:4}),m=new a($jscomp.makeIterator([f]));if(!m.has(f)||1!=m.size||m.add(f)!=m||1!=m.size||m.add({x:4})!=m||2!=m.size)return!1;var k=m.entries(),c=k.next();if(c.done||c.value[0]!=f||c.value[1]!=f)return!1;c=k.next();return c.done||c.value[0]==f||4!=c.value[0].x||c.value[1]!=c.value[0]?!1:k.next().done}catch(l){return!1}}
if($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(a&&$jscomp.ES6_CONFORMANCE)return a}else if(b())return a;var g=function(f){this.map_=new Map;if(f){f=$jscomp.makeIterator(f);for(var m;!(m=f.next()).done;)this.add(m.value)}this.size=this.map_.size};g.prototype.add=function(f){f=0===f?0:f;this.map_.set(f,f);this.size=this.map_.size;return this};g.prototype.delete=function(f){f=this.map_.delete(f);this.size=this.map_.size;return f};g.prototype.clear=function(){this.map_.clear();this.size=0};g.prototype.has=
function(f){return this.map_.has(f)};g.prototype.entries=function(){return this.map_.entries()};g.prototype.values=function(){return this.map_.values()};g.prototype.keys=g.prototype.values;g.prototype[Symbol.iterator]=g.prototype.values;g.prototype.forEach=function(f,m){var k=this;this.map_.forEach(function(c){return f.call(m,c,c,k)})};return g},"es6","es3");
$jscomp.checkStringArgs=function(a,b,g){if(null==a)throw new TypeError("The 'this' value for String.prototype."+g+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+g+" must not be a regular expression");return a+""};
$jscomp.polyfill("String.prototype.endsWith",function(a){return a?a:function(b,g){var f=$jscomp.checkStringArgs(this,b,"endsWith");b+="";void 0===g&&(g=f.length);g=Math.max(0,Math.min(g|0,f.length));for(var m=b.length;0<m&&0<g;)if(f[--g]!=b[--m])return!1;return 0>=m}},"es6","es3");$jscomp.polyfill("Object.entries",function(a){return a?a:function(b){var g=[],f;for(f in b)$jscomp.owns(b,f)&&g.push([f,b[f]]);return g}},"es8","es3");
function norm3(a){var b=a[0],g=a[1];a=a[2];return Math.sqrt(b*b+g*g+a*a)}function normalized3(a){var b=a[0],g=a[1];a=a[2];var f=1/Math.sqrt(b*b+g*g+a*a);return[f*b,f*g,f*a]}function dehom3(a){var b=1/a[3];return[b*a[0],b*a[1],b*a[2]]}function scale3(a,b){return[a*b[0],a*b[1],a*b[2]]}function transpose3(a){return[a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]]}function transpose4(a){return[a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15]]}
function adj3(a){return[a[4]*a[8]-a[5]*a[7],a[2]*a[7]-a[1]*a[8],a[1]*a[5]-a[2]*a[4],a[5]*a[6]-a[3]*a[8],a[0]*a[8]-a[2]*a[6],a[2]*a[3]-a[0]*a[5],a[3]*a[7]-a[4]*a[6],a[1]*a[6]-a[0]*a[7],a[0]*a[4]-a[1]*a[3]]}function sub3(a,b){return[a[0]-b[0],a[1]-b[1],a[2]-b[2]]}function add3(a,b){return[a[0]+b[0],a[1]+b[1],a[2]+b[2]]}function add4(a,b){return[a[0]+b[0],a[1]+b[1],a[2]+b[2],a[3]+b[3]]}function cross3(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]}
function mul4mm(a,b){return[a[0]*b[0]+a[1]*b[4]+a[2]*b[8]+a[3]*b[12],a[0]*b[1]+a[1]*b[5]+a[2]*b[9]+a[3]*b[13],a[0]*b[2]+a[1]*b[6]+a[2]*b[10]+a[3]*b[14],a[0]*b[3]+a[1]*b[7]+a[2]*b[11]+a[3]*b[15],a[4]*b[0]+a[5]*b[4]+a[6]*b[8]+a[7]*b[12],a[4]*b[1]+a[5]*b[5]+a[6]*b[9]+a[7]*b[13],a[4]*b[2]+a[5]*b[6]+a[6]*b[10]+a[7]*b[14],a[4]*b[3]+a[5]*b[7]+a[6]*b[11]+a[7]*b[15],a[8]*b[0]+a[9]*b[4]+a[10]*b[8]+a[11]*b[12],a[8]*b[1]+a[9]*b[5]+a[10]*b[9]+a[11]*b[13],a[8]*b[2]+a[9]*b[6]+a[10]*b[10]+a[11]*b[14],a[8]*b[3]+a[9]*
b[7]+a[10]*b[11]+a[11]*b[15],a[12]*b[0]+a[13]*b[4]+a[14]*b[8]+a[15]*b[12],a[12]*b[1]+a[13]*b[5]+a[14]*b[9]+a[15]*b[13],a[12]*b[2]+a[13]*b[6]+a[14]*b[10]+a[15]*b[14],a[12]*b[3]+a[13]*b[7]+a[14]*b[11]+a[15]*b[15]]}function mul3mv(a,b){return[a[0]*b[0]+a[1]*b[1]+a[2]*b[2],a[3]*b[0]+a[4]*b[1]+a[5]*b[2],a[6]*b[0]+a[7]*b[1]+a[8]*b[2]]}
function mul4mv(a,b){return[a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3],a[4]*b[0]+a[5]*b[1]+a[6]*b[2]+a[7]*b[3],a[8]*b[0]+a[9]*b[1]+a[10]*b[2]+a[11]*b[3],a[12]*b[0]+a[13]*b[1]+a[14]*b[2]+a[15]*b[3]]}function transform4to3(a,b){var g=1/(a[12]*b[0]+a[13]*b[1]+a[14]*b[2]+a[15]*b[3]);return[(a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3])*g,(a[4]*b[0]+a[5]*b[1]+a[6]*b[2]+a[7]*b[3])*g,(a[8]*b[0]+a[9]*b[1]+a[10]*b[2]+a[11]*b[3])*g]}
function triangleNormal(a,b,g){a=dehom3(a);b=sub3(dehom3(b),a);g=sub3(dehom3(g),a);return normalized3(cross3(b,g))};function GlError(a){this.message=a}GlError.prototype.toString=function(){return this.message};
function ShaderProgram(a,b,g){this.handle=a.createProgram();a.webgl2&&(b="#version 300 es\n"+b.replace(/attribute/g,"in").replace(/varying/g,"out"),g="#version 300 es\n"+g.replace(/varying/g,"in").replace(/gl_FragColor/g,"FragColor").replace(/texture2D/g,"texture").replace(/precision highp float;/g,"precision highp float;\n#define webgl2 true\nout vec4 FragColor;"));this.vs=this.createShader(a,a.VERTEX_SHADER,b);this.fs=this.createShader(a,a.FRAGMENT_SHADER,g);this.link(a);this.detectUniforms(a)}
ShaderProgram.prototype.createShader=function(a,b,g){b=a.createShader(b);a.shaderSource(b,g);a.compileShader(b);if(!a.getShaderParameter(b,a.COMPILE_STATUS))throw console.warn(g.split("\n")),new GlError("Error compiling shader:\n"+a.getShaderInfoLog(b));a.attachShader(this.handle,b);return b};ShaderProgram.prototype.use=function(a){a.useProgram(this.handle);return this};
ShaderProgram.prototype.link=function(a){var b=this.handle;a.linkProgram(b);if(!a.getProgramParameter(b,a.LINK_STATUS))throw new GlError("Error linking shader:\n"+a.getProgramInfoLog(b));a.validateProgram(b);if(!a.getProgramParameter(b,a.VALIDATE_STATUS))throw new GlError("Error validating shader:\n"+a.getProgramInfoLog(b));};ShaderProgram.prototype.dispose=function(a){a.detachShader(this.handle,this.vs);a.deleteShader(this.vs);a.detachShader(this.handle,this.fs);a.deleteShader(this.fs);a.deleteProgram(this.handle)};
ShaderProgram.prototype.detectUniforms=function(a){this.uniform=this.detectImpl(a,!0)};ShaderProgram.prototype.detectAttributes=function(a){this.attrib=this.detectImpl(a,!1)};
ShaderProgram.prototype.detectImpl=function(a,b){var g,f=this.handle,m,k,c={},l;var e=b?a.getProgramParameter(f,a.ACTIVE_UNIFORMS):a.getProgramParameter(f,a.ACTIVE_ATTRIBUTES);for(g=0;g<e;++g){var d=b?a.getActiveUniform(f,g):a.getActiveAttrib(f,g);if(null!==d&&(m=d.name.replace(/\]/g,""))){for(l=c;null!==(k=/[.\[]/.exec(m));){var h=m.substr(0,k.index);l=l.hasOwnProperty(h)?l[h]:"."===k[0]?l[h]={}:l[h]=[];m=m.substr(k.index+1)}if(1<d.size){k=d.size;var n=Array(k);for(h=0;h<k;++h){var p=d.name+"["+
h+"]";p=b?this.uniformSetter(a,p,d):this.attribFactory(a,p,d);n[h]=p}l[m]=n}else p=b?this.uniformSetter(a,d.name,d):this.attribFactory(a,d.name,d),l[m]=p}}return c};
ShaderProgram.prototype.uniformSetter=function(a,b,g){var f=a.getUniformLocation(this.handle,b);switch(g.type){case a.FLOAT:return a.uniform1fv.bind(a,f);case a.FLOAT_VEC2:return a.uniform2fv.bind(a,f);case a.FLOAT_VEC3:return a.uniform3fv.bind(a,f);case a.FLOAT_VEC4:return a.uniform4fv.bind(a,f);case a.BOOL:case a.INT:case a.SAMPLER_2D:case a.SAMPLER_CUBE:return a.uniform1iv.bind(a,f);case a.BOOL_VEC2:case a.INT_VEC2:return a.uniform2iv.bind(a,f);case a.BOOL_VEC3:case a.INT_VEC3:return a.uniform3iv.bind(a,
f);case a.BOOL_VEC4:case a.INT_VEC4:return a.uniform4iv.bind(a,f);case a.FLOAT_MAT2:return a.uniformMatrix2fv.bind(a,f,!1);case a.FLOAT_MAT3:return a.uniformMatrix3fv.bind(a,f,!1);case a.FLOAT_MAT4:return a.uniformMatrix4fv.bind(a,f,!1);default:throw new GlError("Unknown data type for uniform "+b);}};
ShaderProgram.prototype.attribFactory=function(a,b,g){var f=a.getAttribLocation(this.handle,b);switch(g.type){case a.FLOAT:return new VertexAttribute(a,f,a.vertexAttrib1fv.bind(a,f));case a.FLOAT_VEC2:return new VertexAttribute(a,f,a.vertexAttrib2fv.bind(a,f));case a.FLOAT_VEC3:return new VertexAttribute(a,f,a.vertexAttrib3fv.bind(a,f));case a.FLOAT_VEC4:return new VertexAttribute(a,f,a.vertexAttrib4fv.bind(a,f));default:throw new GlError("Unknown data type for vertex attribute "+b);}};
function VertexAttribute(a,b,g){this.gl=a;this.location=b;this.set=g};(function(a){"object"===typeof exports&&"undefined"!==typeof module?module.exports=a():"function"===typeof define&&define.amd?define([],a):("undefined"!==typeof window?window:"undefined"!==typeof global?global:"undefined"!==typeof self?self:this).csg=a()})(function(){return function(){function a(b,g,f){function m(l,e){if(!g[l]){if(!b[l]){var d="function"==typeof require&&require;if(!e&&d)return d(l,!0);if(k)return k(l,!0);e=Error("Cannot find module '"+l+"'");throw e.code="MODULE_NOT_FOUND",e;}e=
g[l]={exports:{}};b[l][0].call(e.exports,function(h){return m(b[l][1][h]||h)},e,e.exports,a,b,g,f)}return g[l].exports}for(var k="function"==typeof require&&require,c=0;c<f.length;c++)m(f[c]);return m}return a}()({1:[function(a,b,g){var f=a("./src/core/mutators").addTransformationMethodsToPrototype;g=a("./src/core/CSG");var m=a("./src/core/CAG"),k=a("./src/core/constants"),c=k.defaultResolution2D,l=k.defaultResolution3D,e=k.EPS,d=k.angleEPS,h=k.areaEPS,n=k.all,p=k.top,r=k.bottom,q=k.left,t=k.right,
w=k.front,x=k.back,G=k.staticTag,v=k.getTag;g._CSGDEBUG=k._CSGDEBUG;g.defaultResolution2D=c;g.defaultResolution3D=l;g.EPS=e;g.angleEPS=d;g.areaEPS=h;g.all=n;g.top=p;g.bottom=r;g.left=q;g.right=t;g.front=w;g.back=x;g.staticTag=G;g.getTag=v;g.Vector2D=a("./src/core/math/Vector2");g.Vector3D=a("./src/core/math/Vector3");g.Vertex=a("./src/core/math/Vertex3");m.Vertex=a("./src/core/math/Vertex2");g.Plane=a("./src/core/math/Plane");g.Polygon=a("./src/core/math/Polygon3");g.Polygon2D=a("./src/core/math/Polygon2");
g.Line2D=a("./src/core/math/Line2");g.Line3D=a("./src/core/math/Line3");g.Path2D=a("./src/core/math/Path2");g.OrthoNormalBasis=a("./src/core/math/OrthoNormalBasis");g.Matrix4x4=a("./src/core/math/Matrix4");m.Side=a("./src/core/math/Side");g.Connector=a("./src/core/connectors").Connector;g.ConnectorList=a("./src/core/connectors").ConnectorList;g.Properties=a("./src/core/Properties");e=a("./src/api/primitives2d");k=e.circle;c=e.ellipse;l=e.rectangle;e=e.roundedRectangle;d=a("./src/api/primitives3d");
h=d.cube;n=d.roundedCube;p=d.cylinder;r=d.roundedCylinder;q=d.cylinderElliptic;t=d.polyhedron;g.sphere=d.sphere;g.cube=h;g.roundedCube=n;g.cylinder=p;g.roundedCylinder=r;g.cylinderElliptic=q;g.polyhedron=t;m.circle=k;m.ellipse=c;m.rectangle=l;m.roundedRectangle=e;k=a("./src/core/CSGFactories");c=k.fromPolygons;l=k.fromObject;e=k.fromSlices;g.fromCompactBinary=k.fromCompactBinary;g.fromObject=l;g.fromSlices=e;g.fromPolygons=c;g.toPointCloud=a("./src/api/debugHelpers").toPointCloud;k=a("./src/core/CAGFactories");
m.fromSides=k.fromSides;m.fromObject=k.fromObject;m.fromPoints=k.fromPoints;m.fromPointsNoCheck=k.fromPointsNoCheck;m.fromPath2=k.fromPath2;m.fromFakeCSG=k.fromFakeCSG;m.fromCompactBinary=k.fromCompactBinary;k=a("./src/api/optionParsers");f(g.prototype);f(g.Vector2D.prototype);f(g.Vector3D.prototype);f(g.Vertex.prototype);f(g.Plane.prototype);f(g.Polygon.prototype);f(g.Line2D.prototype);f(g.Line3D.prototype);f(g.Path2D.prototype);f(g.OrthoNormalBasis.prototype);f(g.Connector.prototype);f(m.prototype);
f(m.Side.prototype);f(m.Vertex.prototype);g.parseOptionAs2DVector=k.parseOptionAs3DVector;g.parseOptionAs3DVector=k.parseOptionAs3DVector;g.parseOptionAs3DVectorList=k.parseOptionAs3DVectorList;g.parseOptionAsBool=k.parseOptionAsBool;g.parseOptionAsFloat=k.parseOptionAsFloat;g.parseOptionAsInt=k.parseOptionAsInt;g.Polygon2D.prototype=m.prototype;a=a("./src/core/utils");a=Object.assign({},{CSG:g,CAG:m},k,{isCAG:a.isCAG,isCSG:a.isCSG});b.exports=a},{"./src/api/debugHelpers":4,"./src/api/optionParsers":11,
"./src/api/primitives2d":12,"./src/api/primitives3d":13,"./src/core/CAG":15,"./src/core/CAGFactories":16,"./src/core/CSG":17,"./src/core/CSGFactories":18,"./src/core/Properties":22,"./src/core/connectors":23,"./src/core/constants":24,"./src/core/math/Line2":25,"./src/core/math/Line3":26,"./src/core/math/Matrix4":27,"./src/core/math/OrthoNormalBasis":28,"./src/core/math/Path2":29,"./src/core/math/Plane":30,"./src/core/math/Polygon2":31,"./src/core/math/Polygon3":32,"./src/core/math/Side":33,"./src/core/math/Vector2":34,
"./src/core/math/Vector3":35,"./src/core/math/Vertex2":36,"./src/core/math/Vertex3":37,"./src/core/mutators":40,"./src/core/utils":42}],2:[function(a,b,g){var f=a("../core/math/Path2");b.exports=function(m){var k={},c={};m.canonicalized().sides.map(function(x){var G=x.getTag();k[G]=x;x=x.vertex0.getTag();x in c||(c[x]=[]);c[x].push(G)});for(m=[];;){var l=null,e;for(e in c){var d=c[e];l=d[0];d.splice(0,1);0===d.length&&delete c[e];break}if(null===l)break;d=[];var h=k[l];for(l=h.vertex0.getTag();;){d.push(h.vertex0.pos);
var n=h.vertex1.getTag();if(n===l)break;if(!(n in c))throw Error("Area is not closed!");var p=c[n],r=-1;if(1===p.length)r=0;else{var q=null;h=h.direction().angleDegrees();for(var t=0;t<p.length;t++){var w=k[p[t]].direction().angleDegrees()-h;-180>w&&(w+=360);180<=w&&(w-=360);if(0>r||w>q)r=t,q=w}}q=p[r];p.splice(r,1);0===p.length&&delete c[n];h=k[q]}0<d.length&&d.push(d.shift());d=new f(d,!0);m.push(d)}return m}},{"../core/math/Path2":29}],3:[function(a,b,g){var f=a("../core/utils/toArray");b.exports=
function(m,k){m=Object.assign({},{axes:[!0,!0,!0],center:[0,0,0]},m);var c=m.axes,l=m.center;k=f(k);k=k.map(function(e){var d=e.getBounds(),h=[0,0,0];c[0]&&(h[0]=l[0]-(d[0].x+(d[1].x-d[0].x)/2));c[1]&&(h[1]=l[1]-(d[0].y+(d[1].y-d[0].y)/2));c[2]&&(h[2]=l[2]-(d[0].z+(d[1].y-d[0].y)/2));return e.translate(h)});return 1===k.length?k[0]:k}},{"../core/utils/toArray":50}],4:[function(a,b,g){var f=a("../core/CSG"),m=a("./primitives3d").cube;b.exports={toPointCloud:function(k,c){k=k.reTesselated();var l=new f,
e={};k.polygons.map(function(h){h.vertices.map(function(n){e[n.getTag()]=n.pos})});for(var d in e)k=m({center:e[d],radius:c}),l=l.unionSub(k,!1,!1);return l=l.reTesselated()}}},{"../core/CSG":17,"./primitives3d":13}],5:[function(a,b,g){var f=a("../core/math/Vertex3"),m=a("../core/math/Vector3"),k=a("../core/math/Polygon3");b.exports={cagToPointsArray:function(c){if("sides"in c){var l=[];c.sides.forEach(function(e){l.push([e.vertex0.pos.x,e.vertex0.pos.y]);l.push([e.vertex1.pos.x,e.vertex1.pos.y])})}else"points"in
c&&(l=c.points.map(function(e){return[e.x,e.y]}));return l},clamp:function(c,l,e){return Math.min(Math.max(c,l),e)},rightMultiply1x3VectorToArray:function(c,l){l=$jscomp.makeIterator(l);var e=l.next().value,d=l.next().value,h=l.next().value;l=e*c.elements[0]+d*c.elements[1]+h*c.elements[2]+1*c.elements[3];var n=e*c.elements[4]+d*c.elements[5]+h*c.elements[6]+1*c.elements[7],p=e*c.elements[8]+d*c.elements[9]+h*c.elements[10]+1*c.elements[11];c=e*c.elements[12]+d*c.elements[13]+h*c.elements[14]+1*c.elements[15];
1!==c&&(c=1/c,l*=c,n*=c,p*=c);return[l,n,p]},polygonFromPoints:function(c){c=c.map(function(l){return new f(new m(l))});return new k(c)}}},{"../core/math/Polygon3":32,"../core/math/Vector3":35,"../core/math/Vertex3":37}],6:[function(a,b,g){var f=a("../core/utils").isCAG;b.exports={union:function(){var m={},k={extrude2d:!1},c=0,l=arguments;l[0].length&&(l=l[0]);"extrude2d"in l[0]&&(m=Object.assign({},k,l[0]),c++);k=l[c++];for("object"===typeof l[c]&&f(l[c])&&m.extrude2d&&(k=l[c].extrude({offset:[0,
0,.1]}));c<l.length;c++){var e=l[c];"object"===typeof l[c]&&f(l[c])&&m.extrude2d&&(e=l[c].extrude({offset:[0,0,.1]}));k=k.union(e)}return k},difference:function(){var m,k=0,c=arguments;c[0].length&&(c=c[0]);for(m=c[k++];k<c.length;k++)m=f(c[k])?m.subtract(c[k]):m.subtract(c[k].setColor(1,1,0));return m},intersection:function(){var m,k=0,c=arguments;c[0].length&&(c=c[0]);for(m=c[k++];k<c.length;k++)m=f(c[k])?m.intersect(c[k]):m.intersect(c[k].setColor(1,1,0));return m}}},{"../core/utils":42}],7:[function(a,
b,g){var f=a("../core/math/Matrix4.js"),m=a("../core/math/Vector3.js"),k=a("../core/connectors.js").Connector,c=a("../core/CAGFactories").fromPoints,l=a("../core/math/Vector2");b.exports={lieFlat:function(e){var d=e.getTransformationToFlatLying();return e.transform(d)},getTransformationToFlatLying:function(e){return e.getTransformationAndInverseTransformationToFlatLying()[0]},getTransformationAndInverseTransformationToFlatLying:function(e){if(0===e.polygons.length){var d=new f;return[d,d]}e=e.canonicalized();
var h={};e.polygons.map(function(F){h[F.plane.getTag()]=F.plane});var n=new m(1,0,0),p=new m(0,1,0),r=new m(0,0,1),q=new k([0,0,0],[0,0,-1],n),t=new k([0,0,0],[0,0,-1],p),w=!0,x=0,G=0;for(d in h){var v=h[d],A=v.normal.times(v.w),y=void 0,C=void 0;y=v.normal.cross(n).length();C=v.normal.cross(p).length();y>C?(C=new k(A,v.normal,n),y=C.getTransformationTo(q,!1,0),C=q.getTransformationTo(C,!1,0)):(C=new k(A,v.normal,p),y=C.getTransformationTo(t,!1,0),C=t.getTransformationTo(C,!1,0));A=e.transform(y);
v=-v.normal.dot(r);var u=A.getBounds();A=u[1].z-u[0].z;w||(A<x?w=!0:A===x&&v>G&&(w=!0));if(w){var z=new m([-.5*(u[1].x+u[0].x),-.5*(u[1].y+u[0].y),-u[0].z]);y=y.multiply(f.translation(z));C=f.translation(z.negated()).multiply(C);x=A;G=v;z=y;var D=C}w=!1}return[z,D]},overCutInsideCorners:function(e,d){e=e.canonicalized();var h={};e.sides.map(function(y){y.vertex0.getTag()in h||(h[y.vertex0.getTag()]={pos:y.vertex0.pos,from:[],to:[]});h[y.vertex0.getTag()].to.push(y.vertex1.pos);y.vertex1.getTag()in
h||(h[y.vertex1.getTag()]={pos:y.vertex1.pos,from:[],to:[]});h[y.vertex1.getTag()].from.push(y.vertex0.pos)});var n=[],p;for(p in h){var r=h[p];if(1===r.from.length&&1===r.to.length){var q=r.pos,t=r.to[0];r=q.minus(r.from[0]).unit();t=t.minus(q).unit();if(.001>r.cross(t)){var w=t.angleRadians()-r.angleRadians()+Math.PI;0>w?w+=2*Math.PI:w>=2*Math.PI&&(w-=2*Math.PI);t=t.minus(r).unit();var x=30/180*Math.PI;r=d/Math.cos(x/2);q=q.plus(t.times(r));t=w+t.angleRadians();w=2*(Math.PI-w);x=2*Math.ceil(w/x/
2);for(var G=[q],v=0;v<=x;v++){var A=l.fromAngleRadians(t+v/x*w).times(r).plus(q);G.push(A)}n.push(c(G))}}}return e.subtract(n)}}},{"../core/CAGFactories":16,"../core/connectors.js":23,"../core/math/Matrix4.js":27,"../core/math/Vector2":34,"../core/math/Vector3.js":35}],8:[function(a,b,g){var f=a("../core/constants").EPS,m=a("../core/math/Plane"),k=a("../core/math/Vector2"),c=a("../core/math/Vertex3"),l=a("../core/math/Polygon3"),e=a("../core/math/OrthoNormalBasis");b.exports={sectionCut:function(d,
h){var n=h.plane,p=h.plane.flipped();n=new m(n.normal,n.w);p=new m(p.normal,p.w+5*f);d=d.cutByPlane(n);d=d.cutByPlane(p);return d.projectToOrthoNormalBasis(h)},cutByPlane:function(d,h){if(0===d.polygons.length)return new (a("../core/CSG"));var n=h.normal.times(h.w),p=0;d.polygons.map(function(t){t.vertices.map(function(w){w=w.pos.distanceToSquared(n);w>p&&(p=w)})});p=Math.sqrt(p);p*=1.01;var r=[],q=new e(h);r.push(new c(q.to3D(new k(p,-p))));r.push(new c(q.to3D(new k(-p,-p))));r.push(new c(q.to3D(new k(-p,
p))));r.push(new c(q.to3D(new k(p,p))));h=(new l(r,null,h.flipped())).extrude(h.normal.times(-p));h=d.intersect(h);h.properties=d.properties;return h}}},{"../core/CSG":17,"../core/constants":24,"../core/math/OrthoNormalBasis":28,"../core/math/Plane":30,"../core/math/Polygon3":32,"../core/math/Vector2":34,"../core/math/Vertex3":37}],9:[function(a,b,g){g=a("../core/constants");var f=g.EPS,m=g.angleEPS,k=a("../core/math/Vertex3"),c=a("../core/math/Vector2"),l=a("../core/math/Polygon3");g=a("../core/utils");
var e=g.fnNumberSort,d=g.isCSG;g=a("../core/CAGFactories");var h=g.fromPoints,n=g.fromPointsNoCheck,p=function(q,t,w){var x=a("../core/CAG");w=w||8;4>w&&(w=4);var G=[],v={};q.canonicalized().sides.map(function(B){var E=B.vertex1.pos.minus(B.vertex0.pos),H=E.length();if(H>f)for(E=E.times(1/H),E=E.normal().times(t),E=[B.vertex1.pos.plus(E),B.vertex1.pos.minus(E),B.vertex0.pos.minus(E),B.vertex0.pos.plus(E)],E=h(E),G.push(E),E=0;2>E;E++){H=0===E?B.vertex0.pos:B.vertex1.pos;var K=0===E?B.vertex1.pos:
B.vertex0.pos,J=H.x+" "+H.y;J in v||(v[J]=[]);v[J].push({p1:H,p2:K})}});for(var A in v){var y=v[A],C=q=void 0,u=y[0].p1;2===y.length?(C=y[1].p2,q=y[0].p2.minus(u).angleDegrees(),C=C.minus(u).angleDegrees(),C<q&&(C+=360),C>=q+360&&(C-=360),C<q+180&&(y=C,C=q+360,q=y),q+=90,C-=90):(q=0,C=360);if(y=C>q+359.999)q=0,C=360;if(C>q+m){var z=[];y||z.push(u);var D=Math.round(w*(C-q)/360);1>D&&(D=1);for(var F=0;F<=D;F++){var I=q+F/D*(C-q);F===D&&(I=C);I=u.plus(c.fromAngleDegrees(I).times(t));(!y||0<F)&&z.push(I)}q=
n(z);G.push(q)}}w=new x;return w=w.union(G)},r=function(q,t,w,x){var G=a("../core/CSG"),v=a("../core/CSGFactories").fromPolygons;q=q.reTesselated();var A=x?q:new G;q.polygons.map(function(R){var P=R.plane.normal.unit().times(2*t);R=R.translate(P.times(-.5)).extrude(P);A=A.unionSub(R,!1,!1)});var y={};q.polygons.map(function(R){for(var P=R.vertices.length,W=R.vertices[P-1],V=W.getTag(),T=0;T<P;T++){var Z=R.vertices[T],Y=Z.getTag();V=Y<V?Y+"-"+V:V+"-"+Y;V in y?W=y[V]:(W={v1:W,v2:Z,planenormals:[]},
y[V]=W);W.planenormals.push(R.plane.normal);V=Y;W=Z}});for(var C in y){var u=y[C];x=u.v1.pos;var z=u.v2.pos,D=z.minus(x).unit(),F=u.planenormals[0].unit();D=F.cross(D);for(var I=[],B=0;B<w;B++)I.push(B*Math.PI*2/w);B=0;for(var E=u.planenormals.length;B<E;B++){var H=u.planenormals[B],K=D.dot(H);H=F.dot(H);var J=Math.atan2(K,H);0>J&&(J+=2*Math.PI);I.push(J);J=Math.atan2(-K,-H);0>J&&(J+=2*Math.PI);I.push(J)}I=I.sort(e);u=I.length;var L=J=void 0;B=[];E=[];K=[];for(H=-1;H<u;H++){var M=I[0>H?H+u:H],N=Math.sin(M);
N=F.times(Math.cos(M)*t).plus(D.times(N*t));M=x.plus(N);N=z.plus(N);var O=!1;0<=H&&M.distanceTo(J)<f&&(O=!0);O||(0<=H&&(B.push(new k(M)),E.push(new k(N)),J=[new k(L),new k(N),new k(M),new k(J)],J=new l(J),K.push(J)),J=M,L=N)}E.reverse();K.push(new l(B));K.push(new l(E));x=v(K);A=A.unionSub(x,!1,!1)}var Q={};q.polygons.map(function(R){R.vertices.map(function(P){var W=P.getTag();W in Q?P=Q[W]:(P={pos:P.pos,normals:[]},Q[W]=P);P.normals.push(R.plane.normal)})});for(var S in Q){v=Q[S];C=v.normals[0].unit();
q=null;x=0;for(z=1;z<v.normals.length;z++)F=v.normals[z].unit(),D=C.cross(F).length(),.05<D&&D>x&&(x=D,q=F);q||(q=C.randomNonParallelVector());q=C.cross(q).unit();x=q.cross(C);v=G.sphere({center:v.pos,radius:t,resolution:w,axes:[C,q,x]});A=A.unionSub(v,!1,!1)}return A};b.exports={expand:function(q,t,w){d(q)?(t=q.union(r(q,t,w)),t=t.reTesselated(),t.properties=q.properties):t=q.union(p(q,t,w));return t},contract:function(q,t,w){d(q)?(t=q.subtract(r(q,t,w)),t=t.reTesselated(),t.properties=q.properties):
t=q.subtract(p(q,t,w));return t},expandedShellOfCAG:p,expandedShellOfCCSG:r}},{"../core/CAG":15,"../core/CAGFactories":16,"../core/CSG":17,"../core/CSGFactories":18,"../core/constants":24,"../core/math/Polygon3":32,"../core/math/Vector2":34,"../core/math/Vertex3":37,"../core/utils":42}],10:[function(a,b,g){g=a("../core/constants");var f=g.EPS,m=g.defaultResolution3D,k=a("../core/math/OrthoNormalBasis");g=a("./optionParsers");var c=g.parseOptionAs3DVector,l=g.parseOptionAsBool,e=g.parseOptionAsFloat,
d=g.parseOptionAsInt,h=a("../core/math/Vector3"),n=a("../core/math/Matrix4"),p=a("../core/math/Path2"),r=a("../core/connectors").Connector,q=a("../core/CSGFactories").fromPolygons;g=a("./helpers");var t=g.cagToPointsArray,w=g.clamp,x=g.rightMultiply1x3VectorToArray,G=g.polygonFromPoints,v=a("../core/CAGFactories").fromPoints,A=function(y,C,u,z){if(!(C instanceof k))throw Error("extrudeInPlane: the first parameter should be a OrthoNormalBasis");y=y.extrude({offset:[0,0,u]});l(z,"symmetrical",!1)&&
(y=y.translate([0,0,-u/2]));C=C.getInverseProjectionMatrix();return y=y.transform(C)};b.exports={extrudeInOrthonormalBasis:A,extrudeInPlane:function(y,C,u,z,D){return A(y,k.GetCartesian(C,u),z,D)},extrude:function(y,C){var u=a("../core/CSG");if(0===y.sides.length)return new u;u=c(C,"offset",[0,0,1]);var z=e(C,"twistangle",0);C=d(C,"twiststeps",m);if(0===u.z)throw Error("offset cannot be orthogonal to Z axis");if(0===z||1>C)C=1;var D=h.Create(0,1,0),F=[];F=F.concat(y._toPlanePolygons({translation:[0,
0,0],normalVector:D,flipped:!(0>u.z)}));F=F.concat(y._toPlanePolygons({translation:u,normalVector:D.rotateZ(z),flipped:0>u.z}));for(var I=0;I<C;I++){var B=new r(u.times(I/C),[0,0,u.z],D.rotateZ(I*z/C)),E=new r(u.times((I+1)/C),[0,0,u.z],D.rotateZ((I+1)*z/C));F=F.concat(y._toWallPolygons({toConnector1:B,toConnector2:E}))}return q(F)},linear_extrude:function(y,C){var u=Object.assign({},{height:1,slices:10,twist:0,center:!1},y);y=u.center;C=C.extrude({offset:[0,0,u.height],twistangle:u.twist,twiststeps:u.slices});
!0===y&&(y=C.getBounds(),y=y[1].plus(y[0]).times(-.5),C=C.translate(y));return C},rotate_extrude:function(y,C){var u=y=Object.assign({},{fn:32,startAngle:0,angle:360,overflow:"cap"},y),z=u.fn,D=u.startAngle,F=u.angle,I=u.overflow;if("cap"!==I)throw Error("only capping of overflowing points is supported !");2>arguments.length&&(C=y);var B=(u=0<F)?w(D+F,0,360):w(D+F,-360,0);z=Math.max(Math.floor(Math.abs(B)/45),1,z);B=t(C);var E=B.filter(function(Q){return 0>Q[0]}),H=B.filter(function(Q){return 0<=
Q[0]});0<E.length&&0<H.length&&"cap"===I&&(E.length>H.length?B=B.map(function(Q){return[Math.min(Q[0],0),Q[1]]}):H.length>=E.length&&(B=B.map(function(Q){return[Math.max(Q[0],0),Q[1]]})));I=[];E={};for(H=1;H<z+1;E={$jscomp$loop$prop$endMatrix$85:E.$jscomp$loop$prop$endMatrix$85,$jscomp$loop$prop$startMatrix$86:E.$jscomp$loop$prop$startMatrix$86},H++){for(var K=0;K<B.length-1;K++){var J=B[K],L=B[K+1],M=n.rotationZ((H-1)/z*F+D),N=n.rotationZ(H/z*F+D),O=x(M,[J[0],0,J[1]]);J=x(N,[J[0],0,J[1]]);M=x(M,
[L[0],0,L[1]]);L=x(N,[L[0],0,L[1]]);N=!1;1E-5>Math.abs(O[0]-J[0])&&1E-5>Math.abs(M[1]-L[1])&&(N=!0);u?(I.push(G([O,M,L])),N||I.push(G([L,J,O]))):(N||I.push(G([O,J,L])),I.push(G([L,M,O])))}360>Math.abs(F)&&(O=v(B),E.$jscomp$loop$prop$endMatrix$85=n.rotationX(90).multiply(n.rotationZ(-D)),K=O._toPlanePolygons({flipped:u}).map(function(Q){return function(S){return S.transform(Q.$jscomp$loop$prop$endMatrix$85)}}(E)),E.$jscomp$loop$prop$startMatrix$86=n.rotationX(90).multiply(n.rotationZ(-F-D)),O=O._toPlanePolygons({flipped:!u}).map(function(Q){return function(S){return S.transform(Q.$jscomp$loop$prop$startMatrix$86)}}(E)),
I=I.concat(K).concat(O))}return q(I).reTesselated().canonicalized()},rotateExtrude:function(y,C){var u=e(C,"angle",360),z=d(C,"resolution",m);u=360<u?u%360:u;C=[0,0,0];var D=h.Create(0,1,0),F=[0,0,1],I=[],B=new r(C,D,F);if(0<u&&360>u){var E=new r(C,D.rotateZ(-u),F);I=I.concat(y._toPlanePolygons({toConnector:B,flipped:!0}));I=I.concat(y._toPlanePolygons({toConnector:E}))}for(var H=E=u/z;H<=u+f;H+=E)z=new r(C,D.rotateZ(-H),F),I=I.concat(y._toWallPolygons({toConnector1:B,toConnector2:z})),B=z;return q(I).reTesselated()},
rectangular_extrude:function(y,C){C=Object.assign({},{w:1,h:1,fn:8,closed:!1,round:!0},C);var u=C.w,z=C.h,D=C.fn,F=C.round;return(new p(y,C.closed)).rectangularExtrude(u,z,D,F)}}},{"../core/CAGFactories":16,"../core/CSG":17,"../core/CSGFactories":18,"../core/connectors":23,"../core/constants":24,"../core/math/Matrix4":27,"../core/math/OrthoNormalBasis":28,"../core/math/Path2":29,"../core/math/Vector3":35,"./helpers":5,"./optionParsers":11}],11:[function(a,b,g){var f=a("../core/math/Vector3"),m=a("../core/math/Vector2"),
k=function(c,l,e){c&&l in c&&(e=c[l]);return e};b.exports={parseOption:k,parseOptionAsInt:function(c,l,e){c=k(c,l,e);c=Number(Math.floor(c));if(isNaN(c))throw Error("Parameter "+l+" should be a number");return c},parseOptionAsFloat:function(c,l,e){c=k(c,l,e);"string"===typeof c&&(c=Number(c));if(isNaN(c)||"number"!==typeof c)throw Error("Parameter "+l+" should be a number");return c},parseOptionAsBool:function(c,l,e){c=k(c,l,e);"string"===typeof c&&("true"===c?c=!0:"false"===c?c=!1:0===c&&(c=!1));
return!!c},parseOptionAs3DVector:function(c,l,e){c=k(c,l,e);return c=new f(c)},parseOptionAs2DVector:function(c,l,e){c=k(c,l,e);return c=new m(c)},parseOptionAs3DVectorList:function(c,l,e){return k(c,l,e).map(function(d){return new f(d)})}}},{"../core/math/Vector2":34,"../core/math/Vector3":35}],12:[function(a,b,g){a("../core/CAG");g=a("./optionParsers");var f=g.parseOptionAs2DVector,m=g.parseOptionAsFloat,k=g.parseOptionAsInt,c=a("../core/constants").defaultResolution2D,l=a("../core/math/Vector2");
a("../core/math/Vertex2");var e=a("../core/math/Path2");a=a("../core/CAGFactories");var d=a.fromPoints,h=a.fromPath2,n=function(p){p=p||{};if("corner1"in p||"corner2"in p){if("center"in p||"radius"in p)throw Error("rectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter");var r=f(p,"corner1",[0,0]);p=f(p,"corner2",[1,1]);var q=r.plus(p).times(.5);r=p.minus(r).times(.5)}else q=f(p,"center",[0,0]),r=f(p,"radius",[1,1]);r=r.abs();p=new l(r.x,-r.y);q=[q.plus(r),
q.plus(p),q.minus(r),q.minus(p)];return d(q)};b.exports={circle:function(p){p=p||{};var r=f(p,"center",[0,0]),q=m(p,"radius",1);p=k(p,"resolution",c);for(var t=[],w=0;w<p;w++){var x=l.fromAngleRadians(2*Math.PI*w/p).times(q).plus(r);t.push(x)}return d(t)},ellipse:function(p){p=p||{};var r=f(p,"center",[0,0]),q=f(p,"radius",[1,1]);q=q.abs();p=k(p,"resolution",c);var t=new e([[r.x,r.y+q.y]]);t=t.appendArc([r.x,r.y-q.y],{xradius:q.x,yradius:q.y,xaxisrotation:0,resolution:p,clockwise:!0,large:!1});t=
t.appendArc([r.x,r.y+q.y],{xradius:q.x,yradius:q.y,xaxisrotation:0,resolution:p,clockwise:!0,large:!1});t=t.close();return h(t)},rectangle:n,roundedRectangle:function(p){p=p||{};if("corner1"in p||"corner2"in p){if("center"in p||"radius"in p)throw Error("roundedRectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter");var r=f(p,"corner1",[0,0]);var q=f(p,"corner2",[1,1]);var t=r.plus(q).times(.5);q=q.minus(r).times(.5)}else t=f(p,"center",[0,0]),q=f(p,"radius",
[1,1]);q=q.abs();r=m(p,"roundradius",.2);p=k(p,"resolution",c);r=Math.min(r,Math.min(q.x,q.y)-.1);r=Math.max(0,r);q=new l(q.x-r,q.y-r);t=n({center:t,radius:q});0<r&&(t=t.expand(r,p));return t},fromCompactBinary:a.fromCompactBinary}},{"../core/CAG":15,"../core/CAGFactories":16,"../core/constants":24,"../core/math/Path2":29,"../core/math/Vector2":34,"../core/math/Vertex2":36,"./optionParsers":11}],13:[function(a,b,g){g=a("./optionParsers");var f=g.parseOption,m=g.parseOptionAs3DVector,k=g.parseOptionAs2DVector,
c=g.parseOptionAs3DVectorList,l=g.parseOptionAsFloat,e=g.parseOptionAsInt;g=a("../core/constants");var d=g.defaultResolution3D,h=g.defaultResolution2D,n=g.EPS,p=a("../core/math/Vector3"),r=a("../core/math/Vertex3"),q=a("../core/math/Polygon3"),t=a("../core/connectors").Connector,w=a("../core/Properties"),x=a("../core/CSGFactories").fromPolygons,G=function(v){v=v||{};var A=m(v,"center",[0,0,0]),y=l(v,"radius",1),C=e(v,"resolution",d);if("axes"in v){var u=v.axes[0].unit().times(y);var z=v.axes[1].unit().times(y);
v=v.axes[2].unit().times(y)}else u=(new p([1,0,0])).times(y),z=(new p([0,-1,0])).times(y),v=(new p([0,0,1])).times(y);4>C&&(C=4);y=Math.round(C/4);for(var D,F=[],I=0;I<=C;I++){var B=2*Math.PI*I/C;B=u.times(Math.cos(B)).plus(z.times(Math.sin(B)));if(0<I)for(var E,H=void 0,K=void 0,J=0;J<=y;J++){E=.5*Math.PI*J/y;var L=Math.cos(E),M=Math.sin(E);0<J&&(E=[],E.push(new r(A.plus(D.times(H).minus(v.times(K))))),E.push(new r(A.plus(B.times(H).minus(v.times(K))))),J<y&&E.push(new r(A.plus(B.times(L).minus(v.times(M))))),
E.push(new r(A.plus(D.times(L).minus(v.times(M))))),F.push(new q(E)),E=[],E.push(new r(A.plus(D.times(H).plus(v.times(K))))),E.push(new r(A.plus(B.times(H).plus(v.times(K))))),J<y&&E.push(new r(A.plus(B.times(L).plus(v.times(M))))),E.push(new r(A.plus(D.times(L).plus(v.times(M))))),E.reverse(),F.push(new q(E)));H=L;K=M}D=B}C=x(F);C.properties.sphere=new w;C.properties.sphere.center=new p(A);C.properties.sphere.facepoint=A.plus(u);return C};b.exports={cube:function(v){v=v||{};if("corner1"in v||"corner2"in
v){if("center"in v||"radius"in v)throw Error("cube: should either give a radius and center parameter, or a corner1 and corner2 parameter");var A=m(v,"corner1",[0,0,0]);v=m(v,"corner2",[1,1,1]);var y=A.plus(v).times(.5);var C=v.minus(A).times(.5)}else y=m(v,"center",[0,0,0]),C=m(v,"radius",[1,1,1]);C=C.abs();A=x([[[0,4,6,2],[-1,0,0]],[[1,3,7,5],[1,0,0]],[[0,1,5,4],[0,-1,0]],[[2,6,7,3],[0,1,0]],[[0,2,3,1],[0,0,-1]],[[4,5,7,6],[0,0,1]]].map(function(u){u=u[0].map(function(z){z=new p(y.x+C.x*(2*!!(z&
1)-1),y.y+C.y*(2*!!(z&2)-1),y.z+C.z*(2*!!(z&4)-1));return new r(z)});return new q(u,null)}));A.properties.cube=new w;A.properties.cube.center=new p(y);A.properties.cube.facecenters=[new t((new p([C.x,0,0])).plus(y),[1,0,0],[0,0,1]),new t((new p([-C.x,0,0])).plus(y),[-1,0,0],[0,0,1]),new t((new p([0,C.y,0])).plus(y),[0,1,0],[0,0,1]),new t((new p([0,-C.y,0])).plus(y),[0,-1,0],[0,0,1]),new t((new p([0,0,C.z])).plus(y),[0,0,1],[1,0,0]),new t((new p([0,0,-C.z])).plus(y),[0,0,-1],[1,0,0])];return A},sphere:G,
roundedCube:function(v){v=v||{};if("corner1"in v||"corner2"in v){if("center"in v||"radius"in v)throw Error("roundedCube: should either give a radius and center parameter, or a corner1 and corner2 parameter");var A=m(v,"corner1",[0,0,0]);var y=m(v,"corner2",[1,1,1]);var C=A.plus(y).times(.5);A=y.minus(A).times(.5)}else C=m(v,"center",[0,0,0]),A=m(v,"radius",[1,1,1]);A=A.abs();y=e(v,"resolution",d);4>y&&(y=4);1===y%2&&8>y&&(y=8);v=m(v,"roundradius",[.2,.2,.2]);v=p.Create(Math.max(v.x,.01),Math.max(v.y,
.01),Math.max(v.z,.01));var u=A.minus(v);if(0>u.x||0>u.y||0>u.z)throw Error("roundradius <= radius!");y=G({radius:1,resolution:y});y=y.scale(v);u.x>n&&(y=y.stretchAtPlane([1,0,0],[0,0,0],2*u.x));u.y>n&&(y=y.stretchAtPlane([0,1,0],[0,0,0],2*u.y));u.z>n&&(y=y.stretchAtPlane([0,0,1],[0,0,0],2*u.z));y=y.translate([-u.x+C.x,-u.y+C.y,-u.z+C.z]);y=y.reTesselated();y.properties.roundedCube=new w;y.properties.roundedCube.center=new r(C);y.properties.roundedCube.facecenters=[new t((new p([A.x,0,0])).plus(C),
[1,0,0],[0,0,1]),new t((new p([-A.x,0,0])).plus(C),[-1,0,0],[0,0,1]),new t((new p([0,A.y,0])).plus(C),[0,1,0],[0,0,1]),new t((new p([0,-A.y,0])).plus(C),[0,-1,0],[0,0,1]),new t((new p([0,0,A.z])).plus(C),[0,0,1],[1,0,0]),new t((new p([0,0,-A.z])).plus(C),[0,0,-1],[1,0,0])];return y},cylinder:function(v){function A(O,Q,S){Q=Q*Math.PI*D/180;Q=B.times(Math.cos(Q)).plus(E.times(Math.sin(Q)));O=y.plus(I.times(O)).plus(Q.times(S));return new r(O)}var y=m(v,"start",[0,-1,0]),C=m(v,"end",[0,1,0]),u=l(v,"radius",
1),z=l(v,"radiusEnd",u);u=l(v,"radiusStart",u);var D=l(v,"sectorAngle",360);D=360<D?D%360:D;if(0>z||0>u)throw Error("Radius should be non-negative");if(0===z&&0===u)throw Error("Either radiusStart or radiusEnd should be positive");var F=e(v,"resolution",h),I=C.minus(y);v=I.unit();var B=v.randomNonParallelVector().unit(),E=B.cross(v).unit(),H=new r(y),K=new r(C),J=[];if(0<D){for(var L=0;L<F;L++){var M=L/F,N=(L+1)/F;z===u?(J.push(new q([H,A(0,M,z),A(0,N,z)])),J.push(new q([A(0,N,z),A(0,M,z),A(1,M,z),
A(1,N,z)])),J.push(new q([K,A(1,N,z),A(1,M,z)]))):(0<u&&(J.push(new q([H,A(0,M,u),A(0,N,u)])),J.push(new q([A(0,M,u),A(1,M,z),A(0,N,u)]))),0<z&&(J.push(new q([K,A(1,N,z),A(1,M,z)])),J.push(new q([A(1,M,z),A(1,N,z),A(0,N,u)]))))}360>D&&(J.push(new q([H,K,A(0,0,u)])),J.push(new q([A(0,0,u),K,A(1,0,z)])),J.push(new q([H,A(0,1,u),K])),J.push(new q([A(0,1,u),A(1,1,z),K])))}F=x(J);F.properties.cylinder=new w;F.properties.cylinder.start=new t(y,v.negated(),B);F.properties.cylinder.end=new t(C,v,B);C=y.plus(I.times(.5));
z=B.rotate(y,v,-D/2).times((u+z)/2);u=z.cross(v);F.properties.cylinder.facepointH=new t(C.plus(z),z,v);F.properties.cylinder.facepointH90=new t(C.plus(u),u,v);return F},roundedCylinder:function(v){var A=m(v,"start",[0,-1,0]),y=m(v,"end",[0,1,0]),C=l(v,"radius",1),u=y.minus(A);var z=Math.abs(u.x)>Math.abs(u.y)?new p(0,1,0):new p(1,0,0);var D=m(v,"normal",z);v=e(v,"resolution",d);4>v&&(v=4);z=[];var F=Math.floor(.25*v);if(u.length()<n)return G({center:A,radius:C,resolution:v});var I=u.unit().times(C);
u=I.cross(D).unit().times(C);C=u.cross(I).unit().times(C);for(D=0;D<=v;D++){var B=2*Math.PI*D/v;B=u.times(Math.cos(B)).plus(C.times(Math.sin(B)));if(0<D){var E=[];E.push(new r(A.plus(B)));E.push(new r(A.plus(N)));E.push(new r(y.plus(N)));E.push(new r(y.plus(B)));z.push(new q(E));for(var H=void 0,K=void 0,J=0;J<=F;J++){E=.5*Math.PI*J/F;var L=Math.cos(E),M=Math.sin(E);0<J&&(E=[],E.push(new r(A.plus(N.times(H).minus(I.times(K))))),E.push(new r(A.plus(B.times(H).minus(I.times(K))))),J<F&&E.push(new r(A.plus(B.times(L).minus(I.times(M))))),
E.push(new r(A.plus(N.times(L).minus(I.times(M))))),z.push(new q(E)),E=[],E.push(new r(y.plus(N.times(H).plus(I.times(K))))),E.push(new r(y.plus(B.times(H).plus(I.times(K))))),J<F&&E.push(new r(y.plus(B.times(L).plus(I.times(M))))),E.push(new r(y.plus(N.times(L).plus(I.times(M))))),E.reverse(),z.push(new q(E)));H=L;K=M}}var N=B}N=x(z);v=I.unit();z=u.unit();N.properties.roundedCylinder=new w;N.properties.roundedCylinder.start=new t(A,v.negated(),z);N.properties.roundedCylinder.end=new t(y,v,z);N.properties.roundedCylinder.facepoint=
A.plus(u);return N},cylinderElliptic:function(v){function A(N,O,Q){O=O*Math.PI*2;Q=I.times(Q._x*Math.cos(O)).plus(B.times(Q._y*Math.sin(O)));N=y.plus(F.times(N)).plus(Q);return new r(N)}var y=m(v,"start",[0,-1,0]),C=m(v,"end",[0,1,0]),u=k(v,"radius",[1,1]),z=k(v,"radiusEnd",u);u=k(v,"radiusStart",u);if(0>z._x||0>u._x||0>z._y||0>u._y)throw Error("Radius should be non-negative");if(!(0!==z._x&&0!==z._y||0!==u._x&&0!==u._y))throw Error("Either radiusStart or radiusEnd should be positive");var D=e(v,
"resolution",h),F=C.minus(y);v=F.unit();for(var I=v.randomNonParallelVector().unit(),B=I.cross(v).unit(),E=new r(y),H=new r(C),K=[],J=0;J<D;J++){var L=J/D,M=(J+1)/D;z._x===u._x&&z._y===u._y?(K.push(new q([E,A(0,L,z),A(0,M,z)])),K.push(new q([A(0,M,z),A(0,L,z),A(1,L,z),A(1,M,z)])),K.push(new q([H,A(1,M,z),A(1,L,z)]))):(0<u._x&&(K.push(new q([E,A(0,L,u),A(0,M,u)])),K.push(new q([A(0,L,u),A(1,L,z),A(0,M,u)]))),0<z._x&&(K.push(new q([H,A(1,M,z),A(1,L,z)])),K.push(new q([A(1,L,z),A(1,M,z),A(0,M,u)]))))}z=
x(K);z.properties.cylinder=new w;z.properties.cylinder.start=new t(y,v.negated(),I);z.properties.cylinder.end=new t(C,v,I);z.properties.cylinder.facepoint=y.plus(I.times(u));return z},polyhedron:function(v){v=v||{};if("points"in v!=="faces"in v)throw Error("polyhedron needs 'points' and 'faces' arrays");var A=c(v,"points",[[1,1,0],[1,-1,0],[-1,-1,0],[-1,1,0],[0,0,1]]).map(function(y){return new r(y)});v=f(v,"faces",[[0,1,4],[1,2,4],[2,3,4],[3,0,4],[1,0,3],[2,1,3]]);v.forEach(function(y){y.reverse()});
v=v.map(function(y){return new q(y.map(function(C){return A[C]}))});return x(v).reTesselated()}}},{"../core/CSGFactories":18,"../core/Properties":22,"../core/connectors":23,"../core/constants":24,"../core/math/Polygon3":32,"../core/math/Vector3":35,"../core/math/Vertex3":37,"./optionParsers":11}],14:[function(a,b,g){var f=a("../core/math/Polygon3"),m=a("../core/CSGFactories").fromPolygons,k=a("../core/utils").fnSortByIndex,c=function(l,e,d,h){e=e.vertices.slice(0);var n=d.vertices.slice(0);d=d.shared||
null;e[0].pos.equals(e[e.length-1].pos)||e.push(e[0]);n[0].pos.equals(n[n.length-1].pos)||n.push(n[0]);h&&(e=e.reverse(),n=n.reverse());h=n.length-1;var p=e.length-1,r=h-p,q=0<r,t=0>r,w=[];for(r=Math.abs(r);0<r;r--)w.push({len:Infinity,index:-1});if(t)for(var x=0;x<p;x++){r=e[x].pos.distanceToSquared(e[x+1].pos);for(var G=w.length-1;0<=G;G--)if(w[G].len>r){w[G].len=r;w.index=G;break}}else if(q)for(x=0;x<h;x++)for(r=n[x].pos.distanceToSquared(n[x+1].pos),G=w.length-1;0<=G;G--)if(w[G].len>r){w[G].len=
r;w.index=G;break}w.sort(k);r=e[0];x=n[0];for(var v,A,y=G=0,C=h+p;G+y<C;){if(w.length)if(q&&y===w[0].index){v=n[++y];l.push(new f([v,x,r],d));x=v;w.shift();continue}else if(t&&G===w[0].index){v=e[++G];l.push(new f([x,r,v],d));r=v;w.shift();continue}v=G<p?x.pos.distanceToSquared(e[G+1].pos):Infinity;A=y<h?r.pos.distanceToSquared(n[y+1].pos):Infinity;v<=A?(v=e[++G],l.push(new f([x,r,v],d)),r=v):y<h&&(v=n[++y],l.push(new f([v,x,r],d)),x=v)}return l};b.exports=function(l,e){var d=[],h=null,n=null,p=null,
r=null,q=2,t=!1,w=null;if(e&&(t=!!e.loop,e.numslices&&(q=e.numslices),e.callback))var x=e.callback;if(!x){var G=f.createFromPoints([[0,0,0],[1,0,0],[1,1,0],[0,1,0]]);x=function(v,A){return 0===v||1===v?G.translate([0,0,v]):null}}e=0;for(--q;e<=q;e++)if(h=x.call(l,e/q,e)){if(!(h instanceof f))throw Error("Polygon.solidFromSlices callback error: Polygon expected");h.checkIfConvex();n?(null===w&&(w=0>n.plane.signedDistanceToPoint(h.vertices[0].pos)),c(d,n,h,w)):p=h;n=h}r=h;t?p.vertices.length===r.vertices.length&&
p.vertices.every(function(v,A){return v.pos.equals(r.vertices[A].pos)})||c(d,r,p,w):(d.unshift(w?p:p.flipped()),d.push(w?r.flipped():r));return m(d)}},{"../core/CSGFactories":18,"../core/math/Polygon3":32,"../core/utils":42}],15:[function(a,b,g){var f=a("./connectors").Connector,m=a("./math/Vertex3"),k=a("./math/Vector2"),c=a("./math/Vector3"),l=a("./math/Polygon3"),e=a("./CSGFactories").fromPolygons;g=a("./CAGFactories");var d=g.fromSides,h=g.fromFakeCSG,n=a("./utils/canonicalize"),p=a("./utils/retesellate");
g=a("./utils/cagValidation");var r=g.isCAGValid,q=g.isSelfIntersecting,t=g.hasPointInside;g=a("./utils/cagMeasurements");var w=g.area,x=g.getBounds,G=a("../api/ops-cnc").overCutInsideCorners;g=a("../api/ops-extrusions");var v=g.extrudeInOrthonormalBasis,A=g.extrudeInPlane,y=g.extrude,C=g.rotateExtrude,u=a("../api/cagOutlinePaths"),z=a("../api/center");a=a("../api/ops-expandContract");var D=a.expand,F=a.contract,I=a.expandedShellOfCAG;a=function(){this.sides=[];this.isCanonicalized=!1};a.prototype=
{union:function(B){B=B instanceof Array?B:[B];var E=this._toCSGWall(-1,1);E=E.union(B.map(function(H){return H._toCSGWall(-1,1).reTesselated()}),!1,!1);return h(E).canonicalized()},subtract:function(B){B=B instanceof Array?B:[B];var E=this._toCSGWall(-1,1);B.map(function(H){E=E.subtractSub(H._toCSGWall(-1,1),!1,!1)});E=E.reTesselated();E=E.canonicalized();E=h(E);return E=E.canonicalized()},intersect:function(B){B=B instanceof Array?B:[B];var E=this._toCSGWall(-1,1);B.map(function(H){E=E.intersectSub(H._toCSGWall(-1,
1),!1,!1)});E=E.reTesselated();E=E.canonicalized();E=h(E);return E=E.canonicalized()},transform:function(B){var E=B.isMirroring(),H=this.sides.map(function(K){return K.transform(B)});H=d(H);E&&(H=H.flipped());return H},flipped:function(){var B=this.sides.map(function(E){return E.flipped()});B.reverse();return d(B)},center:function(B){return z({axes:B},[this])},expandedShell:function(B,E){return I(this,B,E)},expand:function(B,E){return D(this,B,E)},contract:function(B,E){return F(this,B,E)},area:function(){return w(this)},
getBounds:function(){return x(this)},isSelfIntersecting:function(B){return q(this,B)},extrudeInOrthonormalBasis:function(B,E,H){return v(this,B,E,H)},extrudeInPlane:function(B,E,H,K){return A(this,B,E,H,K)},extrude:function(B){return y(this,B)},rotateExtrude:function(B){return C(this,B)},check:function(){return r(this)},canonicalized:function(){return n(this)},reTesselated:function(){return p(this)},getOutlinePaths:function(){return u(this)},overCutInsideCorners:function(B){return G(this,B)},hasPointInside:function(B){return t(this,
B)},toString:function(){var B="CAG ("+this.sides.length+" sides):\n";this.sides.map(function(E){B+="  "+E.toString()+"\n"});return B},_toCSGWall:function(B,E){var H=this.sides.map(function(K){return K.toPolygon3D(B,E)});return e(H)},_toVector3DPairs:function(B){var E=this.sides.map(function(H){var K=H.vertex0.pos;H=H.vertex1.pos;return[c.Create(K.x,K.y,0),c.Create(H.x,H.y,0)]});"undefined"!==typeof B&&(E=E.map(function(H){return H.map(function(K){return K.transform(B)})}));return E},_toPlanePolygons:function(B){B=
Object.assign({},{flipped:!1},B);var E=B.flipped,H=[0,0,0],K=[0,0,1],J=[0,1,0],L=new f(H,K,J);H=B.translation||H;K=B.axisVector||K;J=B.normalVector||J;B=B.toConnector||new f(H,K,J);var M=L.getTransformationTo(B,!1,0);B=this.getBounds();B[0]=B[0].minus(new k(1,1));B[1]=B[1].plus(new k(1,1));L=this._toCSGWall(-1,1);B=e([new l([new m(new c(B[0].x,B[0].y,0)),new m(new c(B[1].x,B[0].y,0)),new m(new c(B[1].x,B[1].y,0)),new m(new c(B[0].x,B[1].y,0))])]);E&&(B=B.invert());B=B.intersectSub(L);return B.polygons.filter(function(N){return.99<
Math.abs(N.plane.normal.z)}).map(function(N){return N.transform(M)})},_toWallPolygons:function(B){var E=new f([0,0,0],[0,0,1],[0,1,0]),H=B.toConnector1,K=B.toConnector2;if(!(H instanceof f&&K instanceof f))throw Error("could not parse Connector arguments toConnector1 or toConnector2");if(B.cag&&B.cag.sides.length!==this.sides.length)throw Error("target cag needs same sides count as start cag");B=B.cag||this;H=E.getTransformationTo(H,!1,0);E=E.getTransformationTo(K,!1,0);K=this._toVector3DPairs(H);
var J=B._toVector3DPairs(E),L=[];K.forEach(function(M,N){L.push(new l([new m(J[N][1]),new m(J[N][0]),new m(M[0])]));L.push(new l([new m(J[N][1]),new m(M[0]),new m(M[1])]))});return L},toPoints:function(){var B=this.sides.map(function(E){return E.vertex0.pos});0<B.length&&B.push(B.shift());return B},toCompactBinary:function(){var B=this.canonicalized(),E={},H=[],K=0,J=new Uint32Array(2*B.sides.length),L=0;B.sides.map(function(O){[O.vertex0,O.vertex1].map(function(Q){var S=Q.getTag();if(S in E)var R=
E[S];else R=K++,E[S]=R,H.push(Q);J[L++]=R})});var M=new Float64Array(2*K),N=0;H.map(function(O){O=O.pos;M[N++]=O._x;M[N++]=O._y});return{"class":"CAG",sideVertexIndices:J,vertexData:M}}};b.exports=a},{"../api/cagOutlinePaths":2,"../api/center":3,"../api/ops-cnc":7,"../api/ops-expandContract":9,"../api/ops-extrusions":10,"./CAGFactories":16,"./CSGFactories":18,"./connectors":23,"./math/Polygon3":32,"./math/Vector2":34,"./math/Vector3":35,"./math/Vertex3":37,"./utils/cagMeasurements":43,"./utils/cagValidation":44,
"./utils/canonicalize":45,"./utils/retesellate":49}],16:[function(a,b,g){var f=a("./math/Side"),m=a("./math/Vector2"),k=a("./math/Vertex2"),c=a("./constants").areaEPS;g=a("./utils/cagValidation");var l=g.isSelfIntersecting,e=g.contains;g=a("../api/ops-booleans");var d=g.union,h=g.difference,n=function(t){var w=new (a("./CAG"));w.sides=t;return w},p=function(t){if(!t)throw Error("points parameter must be defined");if(!Array.isArray(t))throw Error("points parameter must be an array");if(void 0!==t[0].x||
"number"===typeof t[0][0])return r(t);if("object"===typeof t[0][0])return q(t);throw Error("Unsupported points list format");},r=function(t){if(3>t.length)throw Error("CAG shape needs at least 3 points");var w=[],x=new k(new m(t[t.length-1]));t.map(function(v){v=new k(new m(v));w.push(new f(x,v));x=v});t=n(w);if(l(t))throw Error("Polygon is self intersecting!");var G=t.area();if(Math.abs(G)<c)throw Error("Degenerate polygon!");0>G&&(t=t.flipped());return t.canonicalized()},q=function(t){if(1===t.length)return p(t[0]);
var w=[];t.forEach(function(G){w.push(r(G))});var x={};w.forEach(function(G,v){w.forEach(function(A,y){G!==A&&(x[v]||(x[v]={parents:[],isHole:!1}),x[y]||(x[y]={parents:[],isHole:!1}),e(A,G)&&(x[v].parents.push(y),x[v].isHole=!!(x[v].parents.length%2),x[y].isHole=!!(x[y].parents.length%2)))})});t=null;for(key in x)t=x[key],t.isHole&&(delete x[key],t.parents.forEach(function(G){w[G]=h(w[G],w[key])}));t=n([]);for(key in x)t=d(t,w[key]);return t};b.exports={fromSides:n,fromObject:function(t){var w=t.sides.map(function(x){return f.fromObject(x)});
w=n(w);w.isCanonicalized=t.isCanonicalized;return w},fromPoints:p,fromPointsNoCheck:function(t){var w=[],x=new m(t[t.length-1]),G=new k(x);t.map(function(v){v=new m(v);v=new k(v);var A=new f(G,v);w.push(A);G=v});return n(w)},fromPath2:function(t){if(!t.isClosed())throw Error("The path should be closed!");return p(t.getPoints())},fromFakeCSG:function(t){t=t.polygons.map(function(w){return f._fromFakePolygon(w)}).filter(function(w){return null!==w});return n(t)},fromCompactBinary:function(t){if("CAG"!==
t["class"])throw Error("Not a CAG");for(var w=[],x=t.vertexData,G=x.length/2,v=0,A=0;A<G;A++){var y=x[v++],C=x[v++];y=new m(y,C);y=new k(y);w.push(y)}x=[];G=t.sideVertexIndices.length/2;for(A=v=0;A<G;A++)y=t.sideVertexIndices[v++],C=t.sideVertexIndices[v++],y=new f(w[y],w[C]),x.push(y);t=n(x);t.isCanonicalized=!0;return t}}},{"../api/ops-booleans":6,"./CAG":15,"./constants":24,"./math/Side":33,"./math/Vector2":34,"./math/Vertex2":36,"./utils/cagValidation":44}],17:[function(a,b,g){var f=a("./trees"),
m=a("./math/Polygon3"),k=a("./math/Plane"),c=a("./math/OrthoNormalBasis");a("./CAG");var l=a("./Properties"),e=a("./CSGFactories").fromPolygons,d=a("./utils/fixTJunctions"),h=a("./utils/canonicalize"),n=a("./utils/retesellate"),p=a("./utils/csgMeasurements").bounds,r=a("./utils/csgProjections").projectToOrthoNormalBasis;g=a("../api/ops-cnc");var q=g.lieFlat,t=g.getTransformationToFlatLying,w=g.getTransformationAndInverseTransformationToFlatLying;g=a("../api/ops-cuts");var x=g.sectionCut,G=g.cutByPlane,
v=a("../api/center");a=a("../api/ops-expandContract");var A=a.expand,y=a.contract,C=a.expandedShellOfCCSG;a=function(){this.polygons=[];this.properties=new l;this.isRetesselated=this.isCanonicalized=!0};a.prototype={union:function(u){u instanceof Array?(u=u.slice(0),u.push(this)):u=[this,u];var z;for(z=1;z<u.length;z+=2)u.push(u[z-1].unionSub(u[z]));return u[z-1].reTesselated().canonicalized()},unionSub:function(u,z,D){if(this.mayOverlap(u)){var F=new f(this.polygons),I=new f(u.polygons);F.clipTo(I,
!1);I.clipTo(F);I.invert();I.clipTo(F);I.invert();F=F.allPolygons().concat(I.allPolygons());F=e(F);F.properties=this.properties._merge(u.properties);z&&(F=F.reTesselated());D&&(F=F.canonicalized());return F}return this.unionForNonIntersecting(u)},unionForNonIntersecting:function(u){var z=this.polygons.concat(u.polygons);z=e(z);z.properties=this.properties._merge(u.properties);z.isCanonicalized=this.isCanonicalized&&u.isCanonicalized;z.isRetesselated=this.isRetesselated&&u.isRetesselated;return z},
subtract:function(u){u=u instanceof Array?u:[u];for(var z=this,D=0;D<u.length;D++){var F=D===u.length-1;z=z.subtractSub(u[D],F,F)}return z},subtractSub:function(u,z,D){var F=new f(this.polygons),I=new f(u.polygons);F.invert();F.clipTo(I);I.clipTo(F,!0);F.addPolygons(I.allPolygons());F.invert();F=e(F.allPolygons());F.properties=this.properties._merge(u.properties);z&&(F=F.reTesselated());D&&(F=F.canonicalized());return F},intersect:function(u){u=u instanceof Array?u:[u];for(var z=this,D=0;D<u.length;D++){var F=
D===u.length-1;z=z.intersectSub(u[D],F,F)}return z},intersectSub:function(u,z,D){var F=new f(this.polygons),I=new f(u.polygons);F.invert();I.clipTo(F);I.invert();F.clipTo(I);I.clipTo(F);F.addPolygons(I.allPolygons());F.invert();F=e(F.allPolygons());F.properties=this.properties._merge(u.properties);z&&(F=F.reTesselated());D&&(F=F.canonicalized());return F},invert:function(){var u=this.polygons.map(function(z){return z.flipped()});return e(u)},transform1:function(u){var z=this.polygons.map(function(D){return D.transform(u)});
z=e(z);z.properties=this.properties._transform(u);z.isRetesselated=this.isRetesselated;return z},transform:function(u){var z=u.isMirroring(),D={},F={},I=this.polygons.map(function(B){var E=B.plane;var H=E.getTag();H in F?E=F[H]:(E=E.transform(u),F[H]=E);H=B.vertices.map(function(K){var J=K.getTag();J in D?K=D[J]:(K=K.transform(u),D[J]=K);return K});z&&H.reverse();return new m(H,B.shared,E)});I=e(I);I.properties=this.properties._transform(u);I.isRetesselated=this.isRetesselated;I.isCanonicalized=this.isCanonicalized;
return I},center:function(u){return v({axes:u},[this])},expand:function(u,z){return A(this,u,z)},contract:function(u,z){return y(this,u,z)},expandedShell:function(u,z,D){return C(this,u,z,D)},stretchAtPlane:function(u,z,D){u=k.fromNormalAndPoint(u,z);z=new c(u);z=this.sectionCut(z).extrudeInOrthonormalBasis(z,D);var F=this.cutByPlane(u),I=this.cutByPlane(u.flipped());return F.union([z,I.translate(u.normal.times(D))])},canonicalized:function(){return h(this)},reTesselated:function(){return n(this)},
fixTJunctions:function(){return d(e,this)},getBounds:function(){return p(this)},mayOverlap:function(u){if(0===this.polygons.length||0===u.polygons.length)return!1;var z=p(this);u=p(u);return z[1].x<u[0].x||z[0].x>u[1].x||z[1].y<u[0].y||z[0].y>u[1].y||z[1].z<u[0].z||z[0].z>u[1].z?!1:!0},cutByPlane:function(u){return G(this,u)},connectTo:function(u,z,D,F){u=u.getTransformationTo(z,D,F);return this.transform(u)},setShared:function(u){var z=this.polygons.map(function(D){return new m(D.vertices,u,D.plane)});
z=e(z);z.properties=this.properties;z.isRetesselated=this.isRetesselated;z.isCanonicalized=this.isCanonicalized;return z},setColor:function(u){var z=m.Shared.fromColor.apply(this,arguments);return this.setShared(z)},getTransformationAndInverseTransformationToFlatLying:function(){return w(this)},getTransformationToFlatLying:function(){return t(this)},lieFlat:function(){return q(this)},projectToOrthoNormalBasis:function(u){return r(this,u)},sectionCut:function(u){return x(this,u)},getFeatures:function(u){u instanceof
Array||(u=[u]);var z=this.toTriangles().map(function(D){return D.getTetraFeatures(u)}).reduce(function(D,F){return F.map(function(I,B){return I+(0===D?0:D[B])})},0);return 1===z.length?z[0]:z},toPolygons:function(){return this.polygons},toString:function(){var u="CSG solid:\n";this.polygons.map(function(z){u+=z.toString()});return u},toCompactBinary:function(){var u=this.canonicalized(),z=u.polygons.length,D=0,F=0,I={},B=[],E=0,H={},K=[],J=[],L={},M=0;u.polygons.map(function(U){U.vertices.map(function(ba){++D;
var ca=ba.getTag();ca in I||(I[ca]=F++,B.push(ba))});var X=U.plane.getTag();X in H||(H[X]=E++,K.push(U.plane));X=U.shared.getTag();X in L||(L[X]=M++,J.push(U.shared))});for(var N=new Uint32Array(z),O=new Uint32Array(z),Q=new Uint32Array(D),S=new Uint32Array(z),R=new Float64Array(3*F),P=new Float64Array(4*E),W=0,V=0;V<z;++V){var T=u.polygons[V];N[V]=T.vertices.length;T.vertices.map(function(U){U=U.getTag();U=I[U];Q[W++]=U});var Z=T.plane.getTag();S[V]=H[Z];T=T.shared.getTag();O[V]=L[T]}var Y=0;B.map(function(U){U=
U.pos;R[Y++]=U._x;R[Y++]=U._y;R[Y++]=U._z});var aa=0;K.map(function(U){var X=U.normal;P[aa++]=X._x;P[aa++]=X._y;P[aa++]=X._z;P[aa++]=U.w});return{"class":"CSG",numPolygons:z,numVerticesPerPolygon:N,polygonPlaneIndexes:S,polygonSharedIndexes:O,polygonVertices:Q,vertexData:R,planeData:P,shared:J}},toTriangles:function(){var u=[];this.polygons.forEach(function(z){for(var D=z.vertices[0],F=z.vertices.length-3;0<=F;F--)u.push(new m([D,z.vertices[F+1],z.vertices[F+2]],z.shared,z.plane))});return u}};b.exports=
a},{"../api/center":3,"../api/ops-cnc":7,"../api/ops-cuts":8,"../api/ops-expandContract":9,"./CAG":15,"./CSGFactories":18,"./Properties":22,"./math/OrthoNormalBasis":28,"./math/Plane":30,"./math/Polygon3":32,"./trees":41,"./utils/canonicalize":45,"./utils/csgMeasurements":46,"./utils/csgProjections":47,"./utils/fixTJunctions":48,"./utils/retesellate":49}],18:[function(a,b,g){var f=a("./math/Vector3"),m=a("./math/Vertex3"),k=a("./math/Plane"),c=a("./math/Polygon2"),l=a("./math/Polygon3"),e=function(d){var h=
new (a("./CSG"));h.polygons=d;h.isCanonicalized=!1;h.isRetesselated=!1;return h};b.exports={fromPolygons:e,fromSlices:function(d){return c.createFromPoints([[0,0,0],[1,0,0],[1,1,0],[0,1,0]]).solidFromSlices(d)},fromObject:function(d){var h=d.polygons.map(function(n){return l.fromObject(n)});h=e(h);h.isCanonicalized=d.isCanonicalized;h.isRetesselated=d.isRetesselated;return h},fromCompactBinary:function(d){if("CSG"!==d["class"])throw Error("Not a CSG");for(var h=[],n=d.planeData,p=n.length/4,r=0,q,
t,w,x,G=0;G<p;G++)q=n[r++],t=n[r++],w=n[r++],x=n[r++],q=f.Create(q,t,w),q=new k(q,x),h.push(q);n=[];p=d.vertexData;G=p.length/3;for(x=r=0;x<G;x++)q=p[r++],t=p[r++],w=p[r++],q=f.Create(q,t,w),q=new m(q),n.push(q);t=d.shared.map(function(u){return l.Shared.fromObject(u)});w=[];p=d.numPolygons;G=d.numVerticesPerPolygon;x=d.polygonVertices;var v=d.polygonPlaneIndexes;d=d.polygonSharedIndexes;for(var A,y,C=r=0;C<p;C++){q=G[C];A=[];for(y=0;y<q;y++)A.push(n[x[r++]]);q=h[v[C]];y=t[d[C]];q=new l(A,y,q);w.push(q)}h=
e(w);h.isCanonicalized=!0;h.isRetesselated=!0;return h}}},{"./CSG":17,"./math/Plane":30,"./math/Polygon2":31,"./math/Polygon3":32,"./math/Vector3":35,"./math/Vertex3":37}],19:[function(a,b,g){a=function(f,m){this.lookuptable={};this.multiplier=1/m};a.prototype={lookupOrCreate:function(f,m){var k="",c=this.multiplier;f.forEach(function(h){k+=Math.round(h*c)+"/"});if(k in this.lookuptable)return this.lookuptable[k];m=m(f);var l=f.map(function(h){h=Math.floor(h*c);return[""+h+"/",""+(h+1)+"/"]});f=1<<
f.length;for(var e={},d=0;d<f;e={$jscomp$loop$prop$hashmaskShifted$88:e.$jscomp$loop$prop$hashmaskShifted$88},++d)e.$jscomp$loop$prop$hashmaskShifted$88=d,k="",l.forEach(function(h){return function(n){k+=n[h.$jscomp$loop$prop$hashmaskShifted$88&1];h.$jscomp$loop$prop$hashmaskShifted$88>>=1}}(e)),this.lookuptable[k]=m;return m}};b.exports=a},{}],20:[function(a,b,g){var f=a("./FuzzyFactory"),m=a("./constants").EPS,k=a("./math/Side");a=function(){this.vertexfactory=new f(2,m)};a.prototype={getVertex:function(c){return this.vertexfactory.lookupOrCreate([c.pos._x,
c.pos._y],function(l){return c})},getSide:function(c){var l=this.getVertex(c.vertex0);c=this.getVertex(c.vertex1);return new k(l,c)}};b.exports=a},{"./FuzzyFactory":19,"./constants":24,"./math/Side":33}],21:[function(a,b,g){var f=a("./constants").EPS,m=a("./math/Polygon3"),k=a("./FuzzyFactory");a=function(){this.vertexfactory=new k(3,f);this.planefactory=new k(4,f);this.polygonsharedfactory={}};a.prototype={getPolygonShared:function(c){var l=c.getHash();return l in this.polygonsharedfactory?this.polygonsharedfactory[l]:
this.polygonsharedfactory[l]=c},getVertex:function(c){return this.vertexfactory.lookupOrCreate([c.pos._x,c.pos._y,c.pos._z],function(l){return c})},getPlane:function(c){return this.planefactory.lookupOrCreate([c.normal._x,c.normal._y,c.normal._z,c.w],function(l){return c})},getPolygon:function(c){var l=this.getPlane(c.plane),e=this.getPolygonShared(c.shared),d=this;c=c.vertices.map(function(p){return d.getVertex(p)});var h=[];if(0<c.length){var n=c[c.length-1].getTag();c.forEach(function(p){var r=
p.getTag();r!==n&&h.push(p);n=r})}3>h.length&&(h=[]);return new m(h,e,l)}};b.exports=a},{"./FuzzyFactory":19,"./constants":24,"./math/Polygon3":32}],22:[function(a,b,g){var f=function(){};f.prototype={_transform:function(m){var k=new f;f.transformObj(this,k,m);return k},_merge:function(m){var k=new f;f.cloneObj(this,k);f.addFrom(k,m);return k}};f.transformObj=function(m,k,c){for(var l in m)if("_transform"!==l&&"_merge"!==l){var e=m[l],d=e;"object"===typeof e&&("transform"in e&&"function"===typeof e.transform?
d=e.transform(c):e instanceof Array?(d=[],f.transformObj(e,d,c)):e instanceof f&&(d=new f,f.transformObj(e,d,c)));k[l]=d}};f.cloneObj=function(m,k){for(var c in m)if("_transform"!==c&&"_merge"!==c){var l=m[c],e=l;if("object"===typeof l)if(l instanceof Array){e=[];for(var d=0;d<l.length;d++)e.push(l[d])}else l instanceof f&&(e=new f,f.cloneObj(l,e));k[c]=e}};f.addFrom=function(m,k){for(var c in k)"_transform"!==c&&"_merge"!==c&&(c in m&&"object"===typeof m[c]&&m[c]instanceof f&&"object"===typeof k[c]&&
k[c]instanceof f?f.addFrom(m[c],k[c]):c in m||(m[c]=k[c]))};b.exports=f},{}],23:[function(a,b,g){var f=a("./math/Vector3"),m=a("./math/Line3"),k=a("./math/Matrix4"),c=a("./math/OrthoNormalBasis"),l=a("./math/Plane"),e=function(h,n,p){this.point=new f(h);this.axisvector=(new f(n)).unit();this.normalvector=(new f(p)).unit()};e.prototype={normalized:function(){var h=this.axisvector.unit(),n=this.normalvector.cross(h).unit();n=h.cross(n);return new e(this.point,h,n)},transform:function(h){var n=this.point.multiply4x4(h),
p=this.point.plus(this.axisvector).multiply4x4(h).minus(n);h=this.point.plus(this.normalvector).multiply4x4(h).minus(n);return new e(n,p,h)},getTransformationTo:function(h,n,p){n=n?!0:!1;p=p?Number(p):0;var r=this.normalized();h=h.normalized();var q=k.translation(this.point.negated()),t=l.anyPlaneFromVector3Ds(new f(0,0,0),r.axisvector,h.axisvector);t=new c(t);var w=t.to2D(r.axisvector).angle(),x=t.to2D(h.axisvector).angle();w=180*(x-w)/Math.PI;n&&(w+=180);q=q.multiply(t.getProjectionMatrix());q=
q.multiply(k.rotationZ(w));q=q.multiply(t.getInverseProjectionMatrix());r=r.transform(q);n=l.fromNormalAndPoint(h.axisvector,new f(0,0,0));n=new c(n);w=n.to2D(r.normalvector).angle();x=n.to2D(h.normalvector).angle();w=180*(x-w)/Math.PI;w+=p;q=q.multiply(n.getProjectionMatrix());q=q.multiply(k.rotationZ(w));q=q.multiply(n.getInverseProjectionMatrix());return q=q.multiply(k.translation(h.point))},axisLine:function(){return new m(this.point,this.axisvector)},extend:function(h){h=this.point.plus(this.axisvector.unit().times(h));
return new e(h,this.axisvector,this.normalvector)}};var d=function(h){this.connectors_=h?h.slice():[]};d.defaultNormal=[0,0,1];d.fromPath2D=function(h,n,p){if(3===arguments.length)return d._fromPath2DTangents(h,n,p);if(2===arguments.length)return d._fromPath2DExplicit(h,n);throw Error("call with path2D and either 2 direction vectors, or a function returning direction vectors");};d._fromPath2DTangents=function(h,n,p){var r,q=h.points.length,t=new d([new e(h.points[0],n,d.defaultNormal)]);h.points.slice(1,
q-1).forEach(function(w,x){r=h.points[x+2].minus(h.points[x]).toVector3D(0);t.appendConnector(new e(w.toVector3D(0),r,d.defaultNormal))},this);t.appendConnector(new e(h.points[q-1],p,d.defaultNormal));t.closed=h.closed;return t};d._fromPath2DExplicit=function(h,n){var p=new d(h.points.map(function(r,q){var t=r.toVector3D(0),w=f.Create(1,0,0),x=w.rotateZ,G=n;"function"===typeof G&&(G=G(r,q));return new e(t,x.call(w,G),d.defaultNormal)},this));p.closed=h.closed;return p};d.prototype={setClosed:function(h){this.closed=
!!h},appendConnector:function(h){this.connectors_.push(h)},followWith:function(h){function n(x,G){"function"===typeof x&&(x=x(G.point,G.axisvector,G.normalvector));return x}var p=a("./CSG");this.verify();var r=[],q,t=this.connectors_[this.connectors_.length-1],w=n(h,t);this.connectors_.forEach(function(x,G){q=n(h,x);G||this.closed?r.push.apply(r,w._toWallPolygons({toConnector1:t,toConnector2:x,cag:q})):r.push.apply(r,q._toPlanePolygons({toConnector:x,flipped:!0}));G!==this.connectors_.length-1||this.closed||
r.push.apply(r,q._toPlanePolygons({toConnector:x}));w=q;t=x},this);return p.fromPolygons(r).reTesselated().canonicalized()},verify:function(){for(var h,n,p=0;p<this.connectors_.length-1;p++){h=this.connectors_[p];n=this.connectors_[p+1];if(0>=n.point.minus(h.point).dot(h.axisvector))throw Error("Invalid ConnectorList. Each connectors position needs to be within a <90deg range of previous connectors axisvector");if(0>=h.axisvector.dot(n.axisvector))throw Error("invalid ConnectorList. No neighboring connectors axisvectors may span a >=90deg angle");
}}};b.exports={Connector:e,ConnectorList:d}},{"./CSG":17,"./math/Line3":26,"./math/Matrix4":27,"./math/OrthoNormalBasis":28,"./math/Plane":30,"./math/Vector3":35}],24:[function(a,b,g){var f=1;b.exports={_CSGDEBUG:!1,defaultResolution2D:32,defaultResolution3D:12,EPS:1E-5,angleEPS:.1,areaEPS:5E-6*1E-5*Math.sin(.1),all:0,top:1,bottom:2,left:3,right:4,front:5,back:6,staticTag:f,getTag:function(){return f++}}},{}],25:[function(a,b,g){var f=a("./Vector2"),m=a("../utils").solve2Linear,k=function(c,l){c=
new f(c);l=parseFloat(l);var e=c.length();l*=e;this.normal=c=c.times(1/e);this.w=l};k.fromPoints=function(c,l){c=new f(c);l=new f(l);l=l.minus(c).normal().negated().unit();c=c.dot(l);return new k(l,c)};k.prototype={reverse:function(){return new k(this.normal.negated(),-this.w)},equals:function(c){return c.normal.equals(this.normal)&&c.w===this.w},origin:function(){return this.normal.times(this.w)},direction:function(){return this.normal.normal()},xAtY:function(c){return(this.w-this.normal._y*c)/this.normal.x},
absDistanceToPoint:function(c){c=new f(c);c=c.dot(this.normal);return Math.abs(c-this.w)},intersectWithLine:function(c){c=m(this.normal.x,this.normal.y,c.normal.x,c.normal.y,this.w,c.w);return c=new f(c)},transform:function(c){var l=new f(0,0),e=this.normal.times(this.w);l=l.multiply4x4(c);l=this.normal.multiply4x4(c).minus(l);c=e.multiply4x4(c);c=l.dot(c);return new k(l,c)}};b.exports=k},{"../utils":42,"./Vector2":34}],26:[function(a,b,g){var f=a("./Vector3"),m=a("../constants").EPS,k=a("../utils").solve2Linear,
c=function(l,e){l=new f(l);e=new f(e);this.point=l;this.direction=e.unit()};c.fromPoints=function(l,e){l=new f(l);e=new f(e);e=e.minus(l);return new c(l,e)};c.fromPlanes=function(l,e){var d=l.normal.cross(e.normal),h=d.length();if(h<m)throw Error("Parallel planes");d=d.times(1/h);h=Math.abs(d.x);var n=Math.abs(d.y),p=Math.abs(d.z);h>=n&&h>=p?(l=k(l.normal.y,l.normal.z,e.normal.y,e.normal.z,l.w,e.w),l=new f(0,l[0],l[1])):n>=h&&n>=p?(l=k(l.normal.x,l.normal.z,e.normal.x,e.normal.z,l.w,e.w),l=new f(l[0],
0,l[1])):(l=k(l.normal.x,l.normal.y,e.normal.x,e.normal.y,l.w,e.w),l=new f(l[0],l[1],0));return new c(l,d)};c.prototype={intersectWithPlane:function(l){l=(l.w-l.normal.dot(this.point))/l.normal.dot(this.direction);return this.point.plus(this.direction.times(l))},clone:function(l){return new c(this.point.clone(),this.direction.clone())},reverse:function(){return new c(this.point.clone(),this.direction.negated())},transform:function(l){var e=this.point.multiply4x4(l);l=this.point.plus(this.direction).multiply4x4(l).minus(e);
return new c(e,l)},closestPointOnLine:function(l){l=new f(l);l=l.minus(this.point).dot(this.direction)/this.direction.dot(this.direction);return this.point.plus(this.direction.times(l))},distanceToPoint:function(l){l=new f(l);var e=this.closestPointOnLine(l);return l.minus(e).length()},equals:function(l){return!this.direction.equals(l.direction)||this.distanceToPoint(l.point)>m?!1:!0}};b.exports=c},{"../constants":24,"../utils":42,"./Vector3":35}],27:[function(a,b,g){var f=a("./Vector3"),m=a("./Vector2"),
k=a("./OrthoNormalBasis"),c=a("./Plane"),l=function(e){this.elements=1<=arguments.length?e:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]};l.prototype={plus:function(e){for(var d=[],h=0;16>h;h++)d[h]=this.elements[h]+e.elements[h];return new l(d)},minus:function(e){for(var d=[],h=0;16>h;h++)d[h]=this.elements[h]-e.elements[h];return new l(d)},multiply:function(e){var d=this.elements[0],h=this.elements[1],n=this.elements[2],p=this.elements[3],r=this.elements[4],q=this.elements[5],t=this.elements[6],w=this.elements[7],
x=this.elements[8],G=this.elements[9],v=this.elements[10],A=this.elements[11],y=this.elements[12],C=this.elements[13],u=this.elements[14],z=this.elements[15],D=e.elements[0],F=e.elements[1],I=e.elements[2],B=e.elements[3],E=e.elements[4],H=e.elements[5],K=e.elements[6],J=e.elements[7],L=e.elements[8],M=e.elements[9],N=e.elements[10],O=e.elements[11],Q=e.elements[12],S=e.elements[13],R=e.elements[14];e=e.elements[15];var P=[];P[0]=d*D+h*E+n*L+p*Q;P[1]=d*F+h*H+n*M+p*S;P[2]=d*I+h*K+n*N+p*R;P[3]=d*B+
h*J+n*O+p*e;P[4]=r*D+q*E+t*L+w*Q;P[5]=r*F+q*H+t*M+w*S;P[6]=r*I+q*K+t*N+w*R;P[7]=r*B+q*J+t*O+w*e;P[8]=x*D+G*E+v*L+A*Q;P[9]=x*F+G*H+v*M+A*S;P[10]=x*I+G*K+v*N+A*R;P[11]=x*B+G*J+v*O+A*e;P[12]=y*D+C*E+u*L+z*Q;P[13]=y*F+C*H+u*M+z*S;P[14]=y*I+C*K+u*N+z*R;P[15]=y*B+C*J+u*O+z*e;return new l(P)},clone:function(){var e=this.elements.map(function(d){return d});return new l(e)},rightMultiply1x3Vector:function(e){var d=e._x,h=e._y,n=e._z;e=d*this.elements[0]+h*this.elements[1]+n*this.elements[2]+1*this.elements[3];
var p=d*this.elements[4]+h*this.elements[5]+n*this.elements[6]+1*this.elements[7],r=d*this.elements[8]+h*this.elements[9]+n*this.elements[10]+1*this.elements[11];d=d*this.elements[12]+h*this.elements[13]+n*this.elements[14]+1*this.elements[15];1!==d&&(d=1/d,e*=d,p*=d,r*=d);return new f(e,p,r)},leftMultiply1x3Vector:function(e){var d=e._x,h=e._y,n=e._z;e=d*this.elements[0]+h*this.elements[4]+n*this.elements[8]+1*this.elements[12];var p=d*this.elements[1]+h*this.elements[5]+n*this.elements[9]+1*this.elements[13],
r=d*this.elements[2]+h*this.elements[6]+n*this.elements[10]+1*this.elements[14];d=d*this.elements[3]+h*this.elements[7]+n*this.elements[11]+1*this.elements[15];1!==d&&(d=1/d,e*=d,p*=d,r*=d);return new f(e,p,r)},rightMultiply1x2Vector:function(e){var d=e.x,h=e.y;e=d*this.elements[0]+h*this.elements[1]+0*this.elements[2]+1*this.elements[3];var n=d*this.elements[4]+h*this.elements[5]+0*this.elements[6]+1*this.elements[7];d=d*this.elements[12]+h*this.elements[13]+0*this.elements[14]+1*this.elements[15];
1!==d&&(d=1/d,e*=d,n*=d);return new m(e,n)},leftMultiply1x2Vector:function(e){var d=e.x,h=e.y;e=d*this.elements[0]+h*this.elements[4]+0*this.elements[8]+1*this.elements[12];var n=d*this.elements[1]+h*this.elements[5]+0*this.elements[9]+1*this.elements[13];d=d*this.elements[3]+h*this.elements[7]+0*this.elements[11]+1*this.elements[15];1!==d&&(d=1/d,e*=d,n*=d);return new m(e,n)},isMirroring:function(){var e=new f(this.elements[0],this.elements[4],this.elements[8]),d=new f(this.elements[1],this.elements[5],
this.elements[9]),h=new f(this.elements[2],this.elements[6],this.elements[10]);return 0>e.cross(d).dot(h)}};l.unity=function(){return new l};l.rotationX=function(e){var d=1/180*Math.PI*e;e=Math.cos(d);d=Math.sin(d);return new l([1,0,0,0,0,e,d,0,0,-d,e,0,0,0,0,1])};l.rotationY=function(e){var d=1/180*Math.PI*e;e=Math.cos(d);d=Math.sin(d);return new l([e,0,-d,0,0,1,0,0,d,0,e,0,0,0,0,1])};l.rotationZ=function(e){var d=1/180*Math.PI*e;e=Math.cos(d);d=Math.sin(d);return new l([e,d,0,0,-d,e,0,0,0,0,1,0,
0,0,0,1])};l.rotation=function(e,d,h){e=new f(e);d=new f(d);d=c.fromNormalAndPoint(d,e);d=new k(d);var n=l.translation(e.negated());n=n.multiply(d.getProjectionMatrix());n=n.multiply(l.rotationZ(h));n=n.multiply(d.getInverseProjectionMatrix());return n=n.multiply(l.translation(e))};l.translation=function(e){e=new f(e);return new l([1,0,0,0,0,1,0,0,0,0,1,0,e.x,e.y,e.z,1])};l.mirroring=function(e){var d=e.normal.x,h=e.normal.y,n=e.normal.z;e=e.w;return new l([1-2*d*d,-2*h*d,-2*n*d,0,-2*d*h,1-2*h*h,
-2*n*h,0,-2*d*n,-2*h*n,1-2*n*n,0,2*d*e,2*h*e,2*n*e,1])};l.scaling=function(e){e=new f(e);return new l([e.x,0,0,0,0,e.y,0,0,0,0,e.z,0,0,0,0,1])};b.exports=l},{"./OrthoNormalBasis":28,"./Plane":30,"./Vector2":34,"./Vector3":35}],28:[function(a,b,g){var f=a("./Vector2"),m=a("./Vector3"),k=a("./Line2"),c=a("./Line3"),l=a("./Plane"),e=function(d,h){h=2>arguments.length?d.normal.randomNonParallelVector():new m(h);this.v=d.normal.cross(h).unit();this.u=this.v.cross(d.normal);this.plane=d;this.planeorigin=
d.normal.times(d.w)};e.GetCartesian=function(d,h){d=d+"/"+h;if("X/Y"===d)d=[0,0,1],h=[1,0,0];else if("Y/-X"===d)d=[0,0,1],h=[0,1,0];else if("-X/-Y"===d)d=[0,0,1],h=[-1,0,0];else if("-Y/X"===d)d=[0,0,1],h=[0,-1,0];else if("-X/Y"===d)d=[0,0,-1],h=[-1,0,0];else if("-Y/-X"===d)d=[0,0,-1],h=[0,-1,0];else if("X/-Y"===d)d=[0,0,-1],h=[1,0,0];else if("Y/X"===d)d=[0,0,-1],h=[0,1,0];else if("X/Z"===d)d=[0,-1,0],h=[1,0,0];else if("Z/-X"===d)d=[0,-1,0],h=[0,0,1];else if("-X/-Z"===d)d=[0,-1,0],h=[-1,0,0];else if("-Z/X"===
d)d=[0,-1,0],h=[0,0,-1];else if("-X/Z"===d)d=[0,1,0],h=[-1,0,0];else if("-Z/-X"===d)d=[0,1,0],h=[0,0,-1];else if("X/-Z"===d)d=[0,1,0],h=[1,0,0];else if("Z/X"===d)d=[0,1,0],h=[0,0,1];else if("Y/Z"===d)d=[1,0,0],h=[0,1,0];else if("Z/-Y"===d)d=[1,0,0],h=[0,0,1];else if("-Y/-Z"===d)d=[1,0,0],h=[0,-1,0];else if("-Z/Y"===d)d=[1,0,0],h=[0,0,-1];else if("-Y/Z"===d)d=[-1,0,0],h=[0,-1,0];else if("-Z/-Y"===d)d=[-1,0,0],h=[0,0,-1];else if("Y/-Z"===d)d=[-1,0,0],h=[0,1,0];else if("Z/Y"===d)d=[-1,0,0],h=[0,0,1];
else throw Error("OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.");return new e(new l(new m(d),0),new m(h))};e.Z0Plane=function(){var d=new l(new m([0,0,1]),0);return new e(d,new m([1,0,0]))};e.prototype={getProjectionMatrix:function(){return new (a("./Matrix4"))([this.u.x,this.v.x,this.plane.normal.x,0,this.u.y,this.v.y,this.plane.normal.y,0,this.u.z,this.v.z,this.plane.normal.z,0,0,0,-this.plane.w,
1])},getInverseProjectionMatrix:function(){var d=a("./Matrix4"),h=this.plane.normal.times(this.plane.w);return new d([this.u.x,this.u.y,this.u.z,0,this.v.x,this.v.y,this.v.z,0,this.plane.normal.x,this.plane.normal.y,this.plane.normal.z,0,h.x,h.y,h.z,1])},to2D:function(d){return new f(d.dot(this.u),d.dot(this.v))},to3D:function(d){return this.planeorigin.plus(this.u.times(d.x)).plus(this.v.times(d.y))},line3Dto2D:function(d){var h=d.point;d=d.direction.plus(h);h=this.to2D(h);d=this.to2D(d);return k.fromPoints(h,
d)},line2Dto3D:function(d){var h=d.origin();d=d.direction().plus(h);h=this.to3D(h);d=this.to3D(d);return c.fromPoints(h,d)},transform:function(d){var h=this.plane.transform(d),n=this.u.transform(d);d=(new m(0,0,0)).transform(d);n=n.minus(d);return new e(h,n)}};b.exports=e},{"./Line2":25,"./Line3":26,"./Matrix4":27,"./Plane":30,"./Vector2":34,"./Vector3":35}],29:[function(a,b,g){var f=a("./Vector2");g=a("../constants");var m=g.EPS,k=g.angleEPS;g=a("../../api/optionParsers");var c=g.parseOptionAs2DVector,
l=g.parseOptionAsFloat,e=g.parseOptionAsInt,d=g.parseOptionAsBool,h=a("../constants").defaultResolution2D,n=a("./Vertex2"),p=a("./Side"),r=function(q,t){t=!!t;q=q||[];var w=null;t&&0<q.length&&(w=new f(q[q.length-1]));var x=[];q.map(function(G){G=new f(G);var v=!1;null!==w&&(v=G.distanceTo(w)<m);v||x.push(G);w=G});this.points=x;this.closed=t};r.arc=function(q){var t=c(q,"center",0),w=l(q,"radius",1),x=l(q,"startangle",0),G=l(q,"endangle",360),v=e(q,"resolution",h);for(q=d(q,"maketangent",!1);720<=
G-x;)G-=360;for(;-720>=G-x;)G+=360;var A=[],y=Math.abs(G-x);if(y<k){var C=f.fromAngle(x/180*Math.PI).times(w);A.push(C.plus(t))}else{v=Math.floor(v*y/360)+1;y=.5*v/y;.25<y&&(y=.25);for(var u=q?v+2:v,z=0;z<=u;z++)C=z,q&&(C=(z-1)*(v-2*y)/v+y,0>C&&(C=0),C>v&&(C=v)),C=f.fromAngle((x+C*(G-x)/v)/180*Math.PI).times(w),A.push(C.plus(t))}return new r(A,!1)};r.prototype={concat:function(q){if(this.closed||q.closed)throw Error("Paths must not be closed");q=this.points.concat(q.points);return new r(q)},getPoints:function(){return this.points},
appendPoint:function(q){if(this.closed)throw Error("Path must not be closed");q=new f(q);q=this.points.concat([q]);return new r(q)},appendPoints:function(q){if(this.closed)throw Error("Path must not be closed");var t=this.points;q.forEach(function(w){t.push(new f(w))});return new r(t)},close:function(){return new r(this.points,!0)},isClosed:function(){return this.closed},getTurn:function(){for(var q=this.points,t=0,w=q.length-1,x=0;x<q.length;w=x++)t+=q[w].x*q[x].y-q[w].y*q[x].x;return 0<t?"clockwise":
0>t?"counter-clockwise":"straight"},rectangularExtrude:function(q,t,w){return this.expandToCAG(q/2,w).extrude({offset:[0,0,t]})},expandToCAG:function(q,t){var w=a("../CAG"),x=[],G=this.points.length,v=0;this.closed&&2<G&&(v=-1);for(var A,y=v;y<G;y++){var C=y;0>C&&(C=G-1);C=new n(this.points[C]);y>v&&(A=new p(A,C),x.push(A));A=C}return w.fromSides(x).expandedShell(q,t)},innerToCAG:function(){var q=a("../CAG");if(!this.closed)throw Error("The path should be closed!");return q.fromPoints(this.points)},
transform:function(q){var t=this.points.map(function(w){return w.multiply4x4(q)});return new r(t,this.closed)},appendBezier:function(q,t){2>arguments.length&&(t={});if(this.closed)throw Error("Path must not be closed");if(!(q instanceof Array))throw Error("appendBezier: should pass an array of control points");if(1>q.length)throw Error("appendBezier: need at least 1 control point");if(1>this.points.length)throw Error("appendBezier: path must already contain a point (the endpoint of the path is used as the starting point for the bezier curve)");
var w=e(t,"resolution",h);4>w&&(w=4);var x=[],G=[];G.push(this.points[this.points.length-1]);for(var v=0;v<q.length;++v){var A=q[v];if(null===A){if(0!==v)throw Error("appendBezier: null can only be passed as the first control point");if(2>q.length)throw Error("appendBezier: null can only be passed if there is at least one more control point");A=void 0;if("lastBezierControlPoint"in this)A=this.lastBezierControlPoint;else{if(2>this.points.length)throw Error("appendBezier: null is passed as a control point but this requires a previous bezier curve or at least two points in the existing path");
A=this.points[this.points.length-2]}A=this.points[this.points.length-1].times(2).minus(A)}else A=new f(A);G.push(A)}var y=G.length-1;v=1;for(A=0;A<=y;++A)0<A&&(v*=A),x.push(v);var C=[];for(v=0;v<=y;++v)C.push(x[y]/(x[v]*x[y-v]));x=function(B){for(var E=1,H=Math.pow(1-B,y),K=1!==B?1/(1-B):1,J=new f(0,0),L=0;L<=y;++L)L===y&&(H=1),J=J.plus(G[L].times(C[L]*E*H)),E*=B,H*=K;return J};v=[];A=[];for(var u=y+1,z=0;z<u;++z){var D=z/(u-1),F=x(D);v.push(F);A.push(D)}u=1;for(w=Math.sin(2*Math.PI/w);u<v.length-
1;)if(z=v[u].minus(v[u-1]).unit(),D=v[u+1].minus(v[u]).unit(),z=z.cross(D),Math.abs(z)>w){D=A[u-1];F=A[u+1];z=D+(F-D)/3;D+=2*(F-D)/3;F=x(z);var I=x(D);v.splice(u,1,F,I);A.splice(u,1,z,D);u--;1>u&&(u=1)}else++u;v=this.points.concat(v.slice(1));x=new r(v);x.lastBezierControlPoint=G[G.length-2];return x},appendArc:function(q,t){2>arguments.length&&(t={});if(this.closed)throw Error("Path must not be closed");if(1>this.points.length)throw Error("appendArc: path must already contain a point (the endpoint of the path is used as the starting point for the arc)");
var w=e(t,"resolution",h);4>w&&(w=4);if("xradius"in t||"yradius"in t){if("radius"in t)throw Error("Should either give an xradius and yradius parameter, or a radius parameter");var x=l(t,"xradius",0);var G=l(t,"yradius",0)}else G=x=l(t,"radius",0);var v=l(t,"xaxisrotation",0),A=d(t,"clockwise",!1),y=d(t,"large",!1),C=this.points[this.points.length-1];q=new f(q);x=Math.round(1E5*x)/1E5;G=Math.round(1E5*G)/1E5;q=new f(Math.round(1E5*q.x)/1E5,Math.round(1E5*q.y)/1E5);var u=!A;A=[];if(0===x||0===G)A.push(q);
else{x=Math.abs(x);G=Math.abs(G);var z=v*Math.PI/180;v=Math.cos(z);z=Math.sin(z);var D=C.minus(q).times(.5);D=new f(Math.round(1E5*(v*D.x+z*D.y))/1E5,Math.round(1E5*(-z*D.x+v*D.y))/1E5);var F=D.x*D.x/(x*x)+D.y*D.y/(G*G);1<F&&(F=Math.sqrt(F),x=Math.round(x*F*1E5)/1E5,G=Math.round(G*F*1E5)/1E5);F=Math.sqrt((x*x*G*G-x*x*D.y*D.y-G*G*D.x*D.x)/(x*x*D.y*D.y+G*G*D.x*D.x));u===y&&(F=-F);y=(new f(x*D.y/G,-G*D.x/x)).times(F);C=(new f(v*y.x-z*y.y,z*y.x+v*y.y)).plus(C.plus(q).times(.5));F=new f((D.x-y.x)/x,(D.y-
y.y)/G);D=new f((-D.x-y.x)/x,(-D.y-y.y)/G);y=F.angleRadians();D=(D.angleRadians()-y)%(2*Math.PI);!u&&0<D?D-=2*Math.PI:u&&0>D&&(D+=2*Math.PI);w=Math.ceil(Math.abs(D)/(2*Math.PI)*w)+1;1>w&&(w=1);for(u=1;u<=w;u++){var I=y+u/w*D;F=Math.cos(I);I=Math.sin(I);F=(new f(v*x*F-z*G*I,z*x*F+v*G*I)).plus(C);A.push(F)}}A=this.points.concat(A);return new r(A)}};b.exports=r},{"../../api/optionParsers":11,"../CAG":15,"../constants":24,"./Side":33,"./Vector2":34,"./Vertex2":36}],30:[function(a,b,g){var f=a("./Vector3"),
m=a("./Line3");a=a("../constants");var k=a.EPS,c=a.getTag,l=function(e,d){this.normal=e;this.w=d};l.fromObject=function(e){var d=new f(e.normal);e=parseFloat(e.w);return new l(d,e)};l.fromVector3Ds=function(e,d,h){d=d.minus(e).cross(h.minus(e)).unit();return new l(d,d.dot(e))};l.anyPlaneFromVector3Ds=function(e,d,h){d=d.minus(e);h=h.minus(e);d.length()<k&&(d=h.randomNonParallelVector());h.length()<k&&(h=d.randomNonParallelVector());h=d.cross(h);h.length()<k&&(h=d.randomNonParallelVector(),h=d.cross(h));
h=h.unit();return new l(h,h.dot(e))};l.fromPoints=function(e,d,h){e=new f(e);d=new f(d);h=new f(h);return l.fromVector3Ds(e,d,h)};l.fromNormalAndPoint=function(e,d){e=new f(e);d=new f(d);e=e.unit();d=d.dot(e);return new l(e,d)};l.prototype={flipped:function(){return new l(this.normal.negated(),-this.w)},getTag:function(){var e=this.tag;e||(this.tag=e=c());return e},equals:function(e){return this.normal.equals(e.normal)&&this.w===e.w},transform:function(e){var d=e.isMirroring(),h=this.normal.randomNonParallelVector(),
n=this.normal.cross(h),p=this.normal.cross(n);h=this.normal.times(this.w);n=h.plus(n);p=h.plus(p);h=h.multiply4x4(e);n=n.multiply4x4(e);p=p.multiply4x4(e);e=l.fromVector3Ds(h,n,p);d&&(e=e.flipped());return e},splitLineBetweenPoints:function(e,d){d=d.minus(e);var h=(this.w-this.normal.dot(e))/this.normal.dot(d);isNaN(h)&&(h=0);1<h&&(h=1);0>h&&(h=0);return e.plus(d.times(h))},intersectWithLine:function(e){return e.intersectWithPlane(this)},intersectWithPlane:function(e){return m.fromPlanes(this,e)},
signedDistanceToPoint:function(e){return this.normal.dot(e)-this.w},toString:function(){return"[normal: "+this.normal.toString()+", w: "+this.w+"]"},mirrorPoint:function(e){var d=this.signedDistanceToPoint(e);return e.minus(this.normal.times(2*d))}};b.exports=l},{"../constants":24,"./Line3":26,"./Vector3":35}],31:[function(a,b,g){function f(k){this.sides=m(k).sides}g=a("../CAG");var m=a("../CAGFactories").fromPoints;f.prototype=g.prototype;b.exports=f},{"../CAG":15,"../CAGFactories":16}],32:[function(a,
b,g){var f=a("./Vector3"),m=a("./Vertex3"),k=a("./Matrix4");g=a("../constants");var c=g._CSGDEBUG,l=g.EPS,e=g.getTag,d=g.areaEPS,h=function(n,p,r){this.vertices=n;p||(p=h.defaultShared);this.shared=p;this.plane=3<=arguments.length?r:a("./Plane").fromVector3Ds(n[0].pos,n[1].pos,n[2].pos);if(c&&!this.checkIfConvex())throw Error("Not convex!");};h.prototype={checkIfConvex:function(){return h.verticesConvex(this.vertices,this.plane.normal)},setColor:function(n){this.shared=h.Shared.fromColor.apply(this,
arguments);return this},getSignedVolume:function(){for(var n=0,p=0;p<this.vertices.length-2;p++)n+=this.vertices[0].pos.dot(this.vertices[p+1].pos.cross(this.vertices[p+2].pos));return n/6},getArea:function(){for(var n=0,p=0;p<this.vertices.length-2;p++)n+=this.vertices[p+1].pos.minus(this.vertices[0].pos).cross(this.vertices[p+2].pos.minus(this.vertices[p+1].pos)).length();return n/2},getTetraFeatures:function(n){var p=[];n.forEach(function(r){"volume"===r?p.push(this.getSignedVolume()):"area"===
r&&p.push(this.getArea())},this);return p},extrude:function(n){var p=a("../CSGFactories").fromPolygons,r=[],q=this;0<q.plane.normal.dot(n)&&(q=q.flipped());r.push(q);n=q.translate(n);for(var t=this.vertices.length,w=0;w<t;w++){var x=[],G=w<t-1?w+1:0;x.push(q.vertices[w].pos);x.push(n.vertices[w].pos);x.push(n.vertices[G].pos);x.push(q.vertices[G].pos);x=h.createFromPoints(x,this.shared);r.push(x)}n=n.flipped();r.push(n);return p(r)},translate:function(n){return this.transform(k.translation(n))},boundingSphere:function(){if(!this.cachedBoundingSphere){var n=
this.boundingBox(),p=n[0].plus(n[1]).times(.5);n=n[1].minus(p).length();this.cachedBoundingSphere=[p,n]}return this.cachedBoundingSphere},boundingBox:function(){if(!this.cachedBoundingBox){var n,p=this.vertices,r=p.length;var q=n=0===r?new f(0,0,0):p[0].pos;for(var t=1;t<r;t++){var w=p[t].pos;n=n.min(w);q=q.max(w)}this.cachedBoundingBox=[n,q]}return this.cachedBoundingBox},flipped:function(){var n=this.vertices.map(function(r){return r.flipped()});n.reverse();var p=this.plane.flipped();return new h(n,
this.shared,p)},transform:function(n){var p=this.vertices.map(function(q){return q.transform(n)}),r=this.plane.transform(n);n.isMirroring()&&p.reverse();return new h(p,this.shared,r)},toString:function(){var n="Polygon plane: "+this.plane.toString()+"\n";this.vertices.map(function(p){n+="  "+p.toString()+"\n"});return n},projectToOrthoNormalBasis:function(n){var p=a("../CAG"),r=a("../CAGFactories").fromPointsNoCheck,q=this.vertices.map(function(t){return n.to2D(t.pos)});r=r(q);q=r.area();Math.abs(q)<
d?r=new p:0>q&&(r=r.flipped());return r},solidFromSlices:function(n){return a("../../api/solidFromSlices")(this,n)}};h.fromObject=function(n){var p=a("./Plane"),r=n.vertices.map(function(t){return m.fromObject(t)}),q=h.Shared.fromObject(n.shared);n=p.fromObject(n.plane);return new h(r,q,n)};h.createFromPoints=function(n,p,r){var q=[];n.map(function(t){t=new f(t);t=new m(t);q.push(t)});return 3>arguments.length?new h(q,p):new h(q,p,r)};h.verticesConvex=function(n,p){var r=n.length;if(2<r)for(var q=
n[r-2].pos,t=n[r-1].pos,w=0;w<r;w++){var x=n[w].pos;if(!h.isConvexPoint(q,t,x,p))return!1;q=t;t=x}return!0};h.isConvexPoint=function(n,p,r,q){return 0<=p.minus(n).cross(r.minus(p)).dot(q)};h.isStrictlyConvexPoint=function(n,p,r,q){return p.minus(n).cross(r.minus(p)).dot(q)>=l};h.Shared=function(n){if(null!==n&&void 0!==n&&4!==n.length)throw Error("Expecting 4 element array");this.color=n};h.Shared.fromObject=function(n){return new h.Shared(n.color)};h.Shared.fromColor=function(n){if(1===arguments.length)var p=
arguments[0].slice();else{p=[];for(var r=0;r<arguments.length;r++)p.push(arguments[r])}if(3===p.length)p.push(1);else if(4!==p.length)throw Error("setColor expects either an array with 3 or 4 elements, or 3 or 4 parameters.");return new h.Shared(p)};h.Shared.prototype={getTag:function(){var n=this.tag;n||(this.tag=n=e());return n},getHash:function(){return this.color?this.color.join("/"):"null"}};h.defaultShared=new h.Shared(null);b.exports=h},{"../../api/solidFromSlices":14,"../CAG":15,"../CAGFactories":16,
"../CSGFactories":18,"../constants":24,"./Matrix4":27,"./Plane":30,"./Vector3":35,"./Vertex3":37}],33:[function(a,b,g){var f=a("./Vector2"),m=a("./Vertex2"),k=a("./Vertex3"),c=a("./Polygon3"),l=a("../constants").getTag,e=function(d,h){if(!(d instanceof m))throw Error("Assertion failed");if(!(h instanceof m))throw Error("Assertion failed");this.vertex0=d;this.vertex1=h};e.fromObject=function(d){var h=m.fromObject(d.vertex0);d=m.fromObject(d.vertex1);return new e(h,d)};e._fromFakePolygon=function(d){if(4>
d.vertices.length)return null;var h=[];d=d.vertices.filter(function(p,r){return 0<p.pos.z?(h.push(r),!0):!1}).map(function(p){return new f(p.pos.x,p.pos.y)});if(2!==d.length)throw Error("Assertion failed: _fromFakePolygon: not enough points found");var n=h[1]-h[0];if(1===n||3===n)1===n&&d.reverse();else throw Error("Assertion failed: _fromFakePolygon: unknown index ordering");return new e(new m(d[0]),new m(d[1]))};e.prototype={toString:function(){return this.vertex0+" -> "+this.vertex1},toPolygon3D:function(d,
h){d=[new k(this.vertex0.pos.toVector3D(d)),new k(this.vertex1.pos.toVector3D(d)),new k(this.vertex1.pos.toVector3D(h)),new k(this.vertex0.pos.toVector3D(h))];return new c(d)},transform:function(d){var h=this.vertex0.pos.transform(d);d=this.vertex1.pos.transform(d);return new e(new m(h),new m(d))},flipped:function(){return new e(this.vertex1,this.vertex0)},direction:function(){return this.vertex1.pos.minus(this.vertex0.pos)},getTag:function(){var d=this.tag;d||(this.tag=d=l());return d},lengthSquared:function(){var d=
this.vertex1.pos.x-this.vertex0.pos.x,h=this.vertex1.pos.y-this.vertex0.pos.y;return d*d+h*h},length:function(){return Math.sqrt(this.lengthSquared())}};b.exports=e},{"../constants":24,"./Polygon3":32,"./Vector2":34,"./Vertex2":36,"./Vertex3":37}],34:[function(a,b,g){var f=a("../utils").IsFloat,m=function(k,c){if(2===arguments.length)this._x=parseFloat(k),this._y=parseFloat(c);else{var l=!0;if(1===arguments.length)if("object"===typeof k)k instanceof m?(this._x=k._x,this._y=k._y):k instanceof Array?
(this._x=parseFloat(k[0]),this._y=parseFloat(k[1])):"x"in k&&"y"in k?(this._x=parseFloat(k.x),this._y=parseFloat(k.y)):l=!1;else{var e=parseFloat(k);this._y=this._x=e}else l=!1;l&&(f(this._x)&&f(this._y)||(l=!1));if(!l)throw Error("wrong arguments");}};m.fromAngle=function(k){return m.fromAngleRadians(k)};m.fromAngleDegrees=function(k){return m.fromAngleRadians(Math.PI*k/180)};m.fromAngleRadians=function(k){return m.Create(Math.cos(k),Math.sin(k))};m.Create=function(k,c){var l=Object.create(m.prototype);
l._x=k;l._y=c;return l};m.prototype={get x(){return this._x},get y(){return this._y},set x(k){throw Error("Vector2D is immutable");},set y(k){throw Error("Vector2D is immutable");},toVector3D:function(k){return new (a("./Vector3"))(this._x,this._y,k)},equals:function(k){return this._x===k._x&&this._y===k._y},clone:function(){return m.Create(this._x,this._y)},negated:function(){return m.Create(-this._x,-this._y)},plus:function(k){return m.Create(this._x+k._x,this._y+k._y)},minus:function(k){return m.Create(this._x-
k._x,this._y-k._y)},times:function(k){return m.Create(this._x*k,this._y*k)},dividedBy:function(k){return m.Create(this._x/k,this._y/k)},dot:function(k){return this._x*k._x+this._y*k._y},lerp:function(k,c){return this.plus(k.minus(this).times(c))},length:function(){return Math.sqrt(this.dot(this))},distanceTo:function(k){return this.minus(k).length()},distanceToSquared:function(k){return this.minus(k).lengthSquared()},lengthSquared:function(){return this.dot(this)},unit:function(){return this.dividedBy(this.length())},
cross:function(k){return this._x*k._y-this._y*k._x},normal:function(){return m.Create(this._y,-this._x)},multiply4x4:function(k){return k.leftMultiply1x2Vector(this)},transform:function(k){return k.leftMultiply1x2Vector(this)},angle:function(){return this.angleRadians()},angleDegrees:function(){return 180*this.angleRadians()/Math.PI},angleRadians:function(){return Math.atan2(this._y,this._x)},min:function(k){return m.Create(Math.min(this._x,k._x),Math.min(this._y,k._y))},max:function(k){return m.Create(Math.max(this._x,
k._x),Math.max(this._y,k._y))},toString:function(){return"("+this._x.toFixed(5)+", "+this._y.toFixed(5)+")"},abs:function(){return m.Create(Math.abs(this._x),Math.abs(this._y))}};b.exports=m},{"../utils":42,"./Vector3":35}],35:[function(a,b,g){var f=a("../utils").IsFloat,m=a("./Vector2"),k=function(c,l,e){if(3===arguments.length)this._x=parseFloat(c),this._y=parseFloat(l),this._z=parseFloat(e);else if(2===arguments.length)this._x=parseFloat(c),this._y=parseFloat(l),this._z=0;else{var d=!0;if(1===
arguments.length)if("object"===typeof c)c instanceof k?(this._x=c._x,this._y=c._y,this._z=c._z):c instanceof m?(this._x=c._x,this._y=c._y,this._z=0):c instanceof Array?2>c.length||3<c.length?d=!1:(this._x=parseFloat(c[0]),this._y=parseFloat(c[1]),this._z=3===c.length?parseFloat(c[2]):0):"x"in c&&"y"in c?(this._x=parseFloat(c.x),this._y=parseFloat(c.y),this._z="z"in c?parseFloat(c.z):0):"_x"in c&&"_y"in c?(this._x=parseFloat(c._x),this._y=parseFloat(c._y),this._z="_z"in c?parseFloat(c._z):0):d=!1;
else{var h=parseFloat(c);this._z=this._y=this._x=h}else d=!1;if(d)f(this._x)&&f(this._y)&&f(this._z);else throw Error("wrong arguments");}};k.Create=function(c,l,e){var d=Object.create(k.prototype);d._x=c;d._y=l;d._z=e;return d};k.prototype={get x(){return this._x},get y(){return this._y},get z(){return this._z},set x(c){throw Error("Vector3D is immutable");},set y(c){throw Error("Vector3D is immutable");},set z(c){throw Error("Vector3D is immutable");},clone:function(){return k.Create(this._x,this._y,
this._z)},negated:function(){return k.Create(-this._x,-this._y,-this._z)},abs:function(){return k.Create(Math.abs(this._x),Math.abs(this._y),Math.abs(this._z))},plus:function(c){return k.Create(this._x+c._x,this._y+c._y,this._z+c._z)},minus:function(c){return k.Create(this._x-c._x,this._y-c._y,this._z-c._z)},times:function(c){return k.Create(this._x*c,this._y*c,this._z*c)},dividedBy:function(c){return k.Create(this._x/c,this._y/c,this._z/c)},dot:function(c){return this._x*c._x+this._y*c._y+this._z*
c._z},lerp:function(c,l){return this.plus(c.minus(this).times(l))},lengthSquared:function(){return this.dot(this)},length:function(){return Math.sqrt(this.lengthSquared())},unit:function(){return this.dividedBy(this.length())},cross:function(c){return k.Create(this._y*c._z-this._z*c._y,this._z*c._x-this._x*c._z,this._x*c._y-this._y*c._x)},distanceTo:function(c){return this.minus(c).length()},distanceToSquared:function(c){return this.minus(c).lengthSquared()},equals:function(c){return this._x===c._x&&
this._y===c._y&&this._z===c._z},multiply4x4:function(c){return c.leftMultiply1x3Vector(this)},transform:function(c){return c.leftMultiply1x3Vector(this)},toString:function(){return"("+this._x.toFixed(5)+", "+this._y.toFixed(5)+", "+this._z.toFixed(5)+")"},randomNonParallelVector:function(){var c=this.abs();return c._x<=c._y&&c._x<=c._z?k.Create(1,0,0):c._y<=c._x&&c._y<=c._z?k.Create(0,1,0):k.Create(0,0,1)},min:function(c){return k.Create(Math.min(this._x,c._x),Math.min(this._y,c._y),Math.min(this._z,
c._z))},max:function(c){return k.Create(Math.max(this._x,c._x),Math.max(this._y,c._y),Math.max(this._z,c._z))}};b.exports=k},{"../utils":42,"./Vector2":34}],36:[function(a,b,g){var f=a("./Vector2"),m=a("../constants").getTag,k=function(c){this.pos=c};k.fromObject=function(c){return new k(new f(c.pos._x,c.pos._y))};k.prototype={toString:function(){return"("+this.pos.x.toFixed(5)+","+this.pos.y.toFixed(5)+")"},getTag:function(){var c=this.tag;c||(this.tag=c=m());return c}};b.exports=k},{"../constants":24,
"./Vector2":34}],37:[function(a,b,g){var f=a("./Vector3"),m=a("../constants").getTag,k=function(c){this.pos=c};k.fromObject=function(c){c=new f(c.pos);return new k(c)};k.prototype={flipped:function(){return this},getTag:function(){var c=this.tag;c||(this.tag=c=m());return c},interpolate:function(c,l){c=this.pos.lerp(c.pos,l);return new k(c)},transform:function(c){c=this.pos.multiply4x4(c);return new k(c)},toString:function(){return this.pos.toString()}};b.exports=k},{"../constants":24,"./Vector3":35}],
38:[function(a,b,g){var f=a("../constants").EPS,m=a("../utils").solve2Linear;b.exports={linesIntersect:function(k,c,l,e){if(c.equals(l)||e.equals(k)){if(e.minus(l).unit().plus(c.minus(k).unit()).length()<f)return!0}else{c=c.minus(k);e=e.minus(l);if(1E-9>Math.abs(c.cross(e)))return!1;k=m(-c.x,e.x,-c.y,e.y,k.x-l.x,k.y-l.y);if(1E-6<k[0]&&.999999>k[0]&&1E-5<k[1]&&.999999>k[1])return!0}return!1}}},{"../constants":24,"../utils":42}],39:[function(a,b,g){var f=a("../constants").EPS,m=a("./OrthoNormalBasis");
g=a("../utils");var k=g.interpolateBetween2DPointsForY,c=g.insertSorted,l=g.fnNumberSort,e=a("./Vertex3"),d=a("./Vector2"),h=a("./Line2"),n=a("./Polygon3");b.exports=function(p,r){var q=p.length;if(0<q){for(var t=p[0].plane,w=p[0].shared,x=new m(t),G=[],v=[],A={},y={},C={},u=1/f*10,z=0;z<q;z++){var D=p[z],F=[],I=D.vertices.length,B=-1;if(0<I){for(var E=void 0,H=void 0,K=0;K<I;K++){var J=x.to2D(D.vertices[K].pos),L=Math.floor(J.y*u),M=void 0;L in C?M=C[L]:L+1 in C?M=C[L+1]:L-1 in C?M=C[L-1]:(M=J.y,
C[L]=J.y);J=d.Create(J.x,M);F.push(J);J=J.y;if(0===K||J<E)E=J,B=K;if(0===K||J>H)H=J;J in y||(y[J]={});y[J][z]=!0}E>=H?(F=[],I=0,B=-1):(E in A||(A[E]=[]),A[E].push(z))}F.reverse();B=I-B-1;G.push(F);v.push(B)}p=[];for(var N in y)p.push(N);p.sort(l);N=[];z=[];q={};for(C=0;C<p.length;q={$jscomp$loop$prop$middleycoordinate$90:q.$jscomp$loop$prop$middleycoordinate$90},C++){u=[];I=p[C];D=Number(I);F=y[I];for(B=0;B<N.length;++B)if(E=N[B],H=E.polygonindex,F[H]){H=G[H];K=H.length;L=E.leftvertexindex;for(J=
E.rightvertexindex;;){M=L+1;M>=K&&(M=0);if(H[M].y!==D)break;L=M}M=J-1;0>M&&(M=K-1);H[M].y===D&&(J=M);L!==E.leftvertexindex&&L===J?(N.splice(B,1),--B):(E.leftvertexindex=L,E.rightvertexindex=J,E.topleft=H[L],E.topright=H[J],L+=1,L>=K&&(L=0),E.bottomleft=H[L],--J,0>J&&(J=K-1),E.bottomright=H[J])}F=void 0;if(C>=p.length-1)N=[],F=null;else{F=Number(p[C+1]);q.$jscomp$loop$prop$middleycoordinate$90=.5*(D+F);I=A[I];for(var O in I){B=I[O];E=G[B];H=E.length;for(K=J=v[B];;){L=K+1;L>=H&&(L=0);if(E[L].y!==D)break;
if(L===J)break;K=L}for(;;){L=J-1;0>L&&(L=H-1);if(E[L].y!==D)break;if(L===K)break;J=L}L=K+1;L>=H&&(L=0);M=J-1;0>M&&(M=H-1);c(N,{polygonindex:B,leftvertexindex:K,rightvertexindex:J,topleft:E[K],topright:E[J],bottomleft:E[L],bottomright:E[M]},function(S){return function(R,P){R=k(R.topleft,R.bottomleft,S.$jscomp$loop$prop$middleycoordinate$90);P=k(P.topleft,P.bottomleft,S.$jscomp$loop$prop$middleycoordinate$90);return R>P?1:R<P?-1:0}}(q))}}for(var Q in N)H=N[Q],K=k(H.topleft,H.bottomleft,D),I=d.Create(K,
D),K=k(H.topright,H.bottomright,D),B=d.Create(K,D),K=k(H.topleft,H.bottomleft,F),E=d.Create(K,F),K=k(H.topright,H.bottomright,F),H=d.Create(K,F),I={topleft:I,topright:B,bottomleft:E,bottomright:H,leftline:h.fromPoints(I,E),rightline:h.fromPoints(H,B)},0<u.length&&(B=u[u.length-1],E=I.topleft.distanceTo(B.topright),H=I.bottomleft.distanceTo(B.bottomright),E<f&&H<f&&(I.topleft=B.topleft,I.leftline=B.leftline,I.bottomleft=B.bottomleft,u.splice(u.length-1,1))),u.push(I);if(0<C){D={};F={};for(I=0;I<u.length;I++)for(B=
u[I],E=0;E<z.length;E++)if(!F[E]&&(H=z[E],H.bottomleft.distanceTo(B.topleft)<f&&H.bottomright.distanceTo(B.topright)<f)){F[E]=!0;K=B.leftline.direction().x-H.leftline.direction().x;M=B.rightline.direction().x-H.rightline.direction().x;J=Math.abs(K)<f;M=(L=Math.abs(M)<f)||0<=M;(J||0<=K)&&M&&(B.outpolygon=H.outpolygon,B.leftlinecontinues=J,B.rightlinecontinues=L,D[E]=!0);break}F={};for(I=0;I<z.length;F={$jscomp$loop$prop$vertices3d$92:F.$jscomp$loop$prop$vertices3d$92},I++)D[I]||(B=z[I],B.outpolygon.rightpoints.push(B.bottomright),
B.bottomright.distanceTo(B.bottomleft)>f&&B.outpolygon.leftpoints.push(B.bottomleft),B.outpolygon.leftpoints.reverse(),B=B.outpolygon.rightpoints.concat(B.outpolygon.leftpoints),F.$jscomp$loop$prop$vertices3d$92=[],B.map(function(S){return function(R){R=x.to3D(R);R=new e(R);S.$jscomp$loop$prop$vertices3d$92.push(R)}}(F)),B=new n(F.$jscomp$loop$prop$vertices3d$92,w,t),r.push(B))}for(z=0;z<u.length;z++)D=u[z],D.outpolygon?(D.leftlinecontinues||D.outpolygon.leftpoints.push(D.topleft),D.rightlinecontinues||
D.outpolygon.rightpoints.push(D.topright)):(D.outpolygon={leftpoints:[],rightpoints:[]},D.outpolygon.leftpoints.push(D.topleft),D.topleft.distanceTo(D.topright)>f&&D.outpolygon.rightpoints.push(D.topright));z=u}}}},{"../constants":24,"../utils":42,"./Line2":25,"./OrthoNormalBasis":28,"./Polygon3":32,"./Vector2":34,"./Vertex3":37}],40:[function(a,b,g){var f=a("./math/Matrix4"),m=a("./math/Vector3"),k=a("./math/Plane");b.exports={addTransformationMethodsToPrototype:function(c){c.mirrored=function(l){return this.transform(f.mirroring(l))};
c.mirroredX=function(){var l=new k(m.Create(1,0,0),0);return this.mirrored(l)};c.mirroredY=function(){var l=new k(m.Create(0,1,0),0);return this.mirrored(l)};c.mirroredZ=function(){var l=new k(m.Create(0,0,1),0);return this.mirrored(l)};c.translate=function(l){return this.transform(f.translation(l))};c.scale=function(l){return this.transform(f.scaling(l))};c.rotateX=function(l){return this.transform(f.rotationX(l))};c.rotateY=function(l){return this.transform(f.rotationY(l))};c.rotateZ=function(l){return this.transform(f.rotationZ(l))};
c.rotate=function(l,e,d){return this.transform(f.rotation(l,e,d))};c.rotateEulerAngles=function(l,e,d,h){h=h||[0,0,0];l=f.rotationZ(l);e=f.rotationX(e);d=f.rotationZ(d);h=f.translation(new m(h));return this.transform(d.multiply(e).multiply(l).multiply(h))}},addCenteringToPrototype:function(c,l){c.center=function(e){e=Array.prototype.map.call(arguments,function(h){return h});e.length||(e=l.slice());var d=this.getBounds();return this.translate(l.map(function(h){return-1<e.indexOf(h)?-(d[0][h]+d[1][h])/
2:0}))}}}},{"./math/Matrix4":27,"./math/Plane":30,"./math/Vector3":35}],41:[function(a,b,g){g=a("./constants");var f=g._CSGDEBUG,m=g.EPS,k=a("./math/Vertex3"),c=a("./math/Polygon3"),l=function(){this.parent=null;this.children=[];this.polygon=null;this.removed=!1};l.prototype={addPolygons:function(d){if(!this.isRootNode())throw Error("Assertion failed");var h=this;d.map(function(n){h.addChild(n)})},remove:function(){if(!this.removed){this.removed=!0;if(f){if(this.isRootNode())throw Error("Assertion failed");
if(this.children.length)throw Error("Assertion failed");}var d=this.parent.children,h=d.indexOf(this);if(0>h)throw Error("Assertion failed");d.splice(h,1);this.parent.recursivelyInvalidatePolygon()}},isRemoved:function(){return this.removed},isRootNode:function(){return!this.parent},invert:function(){if(!this.isRootNode())throw Error("Assertion failed");this.invertSub()},getPolygon:function(){if(!this.polygon)throw Error("Assertion failed");return this.polygon},getPolygons:function(d){var h=[this],
n=[h],p,r;for(p=0;p<n.length;++p){h=n[p];var q=0;for(r=h.length;q<r;q++){var t=h[q];t.polygon?d.push(t.polygon):n.push(t.children)}}},splitByPlane:function(d,h,n,p,r){if(this.children.length){var q=[this.children],t,w;for(t=0;t<q.length;t++){var x=q[t];var G=0;for(w=x.length;G<w;G++){var v=x[G];v.children.length?q.push(v.children):v._splitByPlane(d,h,n,p,r)}}}else this._splitByPlane(d,h,n,p,r)},_splitByPlane:function(d,h,n,p,r){var q=this.polygon;if(q){var t=q.boundingSphere(),w=t[1]+m;t=d.normal.dot(t[0])-
d.w;if(t>w)p.push(this);else if(t<-w)r.push(this);else{w=t=null;var x=d.normal;var G=q.vertices,v=G.length;if(q.plane.equals(d))x=0;else{for(var A=d.w,y=!1,C=!1,u=[],z=-m,D=0;D<v;D++){var F=x.dot(G[D].pos)-A;u.push(0>F);F>m&&(y=!0);F<z&&(C=!0)}if(y||C)if(C)if(y){x=4;A=[];y=[];C=u[0];for(z=0;z<v;z++){D=G[z];var I=z+1;I>=v&&(I=0);F=u[I];C===F?C?y.push(D):A.push(D):(I=d.splitLineBetweenPoints(D.pos,G[I].pos),I=new k(I),C?(y.push(D),y.push(I),A.push(I)):(A.push(D),A.push(I),y.push(I)));C=F}d=m*m;if(3<=
y.length)for(G=y[y.length-1],v=0;v<y.length;v++)u=y[v],u.pos.distanceToSquared(G.pos)<d&&(y.splice(v,1),v--),G=u;if(3<=A.length)for(G=A[A.length-1],v=0;v<A.length;v++)u=A[v],u.pos.distanceToSquared(G.pos)<d&&(A.splice(v,1),v--),G=u;3<=A.length&&(t=new c(A,q.shared,q.plane));3<=y.length&&(w=new c(y,q.shared,q.plane))}else x=3;else x=2;else x=0<=x.dot(q.plane.normal)?0:1}switch(x){case 0:h.push(this);break;case 1:n.push(this);break;case 2:p.push(this);break;case 3:r.push(this);break;case 4:t&&(h=this.addChild(t),
p.push(h)),w&&(p=this.addChild(w),r.push(p))}}}},addChild:function(d){var h=new l;h.parent=this;h.polygon=d;this.children.push(h);return h},invertSub:function(){var d=[this],h=[d],n,p;for(n=0;n<h.length;n++){d=h[n];var r=0;for(p=d.length;r<p;r++){var q=d[r];q.polygon&&(q.polygon=q.polygon.flipped());h.push(q.children)}}},recursivelyInvalidatePolygon:function(){for(var d=this;d.polygon;)d.polygon=null,d.parent&&(d=d.parent)}};a=function(d){this.polygonTree=new l;this.rootnode=new e(null);d&&this.addPolygons(d)};
a.prototype={invert:function(){this.polygonTree.invert();this.rootnode.invert()},clipTo:function(d,h){this.rootnode.clipTo(d,!!h)},allPolygons:function(){var d=[];this.polygonTree.getPolygons(d);return d},addPolygons:function(d){var h=this;d=d.map(function(n){return h.polygonTree.addChild(n)});this.rootnode.addPolygonTreeNodes(d)}};var e=function(d){this.back=this.front=this.plane=null;this.polygontreenodes=[];this.parent=d};e.prototype={invert:function(){for(var d=[this],h,n=0;n<d.length;n++){h=
d[n];h.plane&&(h.plane=h.plane.flipped());h.front&&d.push(h.front);h.back&&d.push(h.back);var p=h.front;h.front=h.back;h.back=p}},clipPolygons:function(d,h){var n={node:this,polygontreenodes:d},p=[];do{var r=n.node;d=n.polygontreenodes;if(r.plane){n=[];for(var q=[],t=h?n:q,w=r.plane,x=d.length,G=0;G<x;G++){var v=d[G];v.isRemoved()||v.splitByPlane(w,t,n,q,n)}r.front&&0<q.length&&p.push({node:r.front,polygontreenodes:q});d=n.length;if(r.back&&0<d)p.push({node:r.back,polygontreenodes:n});else for(r=
0;r<d;r++)n[r].remove()}n=p.pop()}while("undefined"!==typeof n)},clipTo:function(d,h){var n=this,p=[];do 0<n.polygontreenodes.length&&d.rootnode.clipPolygons(n.polygontreenodes,h),n.front&&p.push(n.front),n.back&&p.push(n.back),n=p.pop();while("undefined"!==typeof n)},addPolygonTreeNodes:function(d){d={node:this,polygontreenodes:d};var h=[];do{var n=d.node;d=d.polygontreenodes;if(0!==d.length){var p=n;if(!n.plane){var r=d[0].getPolygon().plane;n.plane=r}r=[];for(var q=[],t=0,w=d.length;t<w;++t)d[t].splitByPlane(p.plane,
p.polygontreenodes,q,r,q);0<r.length&&(n.front||(n.front=new e(n)),h.push({node:n.front,polygontreenodes:r}));0<q.length&&(n.back||(n.back=new e(n)),h.push({node:n.back,polygontreenodes:q}))}d=h.pop()}while("undefined"!==typeof d)},getParentPlaneNormals:function(d,h){0<h&&this.parent&&(d.push(this.parent.plane.normal),this.parent.getParentPlaneNormals(d,h-1))}};b.exports=a},{"./constants":24,"./math/Polygon3":32,"./math/Vertex3":37}],42:[function(a,b,g){b.exports={fnNumberSort:function(f,m){return f-
m},fnSortByIndex:function(f,m){return f.index-m.index},IsFloat:function(f){return!isNaN(f)||Infinity===f||-Infinity===f},solve2Linear:function(f,m,k,c,l,e){var d=1/(f*c-m*k);return[(l*c-m*e)*d,(-l*k+f*e)*d]},insertSorted:function(f,m,k){for(var c=0,l=f.length;l>c;){var e=Math.floor((c+l)/2);0<k(m,f[e])?c=e+1:l=e}f.splice(c,0,m)},interpolateBetween2DPointsForY:function(f,m,k){k-=f.y;var c=m.y-f.y;0>c&&(k=-k,c=-c);return f.x+(0>=k?0:k>=c?1:1E-10>c?.5:k/c)*(m.x-f.x)},isCAG:function(f){return"sides"in
f&&"length"in f.sides?!0:!1},isCSG:function(f){return"polygons"in f&&"length"in f.polygons?!0:!1}}},{}],43:[function(a,b,g){var f=a("../math/Vector2");b.exports={area:function(m){var k=0;m.sides.map(function(c){k+=c.vertex0.pos.cross(c.vertex1.pos)});return k*=.5},getBounds:function(m){var k,c=k=0===m.sides.length?new f(0,0):m.sides[0].vertex0.pos;m.sides.map(function(l){k=k.min(l.vertex0.pos);k=k.min(l.vertex1.pos);c=c.max(l.vertex0.pos);c=c.max(l.vertex1.pos)});return[k,c]}}},{"../math/Vector2":34}],
44:[function(a,b,g){var f=a("../constants").areaEPS,m=a("../math/lineUtils").linesIntersect,k=function(c,l){var e=null,d=null,h=!1;c.sides.forEach(function(n){e=n.vertex0.pos;d=n.vertex1.pos;k.c1(l,e,d)&&k.c2(l,e,d)&&(h=!h)});return h};k.c1=function(c,l,e){return l.y>c.y!==e.y>c.y};k.c2=function(c,l,e){return c.x<(e.x-l.x)*(c.y-l.y)/(e.y-l.y)+l.x};b.exports={isCAGValid:function(c){var l=[];c.isSelfIntersecting(!0)&&l.push("Self intersects");var e={};c.sides.map(function(p){function r(q){q=q.x+" "+
q.y;q in e||(e[q]=0);e[q]++}r(p.vertex0.pos);r(p.vertex1.pos)});for(var d in e){var h=e[d];h&1&&l.push("Uneven number of sides ("+h+") for point "+d)}c=c.area();c<f&&l.push("Area is "+c);if(0<l.length){var n="";l.map(function(p){n+=p+"\n"});throw Error(n);}},isSelfIntersecting:function(c,l){for(var e=c.sides.length,d=0;d<e;d++)for(var h=c.sides[d],n=d+1;n<e;n++){var p=c.sides[n];if(m(h.vertex0.pos,h.vertex1.pos,p.vertex0.pos,p.vertex1.pos))return l&&(console.log("side "+d+": "+h),console.log("side "+
n+": "+p)),!0}return!1},hasPointInside:k,contains:function(c,l){for(var e=0,d=l.sides.length;e<d;e++)if(!k(c,l.sides[e].vertex0.pos))return!1;return!0}}},{"../constants":24,"../math/lineUtils":38}],45:[function(a,b,g){var f=a("../constants").EPS,m=a("../FuzzyFactory3d"),k=a("../FuzzyFactory2d"),c=a("../CSGFactories").fromPolygons,l=a("../CAGFactories").fromSides,e=function(h,n){var p=[];n.polygons.forEach(function(r){r=h.getPolygon(r);3<=r.vertices.length&&p.push(r)});return c(p)},d=function(h,n){n=
n.sides.map(function(p){return h.getSide(p)}).filter(function(p){return p.length()>f});return l(n)};b.exports=function(h,n){if(h.isCanonicalized)return h;if("sides"in h)return h.isCanonicalized||(n=new k,h=d(n,h),h.isCanonicalized=!0),h;h.isCanonicalized||(n=new m,n=e(n,h),n.isCanonicalized=!0,n.isRetesselated=h.isRetesselated,n.properties=h.properties,h=n);return h}},{"../CAGFactories":16,"../CSGFactories":18,"../FuzzyFactory2d":20,"../FuzzyFactory3d":21,"../constants":24}],46:[function(a,b,g){var f=
a("../math/Vector3");b.exports={bounds:function(m){if(!m.cachedBoundingBox){for(var k=new f(0,0,0),c=new f(0,0,0),l=m.polygons,e=l.length,d=0;d<e;d++){var h=l[d].boundingBox();0===d?(k=h[0],c=h[1]):(k=k.min(h[0]),c=c.max(h[1]))}m.cachedBoundingBox=[k,c]}return m.cachedBoundingBox},volume:function(m){m=m.toTriangles().map(function(k){return k.getTetraFeatures(["volume"])});console.log("volume",m)},area:function(m){m=m.toTriangles().map(function(k){return k.getTetraFeatures(["area"])});console.log("area",
m)}}},{"../math/Vector3":35}],47:[function(a,b,g){var f=a("../CAG"),m=a("../constants").EPS;b.exports={projectToOrthoNormalBasis:function(k,c){var l=[];k.polygons.filter(function(e){return e.plane.normal.minus(c.plane.normal).lengthSquared()<m*m}).map(function(e){e=e.projectToOrthoNormalBasis(c);0<e.sides.length&&l.push(e)});return(new f).union(l)}}},{"../CAG":15,"../constants":24}],48:[function(a,b,g){function f(e,d,h,n,p,r){var q=n.getTag(),t=p.getTag();if(q===t)throw Error("Assertion failed");
var w=q+"/"+t;if(t+"/"+q in e)return m(e,d,h,p,n,null),null;n={vertex0:n,vertex1:p,polygonindex:r};w in e?e[w].push(n):e[w]=[n];q in d?d[q].push(w):d[q]=[w];t in h?h[t].push(w):h[t]=[w];return w}function m(e,d,h,n,p,r){var q=n.getTag(),t=p.getTag(),w=q+"/"+t;if(!(w in e))throw Error("Assertion failed");for(var x=-1,G=e[w],v=0;v<G.length;v++){var A=G[v];if(A.vertex0===n&&A.vertex1===p&&(null===r||A.polygonindex===r)){x=v;break}}if(0>x)throw Error("Assertion failed");G.splice(x,1);0===G.length&&delete e[w];
x=d[q].indexOf(w);if(0>x)throw Error("Assertion failed");d[q].splice(x,1);0===d[q].length&&delete d[q];x=h[t].indexOf(w);if(0>x)throw Error("Assertion failed");h[t].splice(x,1);0===h[t].length&&delete h[t]}var k=a("../constants").EPS,c=a("../math/Polygon3"),l=a("../math/Plane");b.exports=function(e,d){d=d.canonicalized();for(var h={},n=0;n<d.polygons.length;n++){var p=d.polygons[n],r=p.vertices.length;if(3<=r)for(var q=p.vertices[0],t=q.getTag(),w=0;w<r;w++){var x=w+1;x===r&&(x=0);x=p.vertices[x];
var G=x.getTag(),v=t+"/"+G;t=G+"/"+t;t in h?(q=h[t],q.splice(-1,1),0===q.length&&delete h[t]):(q={vertex0:q,vertex1:x,polygonindex:n},v in h?h[v].push(q):h[v]=[q]);q=x;t=G}}var A={},y={};n={};p=!0;r={};for(var C in h)r.$jscomp$loop$prop$sidetag$50$94=C,p=!1,n[r.$jscomp$loop$prop$sidetag$50$94]=!0,h[r.$jscomp$loop$prop$sidetag$50$94].map(function(M){return function(N){var O=N.vertex0.getTag();N=N.vertex1.getTag();O in A?A[O].push(M.$jscomp$loop$prop$sidetag$50$94):A[O]=[M.$jscomp$loop$prop$sidetag$50$94];
N in y?y[N].push(M.$jscomp$loop$prop$sidetag$50$94):y[N]=[M.$jscomp$loop$prop$sidetag$50$94]}}(r)),r={$jscomp$loop$prop$sidetag$50$94:r.$jscomp$loop$prop$sidetag$50$94};if(!p){for(C=d.polygons.slice(0);;){p=!0;for(var u in h)p=!1,n[u]=!0;if(p)break;for(q=!1;;){p=null;for(var z in n){p=z;break}if(null===p)break;v=!0;if(p in h){r=h[p];if(0===r.length)throw Error("Assertion failed");r=r[0];for(t=0;2>t;t++){var D=0===t?r.vertex0:r.vertex1;w=0===t?r.vertex1:r.vertex0;var F=D.getTag(),I=w.getTag(),B=[];
0===t?F in y&&(B=y[F]):F in A&&(B=A[F]);G={};for(var E=0;E<B.length;G={$jscomp$loop$prop$newpolygon$99:G.$jscomp$loop$prop$newpolygon$99,$jscomp$loop$prop$found$100:G.$jscomp$loop$prop$found$100,$jscomp$loop$prop$loop$98:G.$jscomp$loop$prop$loop$98},E++){x=h[B[E]][0];var H=0===t?x.vertex0:x.vertex1,K=0===t?x.vertex1:x.vertex0,J=H.getTag();if(K.getTag()!==F)throw Error("Assertion failed");if(J===I){m(h,A,y,D,w,null);m(h,A,y,w,D,null);v=!1;t=2;q=!0;break}else{K=D.pos;J=w.pos;H=H.pos.minus(K);var L=
J.minus(K).dot(H)/H.dot(H);if(0<L&&1>L&&K.plus(H.times(L)).distanceToSquared(J)<k*k){q=x.polygonindex;v=C[q];D=x.vertex1.getTag();t=-1;for(F=0;F<v.vertices.length;F++)if(v.vertices[F].getTag()===D){t=F;break}if(0>t)throw Error("Assertion failed");D=v.vertices.slice(0);D.splice(t,0,w);G.$jscomp$loop$prop$newpolygon$99=new c(D,v.shared);isNaN(G.$jscomp$loop$prop$newpolygon$99.plane.w)&&(G.$jscomp$loop$prop$found$100=!1,G.$jscomp$loop$prop$loop$98=function(M){return function(N){M.$jscomp$loop$prop$newpolygon$99.vertices.forEach(function(O){M.$jscomp$loop$prop$found$100||
N(O)})}}(G),G.$jscomp$loop$prop$loop$98(function(M){return function(N){M.$jscomp$loop$prop$loop$98(function(O){M.$jscomp$loop$prop$loop$98(function(Q){M.$jscomp$loop$prop$newpolygon$99.plane=l.fromPoints(N.pos,O.pos,Q.pos);isNaN(M.$jscomp$loop$prop$newpolygon$99.plane.w)||(M.$jscomp$loop$prop$found$100=!0)})})}}(G)));C[q]=G.$jscomp$loop$prop$newpolygon$99;m(h,A,y,x.vertex0,x.vertex1,q);G=f(h,A,y,x.vertex0,w,q);w=f(h,A,y,w,x.vertex1,q);null!==G&&(n[G]=!0);null!==w&&(n[w]=!0);v=!1;t=2;q=!0;break}}}}}v&&
delete n[p]}if(!q)break}e=e(C);e.properties=d.properties;e.isCanonicalized=!0;e.isRetesselated=!0;d=e}return d}},{"../constants":24,"../math/Plane":30,"../math/Polygon3":32}],49:[function(a,b,g){var f=a("../FuzzyFactory3d"),m=a("../math/reTesselateCoplanarPolygons"),k=a("../CSGFactories").fromPolygons;b.exports=function(c){if(c.isRetesselated)return c;var l={},e=c.isCanonicalized,d=new f;c.polygons.map(function(q){var t=q.plane,w=q.shared;e||(t=d.getPlane(t),w=d.getPolygonShared(w));t=t.getTag()+
"/"+w.getTag();t in l?l[t].push(q):l[t]=[q]});var h=[],n;for(n in l){var p=l[n];if(2>p.length)h=h.concat(p);else{var r=[];m(p,r);h=h.concat(r)}}h=k(h);h.isRetesselated=!0;h.properties=c.properties;return h}},{"../CSGFactories":18,"../FuzzyFactory3d":21,"../math/reTesselateCoplanarPolygons":39}],50:[function(a,b,g){b.exports=function(f){return f?f.constructor!==Array?[f]:f:[]}},{}]},{},[1])(1)});var BinaryFileWriter=function(a){this.offset=0;this.buffer=new ArrayBuffer(a);this.dataView=new DataView(this.buffer)};BinaryFileWriter.prototype.toBlob=function(){return new Blob([this.dataView],{type:"application/octet-binary"})};BinaryFileWriter.prototype.writeUint32=function(a){this.dataView.setUint32(this.offset,a,!0);this.offset+=4};BinaryFileWriter.prototype.writeUint16=function(a){this.dataView.setUint16(this.offset,a,!0);this.offset+=2};
BinaryFileWriter.prototype.writeUint8=function(a){this.dataView.setUint8(this.offset,a,!0);this.offset+=1};BinaryFileWriter.prototype.writeFloat32=function(a){this.dataView.setFloat32(this.offset,a,!0);this.offset+=4};BinaryFileWriter.prototype.writeVec3=function(a){this.writeFloat32(a.x);this.writeFloat32(a.y);this.writeFloat32(a.z)};function SphereData(a,b){this.pos=a;this.radius=b}function CylinderData(a,b,g){this.pos1=a;this.pos2=b;this.radius=g}function TriangleData(a){this.trianglePoints=a}
function generateCsgMeshFrom(a,b,g){var f=null;0<g.length&&printUiSettings.exportTriangles&&(f=cindyTrianglePointsToIndexedMesh(g[0].trianglePoints,.01),printUiSettings.extrudeSurfaces&&(f=printUiSettings.smoothEdges?createOpenSurfaceShellMeshWithNormalsAndRoundEdges(f,printUiSettings.extrusionRadius):createOpenSurfaceShellMeshWithNormals(f,printUiSettings.extrusionRadius)));setCsgResolutionSphere(printUiSettings.sphereQuality);setCsgResolutionCylinder(printUiSettings.cylinderQuality);for(var m=[],
k=0;k<a.length;k++){var c=a[k].radius;0<g.length&&printUiSettings.extrudeSurfaces&&printUiSettings.exportTriangles&&(c+=1*printUiSettings.extrusionRadius,c*=printUiSettings.radiusFactor);m.push(createCSGSphere(a[k].pos,c))}for(k=0;k<b.length;k++)c=b[k].radius,0<g.length&&printUiSettings.extrudeSurfaces&&printUiSettings.exportTriangles&&(c+=1*printUiSettings.extrusionRadius,c*=printUiSettings.radiusFactor),m.push(createCSGCylinder(b[k].pos1,b[k].pos2,c));0<g.length&&printUiSettings.exportTriangles?
0==a.length&&0==b.length?a=f:(m=[convertTriangleMeshToCSGPolyhedron(f)].concat(m),a=mergeObjects(m)):a=mergeObjects(m);a.scale(printUiSettings.modelScale);return a};function trianglePointsToIndexedMesh(a,b,g){void 0===g&&(g=1E-5);for(var f=new TriangleMesh,m=[],k=0;k<a.length;k++)m.push(new IndexedPoint(a[k]));m=new KDTree;for(var c=k=0;c<a.length;c++){var l=a[c],e=new IndexedPoint(l),d=m.findCloseIndexedPoint(e,g);null!=d?f.indices.push(d.index):(e.index=k,m.addPoint(e),f.indices.push(k),f.vertices.push(l),void 0!==b&&f.normals.push(b[c]),k++)}return f}
function trianglePointsToIndexedMeshON2(a,b){void 0===b&&(b=1E-5);for(var g=new TriangleMesh,f=0;f<a.length;f++){for(var m=-1,k=0;k<g.vertices.length;k++){var c=a[f],l=g.vertices[k];if(Math.abs(c.x-l.x)<b&&Math.abs(c.y-l.y)<b&&Math.abs(c.z-l.z)<b){m=k;break}}0>m?(g.indices.push(g.vertices.length),g.vertices.push(a[f])):g.indices.push(m)}return g}function flipVertexListOrientation(a){for(var b=0;b<a.length;b+=3){var g=a[b];a[b]=a[b+2];a[b+2]=g}};function IndexedPoint(a){this.position=a;this.index=0}function KDNode(a,b){this.axis=a;this.point=b;this.right=this.left=null}function AxisAlignedBox(a,b){this.min=a;this.max=b}AxisAlignedBox.prototype.contains=function(a){return a.x>=this.min.x&&a.y>=this.min.y&&a.z>=this.min.z&&a.x<=this.max.x&&a.y<=this.max.y&&a.z<=this.max.z};function KDTree(){this.root=null}KDTree.prototype.build=function(a){this.root=this._build(a,0)};
KDTree.prototype._build=function(a,b){if(0==a.length)return null;var g=b%3;a.sort(function(c,l){return 0==g?c.position.x-l.position.x:1==g?c.position.y-l.position.y:c.position.z-l.position.z});var f=Math.floor(a.length/2),m=a.slice(0,f),k=a.slice(f+1,a.length);a=new KDNode(g,a[f]);a.left=this._build(m,b+1);a.right=this._build(k,b+1);return a};KDTree.prototype.addPoint=function(a){this.root=this._addPoint(this.root,0,a)};
KDTree.prototype._addPoint=function(a,b,g){var f=b%3;if(null==a)return new KDNode(f,g);0==f&&g.position.x<a.point.position.x||1==f&&g.position.y<a.point.position.y||2==f&&g.position.z<a.point.position.z?a.left=this._addPoint(a.left,b+1,g):a.right=this._addPoint(a.right,b+1,g);return a};KDTree.prototype.findPointsInAxisAlignedBox=function(a){var b=[];this._findPointsInAxisAlignedBox(a,this.root,b);return b};
KDTree.prototype._findPointsInAxisAlignedBox=function(a,b,g){null!=b&&(a.contains(b.point.position)&&g.push(b.point),(0==b.axis&&a.min.x<=b.point.position.x||1==b.axis&&a.min.y<=b.point.position.y||2==b.axis&&a.min.z<=b.point.position.z)&&this._findPointsInAxisAlignedBox(a,b.left,g),(0==b.axis&&a.max.x>=b.point.position.x||1==b.axis&&a.max.y>=b.point.position.y||2==b.axis&&a.max.z>=b.point.position.z)&&this._findPointsInAxisAlignedBox(a,b.right,g))};
KDTree.prototype.findCloseIndexedPoint=function(a,b){var g=new vec3(a.position.x-b,a.position.y-b,a.position.z-b),f=new vec3(a.position.x+b,a.position.y+b,a.position.z+b);g=new AxisAlignedBox(g,f);g=this.findPointsInAxisAlignedBox(g);f=null;for(var m=1E10,k=0;k<g.length;k++){var c=g[k],l=vec3length(vec3sub(a.position,c.position));l<m&&l<b&&c!==a&&(f=c,m=l)}return f};function GraphNode(){this.neighbors=[];this.edges=[];this.visited=!1}function GraphEdge(a,b){this.connectedNodes=[a,b];this.meshEdgeCount=1}function MeshGraph(a,b){this.nodes=[];this.edges=[];this.orderIndices=void 0===b?!0:b;for(b=0;b<a.vertices.length;b++)this.nodes.push(new GraphNode);for(b=0;b<a.indices.length;b+=3){var g=a.indices[b],f=a.indices[b+1],m=a.indices[b+2];this.addEdge(g,f);this.addEdge(f,m);this.addEdge(m,g)}}
MeshGraph.prototype.addEdge=function(a,b){if(-1!==this.nodes[a].neighbors.indexOf(b))for(var g=0;g<this.nodes[a].edges.length;g++)-1!==this.nodes[a].edges[g].connectedNodes.indexOf(b)&&(this.nodes[a].edges[g].meshEdgeCount+=1);else a>b&&this.orderIndices&&(g=a,a=b,b=g),g=new GraphEdge(a,b),this.nodes[a].neighbors.push(b),this.nodes[b].neighbors.push(a),this.nodes[a].edges.push(g),this.nodes[b].edges.push(g),this.edges.push(g)};
MeshGraph.prototype.hasNoHoles=function(){for(var a=0;a<this.edges.length;a++)if(2!=this.edges[a].meshEdgeCount)return console.log(this.edges[a]),!1;return!0};
MeshGraph.prototype.isFullyConnected=function(){for(var a=0;a<this.nodes.length;a++)this.nodes[a].visited=!1;a=[0];for(var b=new Set;0<a.length;){var g=a.shift(),f=this.nodes[g];f.visited=!0;b.add(g);for(g=0;g<f.neighbors.length;g++){var m=f.neighbors[g];b.has(m)||-1===!a.indexOf(m)||a.push(m)}}for(a=0;a<this.nodes.length;a++)if(!this.nodes[a].visited)return!1;return!0};var PrintUiSettings=function(){this.exportTriangles=this.exportCylinders=this.exportSpheres=!0;this.cylinderQuality=this.sphereQuality=16;this.radiusFactor=this.lineSubdivisions=1;this.modelScale=10;this.extrudeSurfaces=!0;this.extrusionRadius=.1;this.smoothEdges=!0;this.clipToSphere=!1;this.isoOffset=.01;this.gridResolution=50;this.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;this.gamma=.1},reconstructionAlgorithms={SNAPMC:"snapMC",MARCHINGCUBES:"marchingCubes"},printUiSettings=new PrintUiSettings;
function cindyPrintUpdateExportSpheres(){var a=document.getElementById("exportSpheres");printUiSettings.exportSpheres=a.checked}function cindyPrintUpdateExportCylinders(){var a=document.getElementById("exportCylinders");printUiSettings.exportCylinders=a.checked}function cindyPrintUpdateExportTriangles(){var a=document.getElementById("exportTriangles");printUiSettings.exportTriangles=a.checked}
function cindyPrintUpdateSphereQuality(){var a=document.getElementById("sphereQuality");printUiSettings.sphereQuality=1*a.value}function cindyPrintUpdateCylinderQuality(){var a=document.getElementById("cylinderQuality");printUiSettings.cylinderQuality=1*a.value}function cindyPrintUpdateLineSubdivisions(){var a=document.getElementById("lineSubdivisions");printUiSettings.lineSubdivisions=a.value/50}
function cindyPrintUpdateRadiusFactor(){var a=document.getElementById("radiusFactor");printUiSettings.radiusFactor=a.value/50}function cindyPrintUpdateModelScale(){var a=document.getElementById("modelScale");printUiSettings.modelScale=1*a.value}function cindyPrintUpdateExtrudeSurfaces(){var a=document.getElementById("extrudeSurfaces");printUiSettings.extrudeSurfaces=a.checked}
function cindyPrintUpdateExtrusionRadius(){var a=document.getElementById("extrusionRadius");printUiSettings.extrusionRadius=a.value/100}function cindyPrintUpdateSmoothEdges(){var a=document.getElementById("smoothEdges");printUiSettings.smoothEdges=a.checked}function cindyPrintUpdateClipToSphere(){var a=document.getElementById("clipToSphere");printUiSettings.clipToSphere=a.checked}
function cindyPrintUpdateIsoOffset(){var a=document.getElementById("isoOffset");printUiSettings.isoOffset=a.value/100;self.cdy.evokeCS("F(p) := (fun(p.x, p.y, p.z) - "+printUiSettings.isoOffset+");")}function cindyPrintUpdateGridResolution(){var a=document.getElementById("gridResolution");printUiSettings.gridResolution=1*a.value}
function cindyPrintUpdateReconstructionAlgorithm(){switch(document.getElementById("reconstructionAlgorithm").value){case "marchingCubes":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.MARCHINGCUBES;break;case "snapmc0.0":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=0;break;case "snapmc0.1":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=.1;break;case "snapmc0.2":printUiSettings.reconstructionAlgorithm=
reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=.2;break;case "snapmc0.3":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=.3;break;case "snapmc0.4":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=.4;break;case "snapmc0.5":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC,printUiSettings.gamma=.5}}self.cindyPrintUpdateExportSpheres=cindyPrintUpdateExportSpheres;
self.cindyPrintUpdateExportCylinders=cindyPrintUpdateExportCylinders;self.cindyPrintUpdateExportTriangles=cindyPrintUpdateExportTriangles;self.cindyPrintUpdateSphereQuality=cindyPrintUpdateSphereQuality;self.cindyPrintUpdateCylinderQuality=cindyPrintUpdateCylinderQuality;self.cindyPrintUpdateLineSubdivisions=cindyPrintUpdateLineSubdivisions;self.cindyPrintUpdateRadiusFactor=cindyPrintUpdateRadiusFactor;self.cindyPrintUpdateModelScale=cindyPrintUpdateModelScale;
self.cindyPrintUpdateExtrudeSurfaces=cindyPrintUpdateExtrudeSurfaces;self.cindyPrintUpdateExtrusionRadius=cindyPrintUpdateExtrusionRadius;self.cindyPrintUpdateSmoothEdges=cindyPrintUpdateSmoothEdges;self.cindyPrintUpdateClipToSphere=cindyPrintUpdateClipToSphere;self.cindyPrintUpdateIsoOffset=cindyPrintUpdateIsoOffset;self.cindyPrintUpdateGridResolution=cindyPrintUpdateGridResolution;self.cindyPrintUpdateReconstructionAlgorithm=cindyPrintUpdateReconstructionAlgorithm;
function uiStringCindy3D(a){var b=CindyJS.getBaseDir()+"images/cindyprint/";return'<input type="checkbox" id="exportSpheres" onclick="cindyPrintUpdateExportSpheres()" checked> Spheres <image class=\'smallimg\' src=\''+b+'SphereHighRes.png\'/><input type="checkbox" id="exportCylinders" onclick="cindyPrintUpdateExportCylinders()" checked> Cylinders <image class=\'smallimg\' src=\''+b+'CylinderHighRes.png\'/><input type="checkbox" id="exportTriangles" onclick="cindyPrintUpdateExportTriangles()" checked> Triangles  <image class=\'smallimg\' src=\''+
b+"Triangles.png'/><br><table>    <tr><th>Sphere quality</th><th><image src='"+b+'SphereLowRes.png\'/></th><th><div class="slidecontainer"><input type="range" min="8" max="64" value="16" class="slider" id="sphereQuality" oninput="cindyPrintUpdateSphereQuality()"></th><th><image src=\''+b+"SphereHighRes.png'/></th></tr>    <tr><th>Cylinder quality</th><th><image src='"+b+'CylinderLowRes.png\'/></th><th><div class="slidecontainer"><input type="range" min="8" max="64" value="16" class="slider" id="cylinderQuality" oninput="cindyPrintUpdateCylinderQuality()"></th><th><image src=\''+
b+"CylinderHighRes.png'/></th></tr>    <tr><th>Radius factor</th><th><image src='"+b+'SphereSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="50" class="slider" id="radiusFactor" oninput="cindyPrintUpdateRadiusFactor()"></th><th><image src=\''+b+"SphereHighRes.png'/></th></tr>    <tr><th>Model scale</th><th><image src='"+b+'SizeSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="10" class="slider" id="modelScale" oninput="cindyPrintUpdateModelScale()"></th><th><image src=\''+
b+'SizeLarge.png\'/></th></tr></table><input type="checkbox" id="extrudeSurfaces" onclick="cindyPrintUpdateExtrudeSurfaces()" checked> Extrude the triangle surfaces<table>    <tr><th>Extrusion radius</th><th><image src=\''+b+'ExtrudeSurfaceSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="0" max="100" value="10" class="slider" id="extrusionRadius" oninput="cindyPrintUpdateExtrusionRadius()"></th><th><image src=\''+b+'ExtrudeSurfaceLarge.png\'/></th></tr></table><input type="checkbox" id="smoothEdges" onclick="cindyPrintUpdateSmoothEdges()" checked> Smooth extrusion edges<br><button onclick="cdy.evokeCS(\'savecsgmesh(&quot;'+
a+"&quot;)');\">Export mesh</button><button onclick=\"cdy.evokeCS('updatepreviewcdy3d()');\">Update Preview</button>"}
function uiStringTubes(a,b,g,f,m){var k=CindyJS.getBaseDir()+"images/cindyprint/",c="true";m||(c="false");return"<table>    <tr><th>Cylinder quality</th><th><image src='"+k+'CylinderLowRes.png\'/></th><th><div class="slidecontainer"><input type="range" min="8" max="64" value="16" class="slider" id="cylinderQuality" oninput="cindyPrintUpdateCylinderQuality()"></th><th><image src=\''+k+"CylinderHighRes.png'/></th></tr>    <tr><th>Line subdivisions</th><th><image src='"+k+'LineSubdivisionLow.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="50" class="slider" id="lineSubdivisions" oninput="cindyPrintUpdateLineSubdivisions()"></th><th><image src=\''+
k+"LineSubdivisionHigh.png'/></th></tr>    <tr><th>Radius factor</th><th><image src='"+k+'TubeThin.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="50" class="slider" id="radiusFactor" oninput="cindyPrintUpdateRadiusFactor()"></th><th><image src=\''+k+"TubeThick.png'/></th></tr>    <tr><th>Model scale</th><th><image src='"+k+'SizeSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="10" class="slider" id="modelScale" oninput="cindyPrintUpdateModelScale()"></th><th><image src=\''+
k+"SizeLarge.png'/></th></tr></table><button onclick=\"cdy.evokeCS('savetubemesh(&quot;"+a+"&quot;, "+b+"(' + document.getElementById('lineSubdivisions').value/50 + '*("+g+")), "+f+"/20, "+c+");');\">Export mesh</button><button onclick=\"cdy.evokeCS('updatepreviewtubes("+b+"(' + document.getElementById('lineSubdivisions').value/50 + '*("+g+")), "+f+"/20, "+c+");');\">Update Preview</button>"}
function uiStringCindyGL(a,b){var g=CindyJS.getBaseDir()+"images/cindyprint/";return'<input type="checkbox" id="extrudeSurfaces" onclick="cindyPrintUpdateExtrudeSurfaces()" checked> Extrude the triangle surfaces<table>    <tr><th>Extrusion radius</th><th><image src=\''+g+'ExtrudeSurfaceSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="0" max="100" value="10" class="slider" id="extrusionRadius" oninput="cindyPrintUpdateExtrusionRadius()"></th><th><image src=\''+g+'ExtrudeSurfaceLarge.png\'/></th></tr></table><input type="checkbox" id="smoothEdges" onclick="cindyPrintUpdateSmoothEdges()" checked> Smooth extrusion edges<input type="checkbox" id="clipToSphere" onclick="cindyPrintUpdateClipToSphere()"> Clip geometry to sphere<table>    <tr><th>Sphere quality</th><th><image src=\''+
g+'SphereLowRes.png\'/></th><th><div class="slidecontainer"><input type="range" min="8" max="32" value="16" class="slider" id="sphereQuality" oninput="cindyPrintUpdateSphereQuality()"></th><th><image src=\''+g+"SphereHighRes.png'/></th></tr>    <tr><th>Model scale</th><th><image src='"+g+'SizeSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="10" class="slider" id="modelScale" oninput="cindyPrintUpdateModelScale()"></th><th><image src=\''+g+"SizeLarge.png'/></th></tr>    <tr><th>Iso offset</th><th><image src='"+
g+'IsoA.png\'/></th><th><div class="slidecontainer"><input type="range" min="0" max="100" value="0" class="slider" id="isoOffset" oninput="cindyPrintUpdateIsoOffset()"></th><th><image src=\''+g+"IsoB.png'/></tr>    <tr><th>Grid resolution</th><th><image src='"+g+'GridResLow.png\'/></th><th><div class="slidecontainer"><input type="range" min="16" max="128" value="50" class="slider" id="gridResolution" oninput="cindyPrintUpdateGridResolution()"></th><th><image src=\''+g+'ExtrudeSurfaceSmall.png\'/></th></tr></table>Implicit surface reconstruction algorithm <select name="reconstructionAlgorithm" id="reconstructionAlgorithm" onchange="cindyPrintUpdateReconstructionAlgorithm()"> <option value="marchingCubes">Marching Cubes</option><option value="snapmc0.0">SnapMC (&gamma;=0.0)</option><option selected value="snapmc0.1">SnapMC (&gamma;=0.1)</option><option value="snapmc0.2">SnapMC (&gamma;=0.2)</option><option value="snapmc0.3">SnapMC (&gamma;=0.3)</option><option value="snapmc0.4">SnapMC (&gamma;=0.4)</option><option value="snapmc0.5">SnapMC (&gamma;=0.5)</option></select><br><button onclick="cdy.evokeCS(\'saveisomeshtofile(&quot;'+
a+"&quot;, "+b+");');\">Export Mesh</button><button onclick=\"cdy.evokeCS('updatepreviewcdygl("+b+")');\">Update Preview</button>"}
var uiStringStyle="<style>.vertaligncontainer {  display: flex;}table {  border-collapse: collapse;  text-align:left;}th {    font-weight: normal;}/* https://www.w3schools.com/howto/howto_js_rangeslider.asp */.slidecontainer {  width: 220px;  display:inline-block;  margin-left:10px;  vertical-align: baseline;}.slider {  -webkit-appearance: none;  width: 100%;  height: 15px;  border-radius: 5px;  background: #d3d3d3;  outline: none;  opacity: 0.7;  -webkit-transition: .2s;  transition: opacity .2s;}.slider:hover {  opacity: 1;}.slider::-webkit-slider-thumb {  -webkit-appearance: none;  appearance: none;  width: 20px;  height: 20px;  border-radius: 50%;  background: #4CAF50;  cursor: pointer;}.slider::-moz-range-thumb {  width: 20px;  height: 20px;  border-radius: 50%;  background: #4CAF50;  cursor: pointer;}th > img {  width: 22px;  height: 22px;  text-align:center;  vertical-align:middle;  margin-left:5px;  margin-right:-8px;}.smallimg {  width: 22px;  height: 22px;  text-align:center;  vertical-align:middle;  margin-left:1px;  margin-right:14px;}th {  display: table-cell;  text-align:center;  vertical-align:middle;}</style>",cindyBaseDir=
null;function getCindyBaseDir(){if(null!==cindyBaseDir)return cindyBaseDir;for(var a=document.getElementsByTagName("script"),b=0;b<a.length;++b){var g=a[b].src;if(g){var f=/Cindy\.js$/.exec(g);if(f)return cindyBaseDir=g.substr(0,f.index)}}console.error("Could not find <script> tag for Cindy.js");return cindyBaseDir};function TriangleMesh(){this.vertices=[];this.normals=[];this.indices=[]}TriangleMesh.prototype.scale=function(a){for(var b=0;b<this.vertices.length;b++)this.vertices[b]=vec3mul(a,this.vertices[b])};
TriangleMesh.prototype.computeSmoothNormals=function(){this.normals=[];for(var a=0;a<this.vertices.length;a++){for(var b=new vec3(0,0,0),g=0,f=0;f<this.indices.length;f+=3)if(this.indices[f]==a||this.indices[f+1]==a||this.indices[f+2]==a){var m=this.indices[f],k=this.indices[f+2],c=vec3sub(this.vertices[this.indices[f+1]],this.vertices[m]);m=vec3sub(this.vertices[k],this.vertices[m]);c=vec3cross(c,m);m=vec3length(c);1E-6<m&&(c=vec3mul(1/m,c));b=vec3add(b,c);g++}0==g&&alert("Error in createNormals: numTrianglesSharedBy == 0");
b=vec3mul(1/g,b);this.normals.push(b)}};TriangleMesh.prototype.saveToObjFile=function(a){for(var b="o printmesh\ns 1\n",g=0;g<this.vertices.length;g++){var f=this.vertices[g];b=b+"v "+f.x+" "+f.y+" "+f.z+"\n";0<this.normals.length&&(f=this.normals[g],b=b+"vn "+f.x+" "+f.y+" "+f.z+"\n")}for(g=0;g<this.indices.length;g+=3){f=this.indices[g];var m=this.indices[g+1],k=this.indices[g+2];b=b+"f "+f+"//"+f+" "+m+"//"+m+" "+k+"//"+k+"\n"}downloadTextFile(a,b)};
TriangleMesh.prototype.saveToAsciiStlFile=function(a){for(var b="solid printmesh\n\n",g=0;g<this.indices.length;g+=3){var f=this.vertices[this.indices[g]],m=this.vertices[this.indices[g+2]],k=vec3sub(this.vertices[this.indices[g+1]],f);f=vec3sub(m,f);k=vec3normalize(vec3cross(k,f));b=b+"facet normal "+k.x+" "+k.y+" "+k.z+"\n";b+="\touter loop\n";for(k=0;3>k;k++)f=this.vertices[this.indices[g+k]],b=b+"\t\tvertex "+f.x+" "+f.y+" "+f.z+"\n";b+="\tendloop\nendfacet\n"}downloadTextFile(a,b+"\nendsolid printmesh\n")};
TriangleMesh.prototype.saveToBinaryStlFile=function(a){for(var b=new BinaryFileWriter(84+this.indices.length/3*50),g=0;20>g;g++)b.writeUint32(0);b.writeUint32(this.indices.length/3);for(g=0;g<this.indices.length;g+=3){var f=this.vertices[this.indices[g]],m=this.vertices[this.indices[g+1]],k=this.vertices[this.indices[g+2]],c=vec3sub(m,f),l=vec3sub(k,f);c=vec3normalize(vec3cross(c,l));b.writeVec3(c);b.writeVec3(f);b.writeVec3(m);b.writeVec3(k);b.writeUint16(0)}downloadBlobAsFile(a,b.toBlob())};
TriangleMesh.prototype.saveToFile=function(a){var b=new MeshGraph(this);0>=this.vertices.length?alert("TriangleMesh.prototype.saveToFile: The mesh is empty."):(b.hasNoHoles()||alert("TriangleMesh.prototype.saveToFile: The mesh has holes or is not a closed surface."),b.isFullyConnected()||alert("TriangleMesh.prototype.saveToFile: The mesh consists of multiple components."),a.endsWith(".obj")?this.saveToObjFile(a):a.endsWith(".stl")?this.saveToBinaryStlFile(a):alert("TriangleMesh.prototype.saveToFile: Unsupported mesh format."))};function vec3(a,b,g){this.x=a;this.y=b;this.z=g}vec3.prototype.set=function(a,b,g){this.x=a;this.y=b;this.z=g};function vec3add(a,b){return new vec3(a.x+b.x,a.y+b.y,a.z+b.z)}function vec3sub(a,b){return new vec3(a.x-b.x,a.y-b.y,a.z-b.z)}function vec3mul(a,b){return new vec3(b.x*a,b.y*a,b.z*a)}function vec3div(a,b){return new vec3(b.x/a,b.y/a,b.z/a)}function vec3lengthsq(a){return a.x*a.x+a.y*a.y+a.z*a.z}function vec3length(a){return Math.sqrt(a.x*a.x+a.y*a.y+a.z*a.z)}
function vec3dot(a,b){return a.x*b.x+a.y*b.y+a.z*b.z}function vec3cross(a,b){return new vec3(a.y*b.z-a.z*b.y,a.z*b.x-a.x*b.z,a.x*b.y-a.y*b.x)}function vec3normalize(a){return vec3mul(1/vec3length(a),a)}function cindyscriptToVec3(a){return new vec3(a.value[0].value.real,a.value[1].value.real,a.value[2].value.real)}function vec3tolist(a){return[a.x,a.y,a.z]};onmessage=function(a){printUiSettings=a.data.printUiSettings;self.useWebWorkers=!0;var b=a.data.command;"generateCsgMesh"==b?postMessage(generateCsgMeshFrom(a.data.spheres,a.data.cylinders,a.data.triangles)):"generateIsoMeshFromScalarFunction"==b?WORKER_generateIsoMeshFromScalarFunction(a.data):"generateIsoMeshFromScalarFunction_PARALLEL"==b?generateIsoMeshFromScalarFunction_PARALLEL(a.data.workerID,a.data.gridCells,a.data.isoLevel):"generateIsoMeshFromScalarFunctionSnapMC_PARALLEL"==b&&generateIsoMeshFromScalarFunctionSnapMC_PARALLEL(a.data.workerID,
a.data.gridCells,a.data.isoLevel,a.data.snapGrid,a.data.indices)};
function WORKER_generateIsoMeshFromScalarFunction(a){self.baseDir=a.baseDir;generateIsoMeshFromGrid(a.cartesianGrid.gridPoints,a.cartesianGrid.gridValues,a.cartesianGrid.gridNormals,a.isoLevel,function(b,g){b=trianglePointsToIndexedMesh(b,g,1E-6);printUiSettings.extrudeSurfaces&&(b=printUiSettings.smoothEdges?createOpenSurfaceShellMeshWithNormalsAndRoundEdges(b,printUiSettings.extrusionRadius):createOpenSurfaceShellMeshWithNormals(b,printUiSettings.extrusionRadius));postMessage(b)})}
function MCWorkerAnswer(a,b,g){this.workerID=a;this.trianglePoints=b;this.triangleNormals=g}function generateIsoMeshFromScalarFunction_PARALLEL(a,b,g){for(var f=[],m=[],k=0;k<b.length;k++){var c=polygonizeGridCellMarchingCubes(b[k],g);f=f.concat(c.trianglePoints);m=m.concat(c.triangleNormals)}postMessage(new MCWorkerAnswer(a,f,m))}
function generateIsoMeshFromScalarFunctionSnapMC_PARALLEL(a,b,g,f,m){for(var k=[],c=[],l=0;l<b.length;l++){var e=polygonizeGridCellSnapMC(b[l],g,f,m[l][0],m[l][1],m[l][2]);k=k.concat(e.trianglePoints);c=c.concat(e.triangleNormals)}postMessage(new MCWorkerAnswer(a,k,c))};var CSG;if("undefined"===typeof CindyJS)importScripts("csg.js"),self.CSG=self.csg.CSG,self.CAG=self.csg.CAG;else{var csgReady=function(){self.CSG=self.csg.CSG;self.CAG=self.csg.CAG};CindyJS.loadScript("csg","csg.js",csgReady)}var csgResolution=8,csgResolutionSphere=16,csgResolutionCylinder=8;function setCsgResolution(a){csgResolution=a}function setCsgResolutionSphere(a){csgResolutionSphere=a}function setCsgResolutionCylinder(a){csgResolutionCylinder=a}
function createCSGSphere(a,b){return self.CSG.sphere({center:a,radius:b,resolution:csgResolutionSphere})}function createCSGCylinder(a,b,g){return self.CSG.roundedCylinder({start:a,end:b,radius:g,resolution:csgResolutionCylinder})}function convertCindy3DTrianglesToPolyhedron(a){a=cindyTrianglePointsToIndexedMesh(a);return convertTriangleMeshToCSGPolyhedron(a)}
function convertTriangleMeshToCSGPolyhedron(a){for(var b=[],g=0;g<a.vertices.length;g++){var f=a.vertices[g];b.push([f.x,f.y,f.z])}g=[];for(f=0;f<a.indices.length;f+=3)g.push([a.indices[f+2],a.indices[f+1],a.indices[f]]);return self.CSG.polyhedron({points:b,faces:g})}
function mergeCindy3DObjectsToMesh(a,b,g){for(var f=[],m=0;m<a.length;m++)f.push(createCSGSphere(a[m].pos,a[m].radius));for(a=0;a<b.length;a++)f.push(createCSGCylinder(b[a].pos1,b[a].pos2,b[a].radius));for(b=0;b<g.length;b++)f.push(convertCindy3DTrianglesToPolyhedron(g[b].trianglePoints));return mergeObjects(f)}function mergeObjects(a){a=(new self.CSG).union(a);return convertCSGPolygonsToTriangleMesh(a)}
function intersectObjects(a){a=(new self.CSG).intersect(a);return convertCSGPolygonsToTriangleMesh(a)}function convertCSGPolygonsToTriangleMesh(a){a=a.toTriangles();for(var b=[],g=0;g<a.length;g++)for(var f=a[g].vertices,m=0;3>m;m++){var k=f[m].pos;b.push(new vec3(k._x,k._y,k._z))}return trianglePointsToIndexedMesh(b)}function cindyTrianglePointsToIndexedMesh(a,b){a=a.map(function(g){return new vec3(g[0],g[1],g[2])});return trianglePointsToIndexedMesh(a,void 0,b)};function createOpenSurfaceShellMeshWithNormals(a,b){0==a.normals.length&&a.computeSmoothNormals();var g=[],f=[];g=a.indices.concat(a.indices.map(function(e){return e+a.vertices.length}));f=a.vertices.concat(a.vertices);for(var m=0;m<a.indices.length;m+=3){var k=g[m];g[m]=g[m+2];g[m+2]=k}for(m=0;m<a.vertices.length;m++){k=a.vertices[m];var c=a.normals[m],l=vec3mul(b,c);c=vec3mul(-b,c);f[m]=vec3add(k,c);f[m+a.vertices.length]=vec3add(k,l)}b=new MeshGraph(a,!1);for(m=0;m<b.edges.length;m++)1==b.edges[m].meshEdgeCount&&
(l=b.edges[m].connectedNodes,k=l[0],l=l[1],c=l+a.vertices.length,g=g.concat([c,k+a.vertices.length,k,l,c,k]));b=new TriangleMesh;b.indices=g;b.vertices=f;return b}
function createOpenSurfaceShellMeshWithNormalsAndRoundEdges(a,b){0==a.normals.length&&a.computeSmoothNormals();var g=[],f=[];g=a.indices.concat(a.indices.map(function(e){return e+a.vertices.length}));f=a.vertices.concat(a.vertices);for(var m=0;m<a.indices.length;m+=3){var k=g[m];g[m]=g[m+2];g[m+2]=k}for(m=0;m<a.vertices.length;m++){k=a.vertices[m];var c=a.normals[m],l=vec3mul(b,c);c=vec3mul(-b,c);f[m]=vec3add(k,c);f[m+a.vertices.length]=vec3add(k,l)}addTubesOnBorderEdges(a,a.vertices,a.indices,f,
g,8,b);b=new TriangleMesh;b.indices=g;b.vertices=f;return b}
function getBorderEdgeLoops(a){for(var b=new Set,g=[],f=0;f<a.edges.length;f++)if(1==a.edges[f].meshEdgeCount&&!b.has(a.edges[f])){b.add(a.edges[f]);var m=a.edges[f].connectedNodes,k=m[0];m=m[1];for(var c=k,l=[k];m!=c;){var e=null;for(k=0;k<a.edges.length;k++)if(1==a.edges[k].meshEdgeCount&&-1!==a.edges[k].connectedNodes.indexOf(m)&&!b.has(a.edges[k])){e=a.edges[k];break}b.add(e);e.connectedNodes[0]==m?(k=e.connectedNodes[0],m=e.connectedNodes[1]):(k=e.connectedNodes[1],m=e.connectedNodes[0]);l.push(k)}g.push(l)}return g}
var halfCirclePointData=[];function initArcVertices(a,b,g,f){var m=f/(a-1);f=Math.tan(m);m=Math.cos(m);b=new vec3(b*Math.cos(g),b*Math.sin(g),0);halfCirclePointData=[];for(g=0;g<a;g++){halfCirclePointData.push(b);var k=new vec3(-b.y,b.x,0);b=vec3add(b,vec3mul(f,k));b=vec3mul(m,b)}}
function getTransformedCircleVertices(a,b,g){for(var f=vec3cross(b,g),m=[],k=0;k<halfCirclePointData.length;k++){var c=halfCirclePointData[k];c=new vec3(c.x*b.x+c.y*f.x+c.z*g.x+a.x,c.x*b.y+c.y*f.y+c.z*g.y+a.y,c.x*b.z+c.y*f.z+c.z*g.z+a.z);m.push(c)}return m}
function addTubesOnBorderEdges(a,b,g,f,m,k,c){initArcVertices(k-2,c,-Math.PI/2+Math.PI/(k-1),Math.PI-2*Math.PI/(k-1));k=new MeshGraph(a,!1);g=f.length;k=getBorderEdgeLoops(k);for(c=0;c<k.length;c++)for(var l=0;l<k[c].length;l++){var e=k[c][(l-1+k[c].length)%k[c].length],d=k[c][l],h=k[c][(l+1)%k[c].length],n=b[d],p=b[h],r=vec3add(vec3sub(n,b[e]),vec3sub(p,n));p=vec3length(r);if(!(1E-4>p)){r=vec3mul(1/p,r);p=d;var q=h;d+=a.vertices.length;h+=a.vertices.length;e=vec3cross(vec3sub(f[d],f[e]),vec3sub(f[d],
f[p]));var t=vec3cross(vec3sub(f[h],f[p]),vec3sub(f[h],f[q]));e=vec3normalize(vec3add(e,t));n=getTransformedCircleVertices(n,e,r);for(r=0;r<n.length;r++)f.push(n[r]);r=[];e=[];r.push(p);e.push(q);for(p=0;p<n.length;p++)r.push(g+p),l<k[c].length-1?e.push(g+n.length+p):e.push(g-n.length*(k[c].length-1)+p);r.push(d);e.push(h);g+=n.length;for(p=0;p<r.length-1;p++)m.push(e[p+1]),m.push(r[p+1]),m.push(r[p]),m.push(e[p]),m.push(e[p+1]),m.push(r[p])}}};var circlePointData=[],circlePointDataTubeRadius=0;function initCircleVertices(a,b){circlePointData=[];circlePointDataTubeRadius=b;var g=6.2831852/a,f=Math.tan(g);g=Math.cos(g);b=new vec3(b,0,0);for(var m=0;m<a;m++){circlePointData.push(b);var k=new vec3(-b.y,b.x,0);b=vec3add(b,vec3mul(f,k));b=vec3mul(g,b)}}
function insertOrientedCirclePoints(a,b,g,f,m){var k=m;.01>vec3length(vec3cross(k,f))&&(k=new vec3(0,1,0));k=vec3normalize(vec3sub(k,vec3mul(vec3dot(k,f),f)));m.set(k.x,k.y,k.z);m=vec3cross(f,k);for(var c=0;c<circlePointData.length;c++){var l=circlePointData[c];l=new vec3(l.x*k.x+l.y*m.x+l.z*f.x+g.x,l.x*k.y+l.y*m.y+l.z*f.y+g.y,l.x*k.z+l.y*m.z+l.z*f.z+g.z);a.push(l);l=vec3normalize(vec3sub(l,g));b.push(l)}}
function createTubeMesh(a,b,g,f){var m,k,c,l,e,d,h,n,p,r,q,t,w,x,G,v,A,y,C,u,z,D,F,I,B,E,H,K,J,L;return $jscomp.asyncExecutePromiseGeneratorProgram(function(M){m=printUiSettings.cylinderQuality;circlePointData.length==m&&b==circlePointDataTubeRadius||initCircleVertices(m,b);k=a.length;if(g&&3>k)return console.log("createClosedTubeMesh: Closed tube too short."),M.return(null);if(!g&&2>k)return console.log("createClosedTubeMesh: Open tube too short."),M.return(null);c=new TriangleMesh;l=c.vertices;
e=c.indices;d=c.normals;h=new vec3(1,0,0);n=[];for(r=p=0;r<k;r++)q=vec3sub(a[(r+1)%k],a[r]),g||r!=k-1||(q=vec3sub(a[r],a[r-1])),t=vec3length(q),1E-5>t||(q=vec3normalize(q),insertOrientedCirclePoints(l,d,a[r],q,h),n.push(new vec3(h.x,h.y,h.z)),p++);for(w=0;w<p-1;w++)for(x=0;x<m;x++)e.push(w*m+x),e.push(w*m+(x+1)%m),e.push((w+1)%p*m+(x+1)%m),e.push(w*m+x),e.push((w+1)%p*m+(x+1)%m),e.push((w+1)%p*m+x);if(g)for(G=n[p-1],v=n[0],A=Math.atan2(vec3length(vec3cross(G,v)),vec3dot(G,v)),A=(A+2*Math.PI)%(2*Math.PI),
y=Math.round(A/(2*Math.PI)*m),C=0;C<m;C++)e.push((p-1)*m+C%m),e.push((p-1)*m+(C+1)%m),e.push(0*m+(C+1+y)%m),e.push((p-1)*m+C%m),e.push(0*m+(C+1+y)%m),e.push(0*m+(C+y)%m);else u=m,z=Math.ceil(m/2),I=a[0],B=vec3sub(a[0],a[1]),B=vec3normalize(B),E=n[0],H=a[k-1],K=vec3sub(a[k-1],a[k-2]),K=vec3normalize(K),J=n[p-1],L=function(N,O,Q,S){var R=vec3cross(Q,O);O=vec3mul(b,O);Q=vec3mul(b,Q);R=vec3mul(b,R);for(var P=l.length-u,W=1;W<=z;W++){F=.5*Math.PI*(1-W/z);for(var V=0;V<u;V++){D=-2*Math.PI*V/u;var T=new vec3(Math.cos(D)*
Math.sin(F),Math.sin(D)*Math.sin(F),Math.cos(F));T=new vec3(T.x*Q.x+T.y*R.x+T.z*O.x+N.x,T.x*Q.y+T.y*R.y+T.z*O.y+N.y,T.x*Q.z+T.y*R.z+T.z*O.z+N.z);l.push(T);if(W==z)break}}for(N=0;N<z;N++)for(O=0;O<u;O++)S&&0==N?(e.push((2*u-O)%u+N*u),e.push((2*u-O-1)%u+N*u),e.push(P+O%u+(N+1)*u),e.push((2*u-O-1)%u+N*u),e.push(P+(O+1)%u+(N+1)*u),e.push(P+O%u+(N+1)*u)):N<z-1?(e.push(P+O%u+N*u),e.push(P+(O+1)%u+N*u),e.push(P+O%u+(N+1)*u),e.push(P+(O+1)%u+N*u),e.push(P+(O+1)%u+(N+1)*u),e.push(P+O%u+(N+1)*u)):(e.push(P+
O%u+N*u),e.push(P+(O+1)%u+N*u),e.push(P+0+(N+1)*u))},L(H,K,J,!1),L(I,B,E,!0);f(c);M.jumpToEnd()})};function generateIsoMeshFromScalarFunction(a,b,g,f,m,k,c){a=constructCartesianGridScalarField(a,b,g,f,m);useWebWorkers?(b=new Worker(getCindyBaseDir()+"CindyPrintWorker.js"),setMeshCreationWorker(b),b.onmessage=function(l){l=l.data;l.__proto__=TriangleMesh.prototype;setMeshCreationWorker(null);c(l)},b.postMessage({printUiSettings:printUiSettings,command:"generateIsoMeshFromScalarFunction",baseDir:getCindyBaseDir(),cartesianGrid:a,isoLevel:k})):generateIsoMeshFromGrid(a.gridPoints,a.gridValues,a.gridNormals,
k,function(l,e){l=trianglePointsToIndexedMesh(l,e,1E-6);printUiSettings.extrudeSurfaces&&(l=printUiSettings.smoothEdges?createOpenSurfaceShellMeshWithNormalsAndRoundEdges(l,printUiSettings.extrusionRadius):createOpenSurfaceShellMeshWithNormals(l,printUiSettings.extrusionRadius));c(l)})}function generateClosedIsoMeshFromScalarFunction(a,b,g,f,m){a=constructCartesianGridScalarField(a,b,g,f);return generateIsoMeshFromGrid(a.gridPoints,a.gridValues,a.gridNormals,m)}
function constructCartesianGridScalarField(a,b,g,f,m){for(var k=[],c=[],l=[],e=0;e<g;e++){for(var d=[],h=[],n=[],p=0;p<g;p++){for(var r=[],q=[],t=[],w=0;w<g;w++){var x=new vec3(a.x+w*b,a.y+p*b,a.z+e*b);r.push(x);q.push(f(x));t.push(m(x))}d.push(r);h.push(q);n.push(t)}k.push(d);c.push(h);l.push(n)}return{gridPoints:k,gridValues:c,gridNormals:l}}
function constructCartesianSnapGridScalarField(a,b){var g={gridValues:[],snapBackTo:[],snapBackToNormals:[],weights:[]};g.gridValues=deepCopy(a.gridValues);for(var f=0;f<a.gridPoints.length-1;f++)for(var m=0;m<a.gridPoints[0].length-1;m++)for(var k=0;k<a.gridPoints[0][0].length-1;k++)snapAtEdge(a,g,b,f,m,k,f+1,m,k),snapAtEdge(a,g,b,f,m,k,f,m+1,k),snapAtEdge(a,g,b,f,m,k,f,m,k+1);return g}
var deepCopy=function(a){var b=[];a.forEach(function(g){Array.isArray(g)?b.push(deepCopy(g)):"object"===typeof g?b.push(deepCopyObject(g)):b.push(g)});return b},deepCopyObject=function(a){var b={};a=$jscomp.makeIterator(Object.entries(a));for(var g=a.next();!g.done;g=a.next()){var f=$jscomp.makeIterator(g.value);g=f.next().value;f=f.next().value;Array.isArray(f)?b[g]=deepCopy(f):b[g]="object"===typeof f?deepCopyObject(f):f}return b};
function snapAtEdge(a,b,g,f,m,k,c,l,e){var d=printUiSettings.gamma,h=d,n=d;if(a.gridValues[f][m][k]<g&&a.gridValues[c][l][e]>g||a.gridValues[f][m][k]>g&&a.gridValues[c][l][e]<g)n=a.gridValues[c][l][e]-a.gridValues[f][m][k],1E-5<n||-1E-5>n?(h=(a.gridValues[c][l][e]-g)/n,n=(g-a.gridValues[f][m][k])/n):n=h=.5;n<d?snapToVertex(b,a.gridPoints,a.gridNormals,g,n,f,m,k,c,l,e):h<d&&snapToVertex(b,a.gridPoints,a.gridNormals,g,h,c,l,e,f,m,k)}
function snapToVertex(a,b,g,f,m,k,c,l,e,d,h){a.gridValues[k][c][l]!=f?(a.gridValues[k][c][l]=f,createArrayIfNecessary(a.snapBackTo,k,c),createArrayIfNecessary(a.snapBackToNormals,k,c),createArrayIfNecessary(a.weights,k,c),a.snapBackTo[k][c][l]=b[e][d][h],a.snapBackToNormals[k][c][l]=g[e][d][h],a.weights[k][c][l]=m):void 0!=a.weights[k]&&void 0!=a.weights[k][c]&&void 0!=a.weights[k][c][l]&&a.weights[k][c][l]>m&&(a.snapBackTo[k][c][l]=b[e][d][h],a.snapBackToNormals[k][c][l]=g[e][d][h],a.weights[k][c][l]=
m)}function createArrayIfNecessary(a,b,g){void 0==a[b]?(a[b]=[],a[b][g]=[]):void 0==a[b][g]&&(a[b][g]=[])}function GridCell(){this.v=[];this.f=[];this.n=[];for(var a=0;8>a;a++)this.v.push(new vec3(0,0,0)),this.f.push(0),this.n.push(new vec3(0,0,0))}function vertexInterpIso(a,b,g,f,m){if(1E-5>Math.abs(a-f))return b;if(1E-5>Math.abs(a-m))return g;if(1E-5>Math.abs(f-m))return b;a=(a-f)/(m-f);f=new vec3(0,0,0);f.x=b.x+a*(g.x-b.x);f.y=b.y+a*(g.y-b.y);f.z=b.z+a*(g.z-b.z);return f}
function normalInterpIso(a,b,g,f,m){a=vertexInterpIso(a,b,g,f,m);return vec3normalize(a)}
function generateIsoMeshFromGrid(a,b,g,f,m){var k,c,l,e,d,h,n,p,r,q,t,w,x,G,v;return $jscomp.asyncExecutePromiseGeneratorProgram(function(A){k=a.length;if(useWebWorkers&&(c=self.navigator.hardwareConcurrency||4,1<c))return generateIsoMeshFromGridParallel(a,b,g,f,c,m),A.return();printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC&&(e={gridPoints:a,gridValues:b,gridNormals:g},l=constructCartesianSnapGridScalarField(e,f));d=new GridCell;h=[];n=[];for(p=0;p<k-1;p++)for(r=0;r<k-1;r++)for(q=
0;q<k-1;q++){for(t=0;8>t;t++){w=new vec3(q,r,p);if(printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC){if(1==t||3==t||5==t||7==t)w.x+=1;if(2==t||3==t||6==t||7==t)w.y+=1;if(4==t||5==t||6==t||7==t)w.z+=1}else{if(1==t||2==t||5==t||6==t)w.x+=1;if(4==t||5==t||6==t||7==t)w.y+=1;if(2==t||3==t||6==t||7==t)w.z+=1}d.v[t]=a[w.z][w.y][w.x];d.n[t]=g[w.z][w.y][w.x];d.f[t]=printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC?l.gridValues[w.z][w.y][w.x]:b[w.z][w.y][w.x]}x=
void 0;x=printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC?polygonizeGridCellSnapMC(d,f,l,p,r,q):polygonizeGridCellMarchingCubes(d,f);G=x.trianglePoints;v=x.triangleNormals;h=h.concat(G);n=n.concat(v)}m(h,n);A.jumpToEnd()})}function MCWorkerJob(a,b,g){this.workerID=a;this.gridCells=b;this.isoLevel=g;this.command="generateIsoMeshFromScalarFunction_PARALLEL";this.printUiSettings=self.printUiSettings}
function MCWorkerJobSnapMC(a,b,g,f,m){this.workerID=a;this.gridCells=b;this.isoLevel=g;this.snapGrid=f;this.indices=m;this.command="generateIsoMeshFromScalarFunctionSnapMC_PARALLEL";this.printUiSettings=self.printUiSettings}
function generateIsoMeshFromGridParallel(a,b,g,f,m,k){function c(C){for(var u=C.data.trianglePoints,z=C.data.triangleNormals,D=0;D<u.length;D++)u[D].__proto__=vec3.prototype;for(D=0;D<z.length;D++)z[D].__proto__=vec3.prototype;e=e.concat(u);d=d.concat(z);y--;if(0==y){for(u=0;u<n.length;u++)n[u].terminate();k(e,d)}0<p.length&&(C=C.data.workerID,u=p.pop(),u.workerID=C,n[C].postMessage(u))}var l=a.length,e=[],d=[],h;printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC&&(h=constructCartesianSnapGridScalarField({gridPoints:a,
gridValues:b,gridNormals:g},f));for(var n=[],p=[],r=0;r<l-1;r++){for(var q=[],t=[],w=0;w<l-1;w++)for(var x=0;x<l-1;x++){for(var G=new GridCell,v=0;8>v;v++){var A=new vec3(x,w,r);if(printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC){if(1==v||3==v||5==v||7==v)A.x+=1;if(2==v||3==v||6==v||7==v)A.y+=1;if(4==v||5==v||6==v||7==v)A.z+=1}else{if(1==v||2==v||5==v||6==v)A.x+=1;if(4==v||5==v||6==v||7==v)A.y+=1;if(2==v||3==v||6==v||7==v)A.z+=1}G.v[v]=a[A.z][A.y][A.x];G.n[v]=g[A.z][A.y][A.x];
G.f[v]=printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC?h.gridValues[A.z][A.y][A.x]:b[A.z][A.y][A.x]}printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC&&t.push([r,w,x]);q.push(G)}printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC?p.push(new MCWorkerJobSnapMC(-1,q,f,h,t)):p.push(new MCWorkerJob(-1,q,f))}var y=p.length;for(a=0;a<m&&0<p.length;a++)b=p.pop(),b.workerID=a,g="",g=self.baseDir?self.baseDir:getCindyBaseDir(),g=new Worker(g+
"CindyPrintWorker.js"),g.onmessage=c,g.postMessage(b),n.push(g)};/*

 The marching cubes look-up table and C code that is the base for the following code
 was released under public domain by Cory Bloyd. 
 For the tables see: http://paulbourke.net/geometry/polygonise/	
*/
var edgeTable=[0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,
3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,
3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0],triTable=[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1],[9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1],[3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1],[3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1],[3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1],[9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1],[4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1],[9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1],[2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1],[8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1],[9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1],[4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1],[3,10,1,3,11,10,7,8,4,-1,
-1,-1,-1,-1,-1,-1],[1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1],[4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1],[4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1],[9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1],[1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1],[5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1],[2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1],[9,5,4,2,
3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1],[0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1],[2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1],[10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1],[4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1],[5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1],[5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1],[9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1],[0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1],[1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1],[10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1],[8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1],[2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1],[7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1],[9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1],[2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1],[11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1],[9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1],[5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1],[11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1],[11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[10,6,5,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1],[1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1],[9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1],[5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1],[2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1],[0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1],[5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,
-1],[6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1],[0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1],[3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1],[6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1],[5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1],[1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1],[10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1],[6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1],[1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1],[8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1],[7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1],[3,11,2,7,8,
4,10,6,5,-1,-1,-1,-1,-1,-1,-1],[5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1],[0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1],[9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1],[8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1],[5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1],[0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1],[6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1],[10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1],[10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1],[8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1],[1,4,9,1,2,4,2,6,4,-1,-1,
-1,-1,-1,-1,-1],[3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1],[0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1],[10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1],[0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1],[3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1],[6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1],[9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1],[8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1],[3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1],[6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,
-1,-1],[0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1],[10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1],[10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1],[1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1],[2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1],[7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1],[7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1],[2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1],[1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1],[11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1],[8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1],[0,9,1,11,6,7,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1],[7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1],[7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1],[10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1],[2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1],[6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1],[7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1],[7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1],[2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1],[1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1],[10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1],[10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1],[0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1],[7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1],[6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1],[8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1],[9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1],[6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,
-1,-1],[1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1],[4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1],[10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1],[8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1],[0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1],[1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1],[8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1],[10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1],[4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1],[10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1],[5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1],[11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1],[9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1],[6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1],[7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1],[3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1],[7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1],[9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1],[3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1],[6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1],[9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1],[1,6,10,1,7,6,1,0,7,8,7,0,
9,5,4,-1],[4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1],[7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1],[6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1],[3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1],[0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1],[6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1],[0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1],[11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1],[6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1],[5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1],[9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1],[1,5,8,
1,8,0,5,6,8,3,8,2,6,2,8,-1],[1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1],[10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1],[0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1],[5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1],[10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1],[11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1],[9,
7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1],[7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1],[2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1],[8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1],[9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1],[9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1],[1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1],[9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1],[9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1],[5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1],[0,1,9,8,4,10,8,
10,11,10,4,5,-1,-1,-1,-1],[10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1],[2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1],[0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1],[0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1],[9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1],[5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1],[3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1],[5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1],[8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1],[0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,
-1],[9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1],[0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1],[1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1],[3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1],[4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1],[9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1],[11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1],[11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1],[2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1],[9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1],[3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1],[1,10,
2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1],[4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1],[4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1],[0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1],[3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1],[3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1],[0,2,11,8,0,11,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1],[3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1],[9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1],[1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]];
function polygonizeGridCellMarchingCubes(a,b){var g=0;a.f[0]<b&&(g|=1);a.f[1]<b&&(g|=2);a.f[2]<b&&(g|=4);a.f[3]<b&&(g|=8);a.f[4]<b&&(g|=16);a.f[5]<b&&(g|=32);a.f[6]<b&&(g|=64);a.f[7]<b&&(g|=128);if(0==edgeTable[g])return{trianglePoints:[],triangleNormals:[]};var f=[0,0,0,0,0,0,0,0,0,0,0,0],m=[0,0,0,0,0,0,0,0,0,0,0,0];edgeTable[g]&1&&(f[0]=vertexInterpIso(b,a.v[0],a.v[1],a.f[0],a.f[1]),m[0]=normalInterpIso(b,a.n[0],a.n[1],a.f[0],a.f[1]));edgeTable[g]&2&&(f[1]=vertexInterpIso(b,a.v[1],a.v[2],a.f[1],
a.f[2]),m[1]=normalInterpIso(b,a.n[1],a.n[2],a.f[1],a.f[2]));edgeTable[g]&4&&(f[2]=vertexInterpIso(b,a.v[2],a.v[3],a.f[2],a.f[3]),m[2]=normalInterpIso(b,a.n[2],a.n[3],a.f[2],a.f[3]));edgeTable[g]&8&&(f[3]=vertexInterpIso(b,a.v[3],a.v[0],a.f[3],a.f[0]),m[3]=normalInterpIso(b,a.n[3],a.n[0],a.f[3],a.f[0]));edgeTable[g]&16&&(f[4]=vertexInterpIso(b,a.v[4],a.v[5],a.f[4],a.f[5]),m[4]=normalInterpIso(b,a.n[4],a.n[5],a.f[4],a.f[5]));edgeTable[g]&32&&(f[5]=vertexInterpIso(b,a.v[5],a.v[6],a.f[5],a.f[6]),m[5]=
normalInterpIso(b,a.n[5],a.n[6],a.f[5],a.f[6]));edgeTable[g]&64&&(f[6]=vertexInterpIso(b,a.v[6],a.v[7],a.f[6],a.f[7]),m[6]=normalInterpIso(b,a.n[6],a.n[7],a.f[6],a.f[7]));edgeTable[g]&128&&(f[7]=vertexInterpIso(b,a.v[7],a.v[4],a.f[7],a.f[4]),m[7]=normalInterpIso(b,a.n[7],a.n[4],a.f[7],a.f[4]));edgeTable[g]&256&&(f[8]=vertexInterpIso(b,a.v[0],a.v[4],a.f[0],a.f[4]),m[8]=normalInterpIso(b,a.n[0],a.n[4],a.f[0],a.f[4]));edgeTable[g]&512&&(f[9]=vertexInterpIso(b,a.v[1],a.v[5],a.f[1],a.f[5]),m[9]=normalInterpIso(b,
a.n[1],a.n[5],a.f[1],a.f[5]));edgeTable[g]&1024&&(f[10]=vertexInterpIso(b,a.v[2],a.v[6],a.f[2],a.f[6]),m[10]=normalInterpIso(b,a.n[2],a.n[6],a.f[2],a.f[6]));edgeTable[g]&2048&&(f[11]=vertexInterpIso(b,a.v[3],a.v[7],a.f[3],a.f[7]),m[11]=normalInterpIso(b,a.n[3],a.n[7],a.f[3],a.f[7]));a=[];b=[];for(var k=0;-1!=triTable[g][k];k+=3)a.push(f[triTable[g][k]]),a.push(f[triTable[g][k+1]]),a.push(f[triTable[g][k+2]]),b.push(m[triTable[g][k]]),b.push(m[triTable[g][k+1]]),b.push(m[triTable[g][k+2]]);return{trianglePoints:a,
triangleNormals:b}};function polygonizeGridCellSnapMC(a,b,g,f,m,k){var c=!1;if(a.f[0]<b)for(var l=1;8>l;l++)a.f[l]>=b&&(c=!0);else for(l=1;8>l;l++)a.f[l]<b&&(c=!0);if(!c)return{trianglePoints:[],triangleNormals:[]};for(l=c=0;8>l;l++)a.f[l]>b?c+=positive[l]:a.f[l]==b&&(c+=equals[l]);l=[];for(var e=[],d,h,n=0;n<isoTable[c].length;n++)if(8>isoTable[c][n]){h=f;var p=m,r=k;d=isoTable[c][n];for(var q=0;3>q;q++){if(1==d%2)switch(q){case 0:r++;break;case 1:p++;break;case 2:h++}d=Math.floor(d/2)}void 0!=g.snapBackTo&&void 0!=
g.snapBackTo[h]&&void 0!=g.snapBackTo[h][p]&&void 0!=g.snapBackTo[h][p][r]?(d=snapBack(a.v[isoTable[c][n]],g.snapBackTo[h][p][r],g.weights[h][p][r]),l.push(d),h=snapBackNormal(a.n[isoTable[c][n]],g.snapBackToNormals[h][p][r],g.weights[h][p][r])):(d=a.v[isoTable[c][n]],l.push(d),h=a.n[isoTable[c][n]]);e.push(h)}else switch(isoTable[c][n]){case 8:d=vertexInterpIsoSnapMC(b,a.v[0],a.v[1],a.f[0],a.f[1]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[0],a.n[1],a.f[0],a.f[1]));break;case 9:d=vertexInterpIsoSnapMC(b,
a.v[0],a.v[2],a.f[0],a.f[2]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[0],a.n[2],a.f[0],a.f[2]));break;case 10:d=vertexInterpIsoSnapMC(b,a.v[1],a.v[3],a.f[1],a.f[3]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[1],a.n[3],a.f[1],a.f[3]));break;case 11:d=vertexInterpIsoSnapMC(b,a.v[2],a.v[3],a.f[2],a.f[3]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[2],a.n[3],a.f[2],a.f[3]));break;case 12:d=vertexInterpIsoSnapMC(b,a.v[0],a.v[4],a.f[0],a.f[4]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[0],a.n[4],
a.f[0],a.f[4]));break;case 13:d=vertexInterpIsoSnapMC(b,a.v[1],a.v[5],a.f[1],a.f[5]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[1],a.n[5],a.f[1],a.f[5]));break;case 14:d=vertexInterpIsoSnapMC(b,a.v[2],a.v[6],a.f[2],a.f[6]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[2],a.n[6],a.f[2],a.f[6]));break;case 15:d=vertexInterpIsoSnapMC(b,a.v[3],a.v[7],a.f[3],a.f[7]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[3],a.n[7],a.f[3],a.f[7]));break;case 16:d=vertexInterpIsoSnapMC(b,a.v[4],a.v[5],a.f[4],a.f[5]);
l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[4],a.n[5],a.f[4],a.f[5]));break;case 17:d=vertexInterpIsoSnapMC(b,a.v[4],a.v[6],a.f[4],a.f[6]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[4],a.n[6],a.f[4],a.f[6]));break;case 18:d=vertexInterpIsoSnapMC(b,a.v[5],a.v[7],a.f[5],a.f[7]);l.push(d);e.push(normalInterpIsoSnapMC(b,a.n[5],a.n[7],a.f[5],a.f[7]));break;case 19:d=vertexInterpIsoSnapMC(b,a.v[6],a.v[7],a.f[6],a.f[7]),l.push(d),e.push(normalInterpIsoSnapMC(b,a.n[6],a.n[7],a.f[6],a.f[7]))}return{trianglePoints:l,
triangleNormals:e}}function snapBack(a,b,g){var f=new vec3(0,0,0);f.x=a.x+g*(b.x-a.x);f.y=a.y+g*(b.y-a.y);f.z=a.z+g*(b.z-a.z);return f}function snapBackNormal(a,b,g){a=snapBack(a,b,g);return vec3normalize(a)}function vertexInterpIsoSnapMC(a,b,g,f,m){a=(a-f)/(m-f);f=new vec3(0,0,0);f.x=b.x+a*(g.x-b.x);f.y=b.y+a*(g.y-b.y);f.z=b.z+a*(g.z-b.z);return f}function normalInterpIsoSnapMC(a,b,g,f,m){a=vertexInterpIsoSnapMC(a,b,g,f,m);return vec3normalize(a)}
var positive=[2,6,18,54,162,486,1458,4374],equals=[1,3,9,27,81,243,729,2187],isoTable=[[],[],[8,12,9],[],[],[1,12,9],[8,10,13],[0,10,13],[10,12,9,13,12,10],[],[],[2,8,12],[],[1,0,2],[1,12,2],[2,13,8,2,10,13],[0,2,13,10,13,2],[13,12,2,10,13,2],[9,14,11],[0,14,11],[11,8,12,14,11,12],[11,1,14,1,9,14],[1,14,11,1,0,14],[1,14,11,1,12,14],[11,10,13,14,11,13,14,13,9,9,13,8],[0,14,13,10,13,11,11,13,14],[10,13,11,13,14,11,13,12,14],[],[],[3,8,12,3,12,9],[],[1,0,3],[1,12,3,9,3,12],[3,13,8],[0,3,13],[9,3,12,
13,12,3],[],[2,3,0],[2,3,12,8,12,3],[2,3,1],[1,0,2,1,2,3],[1,12,3,3,12,2],[2,3,13,2,13,8],[0,2,13,3,13,2],[3,12,2,13,12,3],[3,9,14],[0,14,3],[8,12,3,14,3,12],[9,14,1,1,14,3],[1,14,3,1,0,14],[1,12,3,3,12,14],[9,13,8,14,13,9,14,3,13],[0,14,13,3,13,14],[13,14,3,13,12,14],[10,11,15],[11,15,0,0,15,10],[11,12,9,15,12,11,15,10,12,10,8,12],[1,11,15],[1,0,15,0,11,15],[1,12,15,9,11,12,11,15,12],[11,13,8,15,13,11],[0,15,13,0,11,15],[9,11,12,11,15,12,13,12,15],[2,15,10],[2,15,0,0,15,10],[2,15,12,8,12,10,10,12,
15],[2,15,1],[1,0,15,0,2,15],[1,12,15,15,12,2],[2,15,13,2,13,8],[0,2,13,15,13,2],[15,12,2,13,12,15],[10,9,14,15,10,14],[0,14,15,0,15,10],[8,12,10,10,12,15,14,15,12],[9,14,1,1,14,15],[1,14,15,1,0,14],[1,12,15,15,12,14],[9,13,8,14,13,9,14,15,13],[0,14,13,15,13,14],[13,14,15,13,12,14],[],[],[4,9,8],[],[1,4,0],[1,4,9],[4,8,10,4,10,13],[0,10,4,13,4,10],[10,4,9,13,4,10],[],[2,0,4],[2,8,4],[],[1,4,2],[1,4,2],[2,10,4,2,4,8,10,13,4],[10,4,2,13,4,10],[10,4,2,13,4,10],[4,11,9,4,14,11],[0,4,11,14,11,4],[11,8,
4,14,11,4],[14,11,4,11,1,4,1,9,4],[1,4,11,11,4,14],[1,4,11,11,4,14],[11,13,14,11,10,13,14,13,4,9,4,8],[10,13,11,13,14,11,13,4,14],[10,13,11,13,14,11,13,4,14],[],[],[3,4,9,3,8,4],[],[1,4,3,0,3,4],[1,4,3,9,3,4],[3,13,4,3,4,8],[0,3,4,13,4,3],[9,3,4,13,4,3],[],[2,3,4,0,4,3],[2,3,4,8,4,3],[2,3,4,2,4,1,1,4,3],[1,4,3,3,4,2],[1,4,3,3,4,2],[2,3,4,2,4,8,13,4,3],[3,4,2,13,4,3],[3,4,2,13,4,3],[3,4,14,3,9,4],[0,4,3,14,3,4],[8,4,3,14,3,4],[9,4,1,1,4,3,14,3,4],[1,4,3,3,4,14],[1,4,3,3,4,14],[9,4,8,13,4,3,14,3,4],
[3,4,14,13,4,3],[3,4,14,13,4,3],[4,15,10,4,10,11,4,11,15],[0,4,10,11,4,0,15,4,11,15,10,4],[10,8,4,15,10,4,15,4,11,11,4,9],[1,11,4,15,1,4,15,4,11],[1,4,15,0,11,4,11,15,4],[1,4,15,9,11,4,11,15,4],[11,4,8,15,4,11,15,13,4],[0,11,4,11,15,4,13,4,15],[9,11,4,11,15,4,13,4,15],[2,4,10,15,4,2,15,10,4],[2,15,4,0,4,10,10,4,15],[2,15,4,8,4,10,10,4,15],[2,15,4,2,4,1,1,4,15],[1,4,15,15,4,2],[1,4,15,15,4,2],[2,15,4,2,4,8,13,4,15],[15,4,2,13,4,15],[15,4,2,13,4,15],[10,9,4,15,10,4,15,4,14],[0,4,10,10,4,15,14,15,4],
[8,4,10,10,4,15,14,15,4],[9,4,1,1,4,15,14,15,4],[1,4,15,15,4,14],[1,4,15,15,4,14],[9,4,8,13,4,15,14,15,4],[13,4,15,15,4,14],[13,4,15,15,4,14],[12,16,17],[0,16,17],[16,9,8,17,9,16],[16,17,1,1,17,12],[1,16,17,1,17,0],[1,16,17,1,17,9],[16,10,13,17,10,16,17,12,10,12,8,10],[0,10,17,13,16,10,16,17,10],[13,16,10,16,17,10,10,17,9],[17,2,16,2,12,16],[2,16,17,2,0,16],[2,16,17,2,8,16],[2,12,1,2,1,16,2,16,17],[1,16,2,16,17,2],[1,16,2,16,17,2],[2,12,8,2,10,17,17,10,16,10,13,16],[10,17,2,10,16,17,13,16,10],[10,
17,2,10,16,17,13,16,10],[16,14,11,17,14,16,16,11,12,12,11,9],[0,16,11,14,16,17,14,11,16],[14,16,17,14,11,16,11,8,16],[14,11,16,14,16,17,11,1,16,1,9,12],[1,16,11,11,16,14,16,17,14],[1,16,11,11,16,14,16,17,14],[11,13,14,11,10,13,14,16,17,14,13,16,9,12,8],[10,13,11,13,14,11,13,16,14,16,17,14],[10,13,11,13,14,11,13,16,14,16,17,14],[17,3,16,17,12,3,3,12,16],[3,16,17,3,17,0,3,0,16],[3,16,17,3,17,9,3,8,16],[3,17,12,3,16,17,3,1,16,3,12,1],[1,16,3,0,3,17,16,17,3],[1,16,3,9,3,17,16,17,3],[3,17,12,3,16,17,3,
13,16,3,12,8],[0,3,17,16,17,3,13,16,3],[9,3,17,16,17,3,13,16,3],[3,16,17,3,17,2,3,2,12,3,12,16],[2,3,17,0,16,3,16,17,3],[2,3,17,8,16,3,16,17,3],[2,3,17,2,12,1,1,16,3,16,17,3],[1,16,3,3,17,2,16,17,3],[1,16,3,3,17,2,16,17,3],[2,3,17,2,12,8,13,16,3,16,17,3],[3,17,2,16,17,3,13,16,3],[3,17,2,16,17,3,13,16,3],[3,12,16,3,16,17,3,17,14,3,9,12],[0,16,3,17,3,16,14,3,17],[8,16,3,17,3,16,14,3,17],[9,12,1,1,16,3,17,3,16,14,3,17],[1,16,3,3,17,14,3,16,17],[1,16,3,3,17,14,3,16,17],[9,12,8,13,16,3,17,3,16,14,3,17],
[3,17,14,3,16,17,13,16,3],[3,17,14,3,16,17,13,16,3],[17,12,11,17,11,15,17,15,16,16,15,10,16,10,12,12,10,11],[0,16,10,15,16,17,15,17,11,11,17,0,15,10,16],[10,8,16,15,10,16,15,16,17,15,17,11,11,17,9],[1,11,12,12,11,17,15,17,11,15,16,17,15,1,16],[1,16,15,0,11,17,11,15,17,16,17,15],[1,16,15,9,11,17,16,17,15,11,15,17],[11,12,8,11,17,12,15,17,11,15,16,17,15,13,16],[0,11,17,11,15,17,16,17,15,13,16,15],[9,11,17,16,17,15,13,16,15,11,15,17],[2,12,10,15,16,17,15,17,2,15,10,16,12,16,10],[2,15,17,0,16,10,10,16,
15,16,17,15],[2,15,17,8,16,10,16,17,15,10,16,15],[2,15,17,2,12,1,1,16,15,16,17,15],[1,16,15,15,17,2,16,17,15],[1,16,15,15,17,2,16,17,15],[2,15,17,2,12,8,13,16,15,16,17,15],[15,17,2,13,16,15,16,17,15],[15,17,2,13,16,15,16,17,15],[10,9,12,10,12,16,15,10,16,15,16,17,15,17,14],[0,16,10,10,16,15,16,17,15,14,15,17],[8,16,10,16,17,15,10,16,15,14,15,17],[9,12,1,1,16,15,14,15,17,16,17,15],[1,16,15,15,17,14,16,17,15],[1,16,15,15,17,14,16,17,15],[9,12,8,13,16,15,16,17,15,14,15,17],[13,16,15,16,17,15,15,17,14],
[13,16,15,16,17,15,15,17,14],[],[],[5,9,8,5,12,9],[],[1,5,0],[1,5,9,12,9,5],[5,8,10],[0,10,5],[12,9,5,10,5,9],[],[],[2,5,12,2,8,5],[],[1,5,2,0,2,5],[1,5,2,12,2,5],[2,10,5,2,5,8],[0,2,5,10,5,2],[12,2,5,10,5,2],[5,9,14,5,11,9,5,14,11],[0,5,11,14,5,0,14,11,5],[11,8,5,14,11,5,14,5,12],[1,9,5,11,1,5,14,11,5,14,5,9],[1,5,11,0,14,5,11,5,14],[1,5,11,12,14,5,11,5,14],[9,5,8,14,5,9,14,11,5,11,10,5],[0,14,5,10,5,11,11,5,14],[12,14,5,11,5,14,10,5,11],[],[],[3,5,9,3,8,5,9,5,12],[3,5,1],[0,3,5],[9,3,5,12,9,5],
[3,5,8],[0,3,5],[9,3,5,12,9,5],[],[2,3,5,2,5,0,0,5,3],[2,3,5,2,5,12,8,5,3],[2,3,5,2,5,1],[0,2,5,3,5,2],[12,2,5,3,5,2],[2,3,5,2,5,8],[0,2,5,3,5,2],[12,2,5,3,5,2],[3,5,14,3,9,5,14,5,9],[14,5,0,14,3,5,0,5,3],[14,5,12,14,3,5,8,5,3],[9,5,1,14,5,9,14,3,5],[0,14,5,3,5,14],[12,14,5,3,5,14],[9,5,8,14,5,9,14,3,5],[0,14,5,3,5,14],[12,14,5,3,5,14],[5,10,11,5,11,15],[15,5,11,11,5,0,0,5,10],[11,15,12,11,12,9,15,5,12,10,8,5],[1,11,5,15,5,11],[0,11,5,11,15,5],[9,11,12,12,11,15,12,15,5],[11,5,8,15,5,11],[0,11,5,11,
15,5],[9,11,12,12,11,15,12,15,5],[15,5,2,2,5,10],[2,15,5,2,5,0,0,5,10],[2,15,5,2,5,12,8,5,10],[2,15,5,2,5,1],[0,2,5,15,5,2],[12,2,5,15,5,2],[2,15,5,2,5,8],[0,2,5,15,5,2],[12,2,5,15,5,2],[15,5,14,14,5,9,10,9,5],[14,5,0,14,15,5,0,5,10],[14,5,12,14,15,5,8,5,10],[9,5,1,14,5,9,14,15,5],[0,14,5,15,5,14],[12,14,5,15,5,14],[9,5,8,14,5,9,14,15,5],[0,14,5,15,5,14],[12,14,5,15,5,14],[],[4,0,5],[4,9,5,8,5,9],[4,1,5],[1,4,0,1,5,4],[1,5,9,5,4,9],[4,10,5,4,8,10],[0,10,4,5,4,10],[5,4,9,10,5,9],[],[2,5,4,2,0,5],[2,
5,4,2,8,5],[2,4,1,2,5,4,2,1,5],[1,5,2,5,4,2],[1,5,2,5,4,2],[2,4,8,2,5,4,2,10,5],[5,4,2,10,5,2],[5,4,2,10,5,2],[4,14,5,4,5,9,11,9,5,14,11,5],[11,0,5,14,11,5,14,5,4],[11,8,5,14,11,5,14,5,4],[9,4,1,11,1,5,14,11,5,14,5,4],[1,5,11,11,5,14,5,4,14],[1,5,11,11,5,14,5,4,14],[9,4,8,11,10,5,14,11,5,14,5,4],[10,5,11,11,5,14,5,4,14],[10,5,11,11,5,14,5,4,14],[],[3,4,0,3,5,4,3,0,5],[3,4,9,3,5,4,3,8,5],[3,4,1,3,5,4],[0,3,4,5,4,3],[9,3,4,5,4,3],[3,4,8,3,5,4],[0,3,4,5,4,3],[9,3,4,5,4,3],[],[2,3,4,0,5,3,5,4,3],[2,3,
4,8,5,3,5,4,3],[2,3,4,2,4,1,5,4,3],[3,4,2,5,4,3],[3,4,2,5,4,3],[2,3,4,2,4,8,5,4,3],[3,4,2,5,4,3],[3,4,2,5,4,3],[3,5,14,3,9,5,5,9,4,14,5,4],[0,5,3,5,14,3,5,4,14],[8,5,3,5,14,3,5,4,14],[9,4,1,5,14,3,5,4,14],[5,14,3,5,4,14],[5,14,3,5,4,14],[9,4,8,5,14,3,5,4,14],[5,14,3,5,4,14],[5,14,3,5,4,14],[4,15,5,4,5,10,4,10,11,4,11,15],[10,0,5,11,4,0,15,4,11,15,5,4],[10,8,5,11,4,9,15,4,11,15,5,4],[11,4,1,15,4,11,15,5,4],[0,11,4,11,15,4,5,4,15],[9,11,4,11,15,4,5,4,15],[11,4,8,15,4,11,15,5,4],[0,11,4,11,15,4,5,4,
15],[9,11,4,11,15,4,5,4,15],[5,10,4,15,5,4,15,4,2,2,4,10],[2,15,4,0,5,10,5,4,15],[2,15,4,8,5,10,5,4,15],[2,15,4,2,4,1,5,4,15],[15,4,2,5,4,15],[15,4,2,5,4,15],[2,15,4,2,4,8,5,4,15],[15,4,2,5,4,15],[15,4,2,5,4,15],[15,5,14,14,5,4,5,9,4,10,9,5],[0,5,10,5,14,15,5,4,14],[8,5,10,5,14,15,5,4,14],[9,4,1,5,14,15,5,4,14],[5,14,15,5,4,14],[5,14,15,5,4,14],[9,4,8,5,14,15,5,4,14],[5,14,15,5,4,14],[5,14,15,5,4,14],[5,17,12],[0,5,17],[8,5,9,17,9,5],[12,1,17,1,5,17],[1,5,17,1,17,0],[1,5,9,5,17,9],[12,8,10,17,12,
10,17,10,5],[0,10,17,5,17,10],[10,5,17,10,17,9],[17,2,5,2,12,5],[2,5,17,2,0,5],[2,5,17,2,8,5],[2,5,17,2,1,5,2,12,1],[1,5,2,5,17,2],[1,5,2,5,17,2],[2,5,17,2,10,5,2,12,8],[5,17,2,10,5,2],[5,17,2,10,5,2],[17,14,5,14,11,5,11,9,5,12,5,9],[11,0,5,14,11,5,14,5,17],[11,8,5,14,11,5,14,5,17],[9,12,1,11,1,5,14,11,5,14,5,17],[1,5,11,11,5,14,5,17,14],[1,5,11,11,5,14,5,17,14],[9,12,8,11,10,5,14,11,5,14,5,17],[10,5,11,11,5,14,5,17,14],[10,5,11,11,5,14,5,17,14],[17,12,3,17,3,5,3,12,5],[3,5,17,3,17,0,3,0,5],[3,5,
17,3,17,9,3,8,5],[3,5,17,3,17,12,3,12,1],[0,3,17,5,17,3],[9,3,17,5,17,3],[3,5,17,3,17,12,3,12,8],[0,3,17,5,17,3],[9,3,17,5,17,3],[3,5,17,3,17,2,3,2,12,3,12,5],[2,3,17,0,5,3,5,17,3],[2,3,17,8,5,3,5,17,3],[2,3,17,2,12,1,5,17,3],[3,17,2,5,17,3],[3,17,2,5,17,3],[2,3,17,2,12,8,5,17,3],[3,17,2,5,17,3],[3,17,2,5,17,3],[3,5,14,3,9,5,5,9,12,14,5,17],[0,5,3,5,14,3,5,17,14],[8,5,3,5,14,3,5,17,14],[9,12,1,5,14,3,5,17,14],[5,14,3,5,17,14],[5,14,3,5,17,14],[9,12,8,5,14,3,5,17,14],[5,14,3,5,17,14],[5,14,3,5,17,
14],[17,12,11,17,11,15,17,15,5,12,10,11,12,5,10],[10,0,5,15,5,17,15,17,11,11,17,0],[10,8,5,15,5,17,15,17,11,11,17,9],[15,5,17,15,17,11,11,17,12,11,12,1],[0,11,17,11,15,17,5,17,15],[9,11,17,5,17,15,11,15,17],[15,5,17,15,17,11,11,17,12,11,12,8],[0,11,17,11,15,17,5,17,15],[9,11,17,5,17,15,11,15,17],[5,10,12,15,17,2,15,5,17,2,12,10],[2,15,17,0,5,10,5,17,15],[2,15,17,8,5,10,5,17,15],[2,15,17,2,12,1,5,17,15],[15,17,2,5,17,15],[15,17,2,5,17,15],[2,15,17,2,12,8,5,17,15],[15,17,2,5,17,15],[15,17,2,5,17,15],
[15,5,17,15,17,14,10,12,5,10,9,12],[0,5,10,5,17,15,17,14,15],[8,5,10,5,17,15,17,14,15],[9,12,1,5,17,15,17,14,15],[5,17,15,17,14,15],[5,17,15,17,14,15],[9,12,8,5,17,15,17,14,15],[5,17,15,17,14,15],[5,17,15,17,14,15],[13,18,16],[16,0,18,0,13,18],[16,12,9,18,16,9,18,9,13,13,9,8],[1,18,16],[1,18,0,0,18,16],[1,18,9,12,9,16,16,9,18],[16,8,10,18,16,10],[0,10,18,0,18,16],[12,9,16,16,9,18,10,18,9],[18,16,2,18,2,13,2,16,13],[2,13,18,2,18,16,2,16,0,2,0,13],[2,13,18,2,18,16,2,16,12,2,8,13],[2,18,16,2,1,18,2,
16,1],[1,18,2,0,2,16,16,2,18],[1,18,2,12,2,16,16,2,18],[2,18,16,2,10,18,2,16,8],[0,2,16,16,2,18,10,18,2],[12,2,16,16,2,18,10,18,2],[18,11,13,18,14,11,18,16,14,16,9,14,16,13,9,13,11,9],[0,13,11,13,18,11,14,11,18,14,18,16,14,16,0],[11,8,13,11,13,18,14,11,18,14,18,16,14,16,12],[1,9,16,14,18,16,14,11,18,11,1,18,14,16,9],[1,18,11,0,14,16,11,18,14,16,14,18],[1,18,11,12,14,16,16,14,18,11,18,14],[9,16,8,14,16,9,14,18,16,14,11,18,11,10,18],[0,14,16,10,18,11,16,14,18,11,18,14],[12,14,16,16,14,18,11,18,14,10,
18,11],[18,16,3,3,16,13],[3,0,13,3,16,0,3,18,16],[3,8,13,3,18,9,18,16,9,9,16,12],[3,18,16,3,16,1],[0,3,16,16,3,18],[9,3,18,9,18,16,12,9,16],[3,18,16,3,16,8],[0,3,16,16,3,18],[9,3,18,9,18,16,12,9,16],[3,2,13,3,18,2,2,18,16,2,16,13],[2,3,18,2,18,16,2,16,0,0,13,3],[2,3,18,2,18,16,2,16,12,8,13,3],[2,3,18,2,18,16,2,16,1],[0,2,16,16,2,18,3,18,2],[12,2,16,16,2,18,3,18,2],[2,3,18,2,18,16,2,16,8],[0,2,16,16,2,18,3,18,2],[12,2,16,16,2,18,3,18,2],[3,9,13,3,18,14,14,18,16,14,16,9,13,9,16],[14,16,0,14,18,16,14,
3,18,0,13,3],[14,16,12,14,18,16,14,3,18,8,13,3],[9,16,1,14,16,9,14,18,16,14,3,18],[0,14,16,3,18,14,16,14,18],[12,14,16,16,14,18,3,18,14],[9,16,8,14,16,9,14,18,16,14,3,18],[0,14,16,3,18,14,16,14,18],[12,14,16,16,14,18,3,18,14],[16,11,15,18,16,15,16,13,11,13,10,11],[15,16,11,15,18,16,11,16,0,0,13,10],[11,15,12,11,12,9,15,18,16,15,16,12,10,8,13],[1,11,16,15,18,16,15,16,11],[0,11,16,11,15,16,16,15,18],[9,11,12,12,11,15,12,15,16,16,15,18],[15,18,16,15,16,11,11,16,8],[0,11,16,11,15,16,16,15,18],[9,11,12,
12,11,15,12,15,16,16,15,18],[15,18,2,18,16,2,2,16,13,2,13,10],[2,15,18,2,18,16,2,16,0,0,13,10],[2,15,18,2,18,16,2,16,12,8,13,10],[2,15,18,2,18,16,2,16,1],[0,2,16,18,16,2,15,18,2],[12,2,16,18,16,2,15,18,2],[2,15,18,2,18,16,2,16,8],[0,2,16,18,16,2,15,18,2],[12,2,16,18,16,2,15,18,2],[15,18,14,14,18,16,14,16,9,13,9,16,10,9,13],[14,16,0,14,18,16,14,15,18,0,13,10],[14,16,12,14,18,16,14,15,18,8,13,10],[9,16,1,14,16,9,14,18,16,14,15,18],[0,14,16,15,18,14,16,14,18],[12,14,16,16,14,18,15,18,14],[9,16,8,14,
16,9,14,18,16,14,15,18],[0,14,16,15,18,14,16,14,18],[12,14,16,16,14,18,15,18,14],[4,13,18],[4,0,18,0,13,18],[4,9,18,8,13,9,13,18,9],[4,1,18],[1,18,0,0,18,4],[1,18,9,18,4,9],[4,10,18,4,8,10],[0,10,4,18,4,10],[18,4,9,10,18,9],[4,13,2,4,2,18,2,13,18],[2,18,4,2,13,18,2,0,13],[2,18,4,2,13,18,2,8,13],[2,4,1,2,18,4,2,1,18],[1,18,2,18,4,2],[1,18,2,18,4,2],[2,4,8,2,18,4,2,10,18],[18,4,2,10,18,2],[18,4,2,10,18,2],[4,13,9,4,14,18,14,11,18,11,9,13,11,13,18],[11,0,13,11,13,18,14,11,18,14,18,4],[11,8,13,11,13,
18,14,11,18,14,18,4],[9,4,1,11,1,18,14,11,18,14,18,4],[1,18,11,11,18,14,18,4,14],[1,18,11,11,18,14,18,4,14],[9,4,8,11,10,18,14,11,18,14,18,4],[10,18,11,18,4,14,11,18,14],[10,18,11,18,4,14,11,18,14],[4,13,3,4,3,18],[3,4,0,3,18,4,3,0,13],[3,4,9,3,18,4,3,8,13],[3,4,1,3,18,4],[0,3,4,18,4,3],[9,3,4,18,4,3],[3,4,8,3,18,4],[0,3,4,18,4,3],[9,3,4,18,4,3],[3,18,2,3,2,13,18,4,2,2,4,13],[2,3,18,2,18,4,0,13,3],[2,3,18,2,18,4,8,13,3],[2,3,18,2,18,4,2,4,1],[18,4,2,3,18,2],[18,4,2,3,18,2],[2,3,18,2,18,4,2,4,8],[18,
4,2,3,18,2],[18,4,2,3,18,2],[3,18,14,3,9,13,14,18,4,13,9,4],[0,13,3,18,4,14,18,14,3],[8,13,3,18,4,14,18,14,3],[9,4,1,18,4,14,18,14,3],[18,14,3,18,4,14],[18,14,3,18,4,14],[9,4,8,18,4,14,18,14,3],[18,14,3,18,4,14],[18,14,3,18,4,14],[4,13,10,4,10,11,4,11,15,4,15,18],[10,0,13,11,4,0,15,4,11,15,18,4],[10,8,13,11,4,9,15,4,11,15,18,4],[11,4,1,15,4,11,15,18,4],[0,11,4,11,15,4,18,4,15],[9,11,4,11,15,4,18,4,15],[11,4,8,15,4,11,15,18,4],[0,11,4,11,15,4,18,4,15],[9,11,4,11,15,4,18,4,15],[15,18,4,15,4,2,2,4,10,
13,10,4],[2,15,4,0,13,10,18,4,15],[2,15,4,8,13,10,18,4,15],[2,15,4,2,4,1,18,4,15],[15,4,2,18,4,15],[15,4,2,18,4,15],[2,15,4,2,4,8,18,4,15],[15,4,2,18,4,15],[15,4,2,18,4,15],[15,18,14,14,18,4,13,9,4,10,9,13],[0,13,10,18,4,14,18,14,15],[8,13,10,18,4,14,18,14,15],[9,4,1,18,4,14,18,14,15],[18,4,14,18,14,15],[18,4,14,18,14,15],[9,4,8,18,4,14,18,14,15],[18,4,14,18,14,15],[18,4,14,18,14,15],[13,17,12,18,17,13],[0,18,17,0,13,18],[8,13,9,13,18,9,17,9,18],[12,1,17,1,18,17],[1,18,17,1,17,0],[1,18,9,18,17,9],
[12,8,10,17,12,10,17,10,18],[0,10,17,18,17,10],[10,18,17,10,17,9],[17,2,18,2,13,18,2,12,13],[2,18,17,2,13,18,2,0,13],[2,18,17,2,13,18,2,8,13],[2,18,17,2,1,18,2,12,1],[1,18,2,18,17,2],[1,18,2,18,17,2],[2,18,17,2,10,18,2,12,8],[18,17,2,10,18,2],[18,17,2,10,18,2],[17,14,18,11,13,18,14,11,18,11,9,13,12,13,9],[11,0,13,11,13,18,14,11,18,14,18,17],[11,8,13,11,13,18,14,11,18,14,18,17],[9,12,1,11,1,18,14,11,18,14,18,17],[1,18,11,11,18,14,18,17,14],[1,18,11,11,18,14,18,17,14],[9,12,8,11,10,18,14,11,18,14,18,
17],[10,18,11,18,17,14,11,18,14],[10,18,11,18,17,14,11,18,14],[17,12,3,17,3,18,3,12,13],[3,18,17,3,17,0,3,0,13],[3,18,17,3,17,9,3,8,13],[3,18,17,3,17,12,3,12,1],[0,3,17,18,17,3],[9,3,17,18,17,3],[3,18,17,3,17,12,3,12,8],[0,3,17,18,17,3],[9,3,17,18,17,3],[3,18,17,3,17,2,3,2,12,3,12,13],[2,3,17,0,13,3,18,17,3],[2,3,17,8,13,3,18,17,3],[2,3,17,2,12,1,18,17,3],[3,17,2,18,17,3],[3,17,2,18,17,3],[2,3,17,2,12,8,18,17,3],[3,17,2,18,17,3],[3,17,2,18,17,3],[3,18,14,3,9,13,14,18,17,13,9,12],[0,13,3,18,17,14,
18,14,3],[8,13,3,18,17,14,18,14,3],[9,12,1,18,17,14,18,14,3],[18,14,3,18,17,14],[18,14,3,18,17,14],[9,12,8,18,17,14,18,14,3],[18,14,3,18,17,14],[18,14,3,18,17,14],[17,12,11,17,11,15,17,15,18,12,10,11,12,13,10],[10,0,13,15,18,17,15,17,11,11,17,0],[10,8,13,15,18,17,15,17,11,11,17,9],[15,18,17,15,17,11,11,17,12,11,12,1],[0,11,17,11,15,17,18,17,15],[9,11,17,11,15,17,18,17,15],[15,18,17,15,17,11,11,17,12,11,12,8],[0,11,17,11,15,17,18,17,15],[9,11,17,11,15,17,18,17,15],[15,17,2,15,18,17,2,12,10,13,10,12],
[2,15,17,0,13,10,18,17,15],[2,15,17,8,13,10,18,17,15],[2,15,17,2,12,1,18,17,15],[15,17,2,18,17,15],[15,17,2,18,17,15],[2,15,17,2,12,8,18,17,15],[15,17,2,18,17,15],[15,17,2,18,17,15],[15,18,17,15,17,14,10,12,13,10,9,12],[0,13,10,17,14,15,18,17,15],[8,13,10,17,14,15,18,17,15],[9,12,1,17,14,15,18,17,15],[17,14,15,18,17,15],[17,14,15,18,17,15],[9,12,8,17,14,15,18,17,15],[17,14,15,18,17,15],[17,14,15,18,17,15],[],[],[6,8,12,6,9,8],[],[],[1,12,6,1,6,9],[6,13,8,6,8,10,6,10,13],[0,10,6,13,0,6,13,6,10],[10,
6,9,13,6,10,13,12,6],[],[2,0,6],[2,8,6,12,6,8],[],[1,6,2,1,0,6],[1,6,2,1,12,6],[2,10,6,2,6,8,10,13,6,13,8,6],[13,0,6,13,6,10,10,6,2],[13,12,6,13,6,10,10,6,2],[6,11,9],[0,6,11],[12,6,8,11,8,6],[11,1,6,1,9,6],[1,6,11,1,0,6],[1,6,11,1,12,6],[11,10,6,10,13,6,13,8,6,9,6,8],[13,0,6,13,6,10,10,6,11],[13,12,6,13,6,10,10,6,11],[],[],[3,6,9,3,8,6,12,6,8],[],[1,6,3,1,0,6,0,3,6],[1,6,3,1,12,6,9,3,6],[3,13,6,3,6,8,13,8,6],[13,0,6,13,6,3,0,3,6],[13,12,6,13,6,3,9,3,6],[3,2,6],[0,6,3],[8,6,3,12,6,8],[2,6,1,1,6,3],
[1,6,3,1,0,6],[1,6,3,1,12,6],[2,6,8,8,6,13,13,6,3],[13,0,6,13,6,3],[13,12,6,13,6,3],[3,9,6],[0,6,3],[8,6,3,12,6,8],[9,6,1,1,6,3],[1,6,3,1,0,6],[1,6,3,1,12,6],[8,6,13,9,6,8,13,6,3],[13,0,6,13,6,3],[13,12,6,13,6,3],[6,15,10,6,10,11],[11,6,0,0,6,10,15,10,6],[11,6,9,10,8,12,10,12,15,15,12,6],[15,1,6,1,11,6],[1,6,15,1,0,6,0,11,6],[1,6,15,1,12,6,9,11,6],[15,13,6,13,8,6,11,6,8],[13,0,6,13,6,15,0,11,6],[13,12,6,13,6,15,9,11,6],[2,6,10,15,10,6],[0,6,10,10,6,15],[8,12,10,12,15,10,12,6,15],[2,6,1,1,6,15],[1,
6,15,1,0,6],[1,6,15,1,12,6],[2,6,8,8,6,13,13,6,15],[13,0,6,13,6,15],[13,12,6,13,6,15],[10,9,6,15,10,6],[0,6,10,10,6,15],[8,12,10,12,15,10,12,6,15],[9,6,1,1,6,15],[1,6,15,1,0,6],[1,6,15,1,12,6],[8,6,13,9,6,8,13,6,15],[13,0,6,13,6,15],[13,12,6,13,6,15],[],[4,6,0],[4,6,8,9,8,6],[],[1,4,6,1,6,0],[1,4,6,1,6,9],[4,6,13,4,8,6,10,6,8,13,6,10],[10,6,0,13,6,10,13,4,6],[10,6,9,13,6,10,13,4,6],[4,6,2],[2,0,4,2,4,6],[2,8,6,6,8,4],[2,4,1,2,1,6,1,4,6],[1,6,2,1,4,6],[1,6,2,1,4,6],[2,4,8,2,10,6,10,13,6,13,4,6],[10,
6,2,13,6,10,13,4,6],[10,6,2,13,6,10,13,4,6],[4,6,11,4,11,9],[0,4,11,6,11,4],[6,8,4,11,8,6],[9,4,1,1,4,6,11,1,6],[1,6,11,1,4,6],[1,6,11,1,4,6],[9,4,8,10,13,6,11,10,6,13,4,6],[10,6,11,13,6,10,13,4,6],[10,6,11,13,6,10,13,4,6],[],[3,0,4,3,4,6,3,6,0],[3,8,4,3,4,6,3,6,9],[],[1,4,3,0,3,6,6,3,4],[1,4,3,9,3,6,6,3,4],[3,13,6,3,6,8,6,4,8,13,4,6],[0,3,6,6,3,13,6,13,4],[9,3,6,6,3,13,6,13,4],[3,2,4,3,4,6],[0,4,3,6,3,4],[8,4,3,6,3,4],[2,4,1,1,4,3,6,3,4],[1,4,3,3,4,6],[1,4,3,3,4,6],[2,4,8,6,3,13,6,13,4],[3,13,6,
13,4,6],[3,13,6,13,4,6],[3,9,4,3,4,6],[0,4,3,6,3,4],[8,4,3,6,3,4],[9,4,1,1,4,3,6,3,4],[1,4,3,3,4,6],[1,4,3,3,4,6],[9,4,8,6,3,13,6,13,4],[3,13,6,13,4,6],[3,13,6,13,4,6],[4,6,15,4,11,6,4,10,11,4,15,10],[11,6,0,10,0,4,15,10,4,15,4,6],[11,6,9,10,8,4,15,10,4,15,4,6],[6,4,11,15,4,6,15,1,4,1,11,4],[1,4,15,0,11,6,6,15,4],[1,4,15,9,11,6,6,15,4],[15,13,6,13,4,6,6,4,8,11,6,8],[0,11,6,6,15,13,6,13,4],[9,11,6,6,15,13,6,13,4],[10,2,4,15,10,4,15,4,6],[0,4,10,10,4,15,6,15,4],[8,4,10,10,4,15,6,15,4],[2,4,1,1,4,15,
6,15,4],[1,4,15,15,4,6],[1,4,15,15,4,6],[2,4,8,6,15,13,6,13,4],[15,13,6,13,4,6],[15,13,6,13,4,6],[10,9,4,15,10,4,15,4,6],[0,4,10,10,4,15,6,15,4],[8,4,10,10,4,15,6,15,4],[9,4,1,1,4,15,6,15,4],[1,4,15,15,4,6],[1,4,15,15,4,6],[9,4,8,6,15,13,6,13,4],[15,13,6,13,4,6],[15,13,6,13,4,6],[6,12,16],[0,16,6],[9,8,6,16,6,8],[16,6,1,1,6,12],[1,16,6,1,6,0],[1,16,6,1,6,9],[16,6,13,13,6,10,10,6,8,12,8,6],[10,6,0,13,6,10,13,16,6],[10,6,9,13,6,10,13,16,6],[12,16,2,2,16,6],[2,16,6,2,0,16],[2,8,6,6,8,16],[2,1,6,2,12,
1,1,16,6],[1,6,2,1,16,6],[1,6,2,1,16,6],[2,10,6,2,12,8,10,13,6,13,16,6],[10,6,2,13,6,10,13,16,6],[10,6,2,13,6,10,13,16,6],[12,11,9,16,11,12,16,6,11],[0,16,11,6,11,16],[11,16,6,11,8,16],[9,12,1,1,16,6,11,1,6],[1,6,11,1,16,6],[1,6,11,1,16,6],[9,12,8,10,13,6,11,10,6,13,16,6],[10,6,11,13,6,10,13,16,6],[10,6,11,13,6,10,13,16,6],[16,3,12,16,6,3,3,6,12],[3,16,6,3,0,16,3,6,0],[3,16,6,3,8,16,3,6,9],[3,16,6,3,1,16,3,12,1,3,6,12],[1,16,3,0,3,6,6,3,16],[1,16,3,9,3,6,6,3,16],[3,13,6,3,6,8,6,12,8,13,16,6],[0,3,
6,6,3,13,6,13,16],[9,3,6,6,3,13,6,13,16],[3,16,6,3,12,16,3,2,12],[0,16,3,6,3,16],[8,16,3,6,3,16],[2,12,1,1,16,3,6,3,16],[1,16,3,3,16,6],[1,16,3,3,16,6],[2,12,8,6,3,13,6,13,16],[3,13,6,13,16,6],[3,13,6,13,16,6],[3,16,6,3,12,16,3,9,12],[0,16,3,6,3,16],[8,16,3,6,3,16],[9,12,1,1,16,3,6,3,16],[1,16,3,3,16,6],[1,16,3,3,16,6],[9,12,8,6,3,13,6,13,16],[3,13,6,13,16,6],[3,13,6,13,16,6],[16,10,12,16,15,10,16,6,15,12,10,11,12,11,6],[11,6,0,15,16,6,15,10,16,10,0,16],[11,6,9,15,16,6,15,10,16,10,8,16],[6,12,11,
15,1,16,15,16,6,1,11,12],[1,16,15,0,11,6,6,15,16],[1,16,15,9,11,6,6,15,16],[15,16,6,15,13,16,11,6,12,11,12,8],[0,11,6,6,15,16,16,15,13],[9,11,6,6,15,16,16,15,13],[15,16,6,15,10,16,10,12,16,10,2,12],[0,16,10,10,16,15,6,15,16],[8,16,10,6,15,16,10,16,15],[2,12,1,1,16,15,6,15,16],[1,16,15,15,16,6],[1,16,15,15,16,6],[2,12,8,6,15,16,16,15,13],[15,13,16,15,16,6],[15,13,16,15,16,6],[15,16,6,15,10,16,10,12,16,10,9,12],[0,16,10,10,16,15,6,15,16],[8,16,10,6,15,16,10,16,15],[9,12,1,1,16,15,6,15,16],[1,16,15,
15,16,6],[1,16,15,15,16,6],[9,12,8,6,15,16,16,15,13],[15,13,16,15,16,6],[15,13,16,15,16,6],[],[],[5,12,6,5,6,8,9,8,6],[],[1,5,6,1,6,0,0,6,5],[1,5,6,1,6,9,12,6,5],[5,6,10,5,8,6,10,6,8],[10,6,0,10,5,6,0,6,5],[10,6,9,10,5,6,12,6,5],[],[2,0,5,2,5,6,0,6,5],[2,8,5,2,5,6,12,6,5],[],[1,5,2,0,6,5,6,2,5],[1,5,2,6,2,5,12,6,5],[2,10,6,2,6,8,6,5,8,10,5,6],[0,6,5,6,2,10,6,10,5],[6,2,10,6,10,5,12,6,5],[5,6,11,5,9,6,5,11,9],[0,6,5,11,0,5,11,5,6],[11,8,5,11,5,6,12,6,5],[6,5,9,11,5,6,11,1,5,1,9,5],[1,5,11,0,6,5,6,
11,5],[1,5,11,6,11,5,12,6,5],[11,10,6,10,5,6,6,5,8,9,6,8],[0,6,5,6,11,10,6,10,5],[6,11,10,6,10,5,12,6,5],[],[3,0,5,3,5,6,3,6,0,0,6,5],[3,8,5,3,5,6,3,6,9,12,6,5],[3,5,6,3,6,1,1,6,5],[0,6,5,0,3,6,6,3,5],[9,3,6,6,3,5,12,6,5],[3,5,6,3,6,8,8,6,5],[0,6,5,0,3,6,6,3,5],[9,3,6,6,3,5,12,6,5],[3,2,5,3,5,6,2,6,5],[6,5,0,6,3,5,0,5,3],[6,5,12,6,3,5,8,5,3],[2,6,5,2,5,1,6,3,5],[0,6,5,3,5,6],[3,5,6,12,6,5],[2,6,8,8,6,5,6,3,5],[0,6,5,3,5,6],[3,5,6,12,6,5],[3,9,5,3,5,6,9,6,5],[6,5,0,6,3,5,0,5,3],[6,5,12,6,3,5,8,5,3],
[9,5,1,9,6,5,6,3,5],[0,6,5,3,5,6],[3,5,6,12,6,5],[8,6,5,9,6,8,6,3,5],[0,6,5,3,5,6],[3,5,6,12,6,5],[5,6,15,5,10,6,11,6,10],[10,0,5,0,6,5,11,6,0,15,5,6],[10,8,5,11,6,9,12,6,5,15,5,6],[11,6,1,1,6,5,15,5,6],[0,6,5,0,11,6,6,15,5],[9,11,6,6,15,5,12,6,5],[8,6,5,11,6,8,15,5,6],[0,6,5,0,11,6,6,15,5],[9,11,6,6,15,5,12,6,5],[10,2,5,2,6,5,15,5,6],[6,5,0,6,15,5,0,5,10],[6,5,12,6,15,5,8,5,10],[2,6,5,2,5,1,6,15,5],[0,6,5,15,5,6],[15,5,6,12,6,5],[2,6,8,8,6,5,6,15,5],[0,6,5,15,5,6],[15,5,6,12,6,5],[10,9,5,9,6,5,15,
5,6],[6,5,0,6,15,5,0,5,10],[6,5,12,6,15,5,8,5,10],[9,5,1,9,6,5,6,15,5],[0,6,5,15,5,6],[15,5,6,12,6,5],[8,6,5,9,6,8,6,15,5],[0,6,5,15,5,6],[15,5,6,12,6,5],[5,6,4],[0,5,6],[8,5,6,9,8,6],[4,1,6,1,5,6],[1,5,6,1,6,0],[1,5,6,1,6,9],[4,8,6,8,10,6,10,5,6],[10,6,0,10,5,6],[10,6,9,10,5,6],[4,5,2,2,5,6],[2,5,6,2,0,5],[2,5,6,2,8,5],[2,4,1,2,5,6,2,1,5],[1,5,2,5,6,2],[1,5,2,5,6,2],[2,4,8,2,10,6,10,5,6],[10,6,2,5,6,10],[10,6,2,5,6,10],[4,5,9,9,5,11,11,5,6],[11,0,5,11,5,6],[11,8,5,11,5,6],[9,4,1,11,1,5,11,5,6],[1,
5,11,5,6,11],[1,5,11,5,6,11],[9,4,8,10,5,6,11,10,6],[10,6,11,5,6,10],[10,6,11,5,6,10],[4,5,3,4,3,6,3,5,6],[3,5,6,3,6,0,3,0,5],[3,5,6,3,6,9,3,8,5],[3,4,1,3,6,4,3,5,6],[0,3,6,5,6,3],[9,3,6,5,6,3],[3,6,8,3,5,6,8,6,4],[0,3,6,5,6,3],[9,3,6,5,6,3],[3,2,4,3,4,5,3,5,6],[0,5,3,5,6,3],[8,5,3,5,6,3],[2,4,1,5,6,3],[5,6,3],[5,6,3],[2,4,8,5,6,3],[5,6,3],[5,6,3],[3,9,5,3,5,6,9,4,5],[0,5,3,5,6,3],[8,5,3,5,6,3],[9,4,1,5,6,3],[5,6,3],[5,6,3],[9,4,8,5,6,3],[5,6,3],[5,6,3],[4,5,10,4,11,6,4,10,11,15,5,6],[15,5,6,11,6,
0,10,0,5],[15,5,6,11,6,9,10,8,5],[15,5,6,11,6,4,11,4,1],[0,11,6,5,6,15],[9,11,6,5,6,15],[11,6,8,8,6,4,15,5,6],[0,11,6,5,6,15],[9,11,6,5,6,15],[15,5,6,10,4,5,10,2,4],[0,5,10,5,6,15],[8,5,10,5,6,15],[2,4,1,5,6,15],[5,6,15],[5,6,15],[2,4,8,5,6,15],[5,6,15],[5,6,15],[10,9,5,9,4,5,15,5,6],[0,5,10,5,6,15],[8,5,10,5,6,15],[9,4,1,5,6,15],[5,6,15],[5,6,15],[9,4,8,5,6,15],[5,6,15],[5,6,15],[5,6,12],[0,5,6],[8,5,6,9,8,6],[12,1,6,1,5,6],[1,5,6,1,6,0],[1,5,6,1,6,9],[8,10,6,12,8,6,10,5,6],[10,6,0,10,5,6],[10,6,
9,10,5,6],[12,5,2,2,5,6],[2,5,6,2,0,5],[2,5,6,2,8,5],[2,5,6,2,1,5,2,12,1],[1,5,2,5,6,2],[1,5,2,5,6,2],[2,10,6,2,12,8,10,5,6],[10,6,2,5,6,10],[10,6,2,5,6,10],[12,5,9,9,5,11,11,5,6],[11,0,5,11,5,6],[11,8,5,11,5,6],[9,12,1,11,1,5,11,5,6],[1,5,11,5,6,11],[1,5,11,5,6,11],[9,12,8,10,5,6,11,10,6],[10,6,11,5,6,10],[10,6,11,5,6,10],[12,3,6,12,5,3,3,5,6],[3,5,6,3,6,0,3,0,5],[3,5,6,3,6,9,3,8,5],[3,6,12,3,12,1,3,5,6],[0,3,6,5,6,3],[9,3,6,5,6,3],[3,6,8,3,5,6,8,6,12],[0,3,6,5,6,3],[9,3,6,5,6,3],[3,12,5,3,2,12,
3,5,6],[0,5,3,5,6,3],[8,5,3,5,6,3],[2,12,1,5,6,3],[5,6,3],[5,6,3],[2,12,8,5,6,3],[5,6,3],[5,6,3],[3,9,5,3,5,6,9,12,5],[0,5,3,5,6,3],[8,5,3,5,6,3],[9,12,1,5,6,3],[5,6,3],[5,6,3],[9,12,8,5,6,3],[5,6,3],[5,6,3],[12,11,6,12,10,11,12,5,10,15,5,6],[15,5,6,11,6,0,10,0,5],[15,5,6,11,6,9,10,8,5],[15,5,6,11,12,1,11,6,12],[0,11,6,5,6,15],[9,11,6,5,6,15],[11,6,12,11,12,8,15,5,6],[0,11,6,5,6,15],[9,11,6,5,6,15],[15,5,6,10,2,12,10,12,5],[0,5,10,5,6,15],[8,5,10,5,6,15],[2,12,1,5,6,15],[5,6,15],[5,6,15],[2,12,8,
5,6,15],[5,6,15],[5,6,15],[10,12,5,10,9,12,15,5,6],[0,5,10,5,6,15],[8,5,10,5,6,15],[9,12,1,5,6,15],[5,6,15],[5,6,15],[9,12,8,5,6,15],[5,6,15],[5,6,15],[6,13,18,6,16,13],[16,0,6,0,13,6,18,6,13],[16,12,6,9,8,13,9,13,18,9,18,6],[18,6,1,1,6,16],[1,18,6,1,6,0,0,6,16],[1,18,6,1,6,9,12,6,16],[18,6,10,10,6,8,16,8,6],[10,6,0,10,18,6,0,6,16],[10,6,9,10,18,6,12,6,16],[18,2,13,18,6,2,2,6,16,13,2,16],[2,18,6,2,13,18,2,0,13,0,6,16],[2,18,6,2,13,18,2,8,13,12,6,16],[2,18,6,2,1,18,2,16,1,2,6,16],[1,18,2,0,6,16,6,
2,18],[1,18,2,6,2,18,12,6,16],[2,10,6,2,6,8,6,16,8,10,18,6],[0,6,16,6,2,10,6,10,18],[6,2,10,6,10,18,12,6,16],[18,11,13,18,6,11,13,11,9,16,13,9,16,9,6],[0,6,16,11,18,6,11,13,18,11,0,13],[11,18,6,11,13,18,11,8,13,12,6,16],[6,16,9,11,1,18,11,18,6,1,9,16],[1,18,11,0,6,16,6,11,18],[1,18,11,6,11,18,12,6,16],[11,18,6,11,10,18,9,6,16,9,16,8],[0,6,16,6,11,18,18,11,10],[6,11,18,12,6,16,18,11,10],[18,6,3,3,6,13,16,13,6],[3,18,6,3,6,0,3,0,13,0,6,16],[3,18,6,3,6,9,3,8,13,12,6,16],[3,18,6,3,6,1,1,6,16],[0,6,16,
0,3,6,6,3,18],[9,3,6,6,3,18,12,6,16],[3,18,6,3,6,8,8,6,16],[0,6,16,0,3,6,6,3,18],[9,3,6,6,3,18,12,6,16],[3,18,6,3,2,13,13,2,16,2,6,16],[6,16,0,6,3,18,0,13,3],[6,16,12,6,3,18,8,13,3],[2,6,16,2,16,1,6,3,18],[0,6,16,3,18,6],[3,18,6,12,6,16],[2,6,8,8,6,16,6,3,18],[0,6,16,3,18,6],[3,18,6,12,6,16],[3,18,6,3,9,13,13,9,16,9,6,16],[6,16,0,6,3,18,0,13,3],[6,16,12,6,3,18,8,13,3],[9,16,1,9,6,16,6,3,18],[0,6,16,3,18,6],[3,18,6,12,6,16],[9,16,8,9,6,16,6,3,18],[0,6,16,3,18,6],[3,18,6,12,6,16],[18,6,15,11,13,10,
11,16,13,11,6,16],[10,0,13,0,6,16,11,6,0,15,18,6],[10,8,13,11,6,9,12,6,16,15,18,6],[11,6,1,1,6,16,15,18,6],[0,6,16,0,11,6,6,15,18],[9,11,6,6,15,18,12,6,16],[8,6,16,11,6,8,15,18,6],[0,6,16,0,11,6,6,15,18],[9,11,6,6,15,18,12,6,16],[10,2,13,13,2,16,2,6,16,15,18,6],[6,16,0,6,15,18,0,13,10],[6,16,12,6,15,18,8,13,10],[2,6,16,2,16,1,6,15,18],[0,6,16,15,18,6],[15,18,6,12,6,16],[2,6,8,8,6,16,6,15,18],[0,6,16,15,18,6],[15,18,6,12,6,16],[10,9,13,13,9,16,9,6,16,15,18,6],[6,16,0,6,15,18,0,13,10],[6,16,12,6,15,
18,8,13,10],[9,16,1,9,6,16,6,15,18],[0,6,16,15,18,6],[15,18,6,12,6,16],[9,16,8,9,6,16,6,15,18],[0,6,16,15,18,6],[15,18,6,12,6,16],[4,13,6,18,6,13],[0,13,6,13,18,6],[9,8,13,9,13,18,9,18,6],[4,1,6,1,18,6],[1,18,6,1,6,0],[1,18,6,1,6,9],[4,8,6,8,10,6,10,18,6],[10,6,0,10,18,6],[10,6,9,10,18,6],[4,13,2,13,18,2,2,18,6],[2,18,6,2,13,18,2,0,13],[2,18,6,2,13,18,2,8,13],[2,4,1,2,18,6,2,1,18],[1,18,2,18,6,2],[1,18,2,18,6,2],[2,4,8,2,10,6,10,18,6],[10,6,2,18,6,10],[10,6,2,18,6,10],[4,13,9,9,13,11,11,18,6,13,18,
11],[11,0,13,11,13,18,11,18,6],[11,8,13,11,13,18,11,18,6],[9,4,1,11,1,18,11,18,6],[1,18,11,18,6,11],[1,18,11,18,6,11],[9,4,8,11,10,18,11,18,6],[10,18,11,18,6,11],[10,18,11,18,6,11],[4,3,6,4,13,3,3,18,6],[3,18,6,3,6,0,3,0,13],[3,18,6,3,6,9,3,8,13],[3,4,1,3,6,4,3,18,6],[0,3,6,18,6,3],[9,3,6,18,6,3],[3,6,8,3,18,6,8,6,4],[0,3,6,18,6,3],[9,3,6,18,6,3],[3,2,13,3,18,6,13,2,4],[0,13,3,18,6,3],[8,13,3,18,6,3],[2,4,1,18,6,3],[18,6,3],[18,6,3],[2,4,8,18,6,3],[18,6,3],[18,6,3],[3,9,13,3,18,6,9,4,13],[0,13,3,
18,6,3],[8,13,3,18,6,3],[9,4,1,18,6,3],[18,6,3],[18,6,3],[9,4,8,18,6,3],[18,6,3],[18,6,3],[4,11,6,4,10,11,4,13,10,15,18,6],[15,18,6,11,6,0,10,0,13],[15,18,6,11,6,9,10,8,13],[15,18,6,11,6,4,11,4,1],[0,11,6,18,6,15],[9,11,6,18,6,15],[11,6,8,8,6,4,15,18,6],[0,11,6,18,6,15],[9,11,6,18,6,15],[15,18,6,10,4,13,10,2,4],[0,13,10,18,6,15],[8,13,10,18,6,15],[2,4,1,18,6,15],[18,6,15],[18,6,15],[2,4,8,18,6,15],[18,6,15],[18,6,15],[10,9,13,9,4,13,15,18,6],[0,13,10,18,6,15],[8,13,10,18,6,15],[9,4,1,18,6,15],[18,
6,15],[18,6,15],[9,4,8,18,6,15],[18,6,15],[18,6,15],[13,6,12,18,6,13],[0,13,6,13,18,6],[9,8,13,9,13,18,9,18,6],[12,1,6,1,18,6],[1,18,6,1,6,0],[1,18,6,1,6,9],[8,10,6,12,8,6,10,18,6],[10,6,0,10,18,6],[10,6,9,10,18,6],[12,13,2,13,18,2,2,18,6],[2,18,6,2,13,18,2,0,13],[2,18,6,2,13,18,2,8,13],[2,18,6,2,1,18,2,12,1],[1,18,2,18,6,2],[1,18,2,18,6,2],[2,10,6,2,12,8,10,18,6],[10,6,2,18,6,10],[10,6,2,18,6,10],[12,13,9,13,18,11,9,13,11,11,18,6],[11,0,13,11,13,18,11,18,6],[11,8,13,11,13,18,11,18,6],[9,12,1,11,
1,18,11,18,6],[1,18,11,18,6,11],[1,18,11,18,6,11],[9,12,8,11,10,18,11,18,6],[10,18,11,18,6,11],[10,18,11,18,6,11],[12,3,6,12,13,3,3,18,6],[3,18,6,3,6,0,3,0,13],[3,18,6,3,6,9,3,8,13],[3,6,12,3,12,1,3,18,6],[0,3,6,18,6,3],[9,3,6,18,6,3],[3,6,8,3,18,6,8,6,12],[0,3,6,18,6,3],[9,3,6,18,6,3],[3,12,13,3,2,12,3,18,6],[0,13,3,18,6,3],[8,13,3,18,6,3],[2,12,1,18,6,3],[18,6,3],[18,6,3],[2,12,8,18,6,3],[18,6,3],[18,6,3],[3,9,13,3,18,6,9,12,13],[0,13,3,18,6,3],[8,13,3,18,6,3],[9,12,1,18,6,3],[18,6,3],[18,6,3],
[9,12,8,18,6,3],[18,6,3],[18,6,3],[12,11,6,12,10,11,12,13,10,15,18,6],[15,18,6,11,6,0,10,0,13],[15,18,6,11,6,9,10,8,13],[15,18,6,11,12,1,11,6,12],[0,11,6,18,6,15],[9,11,6,18,6,15],[11,6,12,11,12,8,15,18,6],[0,11,6,18,6,15],[9,11,6,18,6,15],[15,18,6,10,2,12,10,12,13],[0,13,10,18,6,15],[8,13,10,18,6,15],[2,12,1,18,6,15],[18,6,15],[18,6,15],[2,12,8,18,6,15],[18,6,15],[18,6,15],[10,12,13,10,9,12,15,18,6],[0,13,10,18,6,15],[8,13,10,18,6,15],[9,12,1,18,6,15],[18,6,15],[18,6,15],[9,12,8,18,6,15],[18,6,15],
[18,6,15],[14,17,19],[17,19,0,0,19,14],[14,9,8,19,14,8,19,8,17,17,8,12],[19,1,17,19,14,1,1,14,17],[1,19,14,1,17,19,1,0,17,1,14,0],[1,19,14,1,17,19,1,12,17,1,14,9],[19,14,10,19,10,13,19,13,17,17,13,8,17,8,14,14,8,10],[0,10,14,14,10,19,13,19,10,13,17,19,13,0,17],[10,14,9,10,19,14,13,19,10,13,17,19,13,12,17],[2,17,19],[2,0,19,0,17,19],[2,8,19,12,17,8,17,19,8],[2,17,1,2,1,19,1,17,19],[1,19,2,1,17,19,1,0,17],[1,19,2,1,17,19,1,12,17],[2,17,8,2,10,19,10,13,19,13,8,17,13,17,19],[13,0,17,13,17,19,13,19,10,
10,19,2],[13,12,17,13,17,19,13,19,10,10,19,2],[17,11,9,19,11,17],[0,19,11,0,17,19],[12,17,8,17,19,8,11,8,19],[11,1,19,1,17,19,1,9,17],[1,19,11,1,17,19,1,0,17],[1,19,11,1,17,19,1,12,17],[11,10,19,13,17,19,10,13,19,13,8,17,9,17,8],[13,0,17,13,17,19,13,19,10,10,19,11],[13,12,17,13,17,19,13,19,10,10,19,11],[19,3,17,3,14,17],[3,14,0,3,0,17,3,17,19],[3,8,19,3,14,9,12,17,8,19,8,17],[3,14,1,3,1,19,1,17,19,1,14,17],[1,19,3,1,17,19,1,0,17,0,3,14],[1,19,3,1,17,19,1,12,17,9,3,14],[3,14,8,3,13,19,13,17,19,13,
8,17,14,17,8],[13,0,17,13,17,19,13,19,3,0,3,14],[13,12,17,13,17,19,13,19,3,9,3,14],[3,17,19,3,2,17],[0,17,3,17,19,3],[8,19,3,8,17,19,12,17,8],[2,17,1,17,19,1,1,19,3],[1,19,3,1,17,19,1,0,17],[1,19,3,1,17,19,1,12,17],[2,17,8,8,17,13,17,19,13,13,19,3],[13,0,17,13,17,19,13,19,3],[13,12,17,13,17,19,13,19,3],[3,17,19,3,9,17],[0,17,3,17,19,3],[8,19,3,8,17,19,12,17,8],[9,17,1,17,19,1,1,19,3],[1,19,3,1,17,19,1,0,17],[1,19,3,1,17,19,1,12,17],[8,17,13,9,17,8,17,19,13,13,19,3],[13,0,17,13,17,19,13,19,3],[13,
12,17,13,17,19,13,19,3],[14,10,11,17,10,14,17,15,10,19,15,17],[11,14,0,0,17,10,15,10,17,15,17,19],[11,14,9,10,8,12,10,12,15,15,12,17,15,17,19],[15,1,19,19,1,17,1,14,17,1,11,14],[1,19,15,1,17,19,1,0,17,0,11,14],[1,19,15,1,17,19,1,12,17,9,11,14],[15,13,19,13,17,19,13,8,17,14,17,8,11,14,8],[13,0,17,13,17,19,13,19,15,0,11,14],[13,12,17,13,17,19,13,19,15,9,11,14],[2,17,10,15,17,19,15,10,17],[0,17,10,10,17,15,17,19,15],[8,12,10,12,15,10,12,17,15,17,19,15],[2,17,1,1,17,19,1,19,15],[1,19,15,1,17,19,1,0,17],
[1,19,15,1,17,19,1,12,17],[2,17,8,8,17,13,17,19,13,13,19,15],[13,0,17,13,17,19,13,19,15],[13,12,17,13,17,19,13,19,15],[15,17,19,15,10,17,10,9,17],[0,17,10,10,17,15,17,19,15],[8,12,10,12,15,10,12,17,15,17,19,15],[9,17,1,1,17,19,1,19,15],[1,19,15,1,17,19,1,0,17],[1,19,15,1,17,19,1,12,17],[8,17,13,9,17,8,17,19,13,13,19,15],[13,0,17,13,17,19,13,19,15],[13,12,17,13,17,19,13,19,15],[4,19,14],[4,19,0,0,19,14],[4,19,8,9,8,14,14,8,19],[4,1,14,4,19,1,1,19,14],[1,4,19,1,19,14,1,14,0],[1,4,19,1,19,14,1,14,9],
[4,8,14,4,19,13,13,19,10,10,14,8,10,19,14],[10,14,0,10,19,14,13,19,10,13,4,19],[10,14,9,10,19,14,13,19,10,13,4,19],[4,19,2],[2,0,19,0,4,19],[2,8,19,19,8,4],[2,4,1,2,1,19,1,4,19],[1,19,2,1,4,19],[1,19,2,1,4,19],[2,4,8,2,10,19,10,13,19,13,4,19],[10,19,2,13,19,10,13,4,19],[10,19,2,13,19,10,13,4,19],[4,19,11,4,11,9],[0,4,11,19,11,4],[19,8,4,11,8,19],[9,4,1,1,4,19,11,1,19],[1,19,11,1,4,19],[1,19,11,1,4,19],[9,4,8,10,13,19,11,10,19,13,4,19],[10,19,11,13,19,10,13,4,19],[10,19,11,13,19,10,13,4,19],[4,3,14,
4,19,3],[3,0,4,3,4,19,3,14,0],[3,8,4,3,4,19,3,14,9],[3,1,19,3,14,1,19,1,4,1,14,4],[1,19,3,1,4,19,0,3,14],[1,19,3,1,4,19,9,3,14],[3,13,19,3,14,8,13,4,19,14,4,8],[0,3,14,19,13,4,19,3,13],[9,3,14,19,13,4,19,3,13],[3,2,4,3,4,19],[0,4,3,19,3,4],[8,4,3,19,3,4],[2,4,1,1,4,19,1,19,3],[1,19,3,1,4,19],[1,19,3,1,4,19],[2,4,8,19,3,13,19,13,4],[3,13,19,13,4,19],[3,13,19,13,4,19],[3,9,4,3,4,19],[0,4,3,19,3,4],[8,4,3,19,3,4],[9,4,1,1,4,19,1,19,3],[1,19,3,1,4,19],[1,19,3,1,4,19],[9,4,8,19,3,13,19,13,4],[3,13,19,
13,4,19],[3,13,19,13,4,19],[4,11,14,4,10,11,4,15,10,4,19,15],[11,14,0,10,0,4,15,10,4,15,4,19],[11,14,9,10,8,4,15,10,4,15,4,19],[15,4,19,15,1,4,1,11,4,14,4,11],[1,4,15,0,11,14,19,15,4],[1,4,15,9,11,14,19,15,4],[15,13,19,13,4,19,14,4,8,11,14,8],[0,11,14,19,13,4,19,15,13],[9,11,14,19,13,4,19,15,13],[10,2,4,15,10,4,15,4,19],[0,4,10,10,4,15,19,15,4],[8,4,10,10,4,15,19,15,4],[2,4,1,1,4,15,19,15,4],[1,4,15,15,4,19],[1,4,15,15,4,19],[2,4,8,19,13,4,19,15,13],[15,13,19,13,4,19],[15,13,19,13,4,19],[10,9,4,15,
10,4,15,4,19],[0,4,10,10,4,15,19,15,4],[8,4,10,10,4,15,19,15,4],[9,4,1,1,4,15,19,15,4],[1,4,15,15,4,19],[1,4,15,15,4,19],[9,4,8,19,13,4,19,15,13],[15,13,19,13,4,19],[15,13,19,13,4,19],[14,12,16,19,14,16],[0,16,19,0,19,14],[9,8,14,14,8,19,16,19,8],[16,19,1,1,19,14,1,14,12],[1,16,19,1,19,14,1,14,0],[1,16,19,1,19,14,1,14,9],[16,19,13,10,19,14,13,19,10,10,14,8,12,8,14],[10,14,0,10,19,14,13,19,10,13,16,19],[10,14,9,10,19,14,13,19,10,13,16,19],[12,16,2,2,16,19],[2,16,19,2,0,16],[2,8,19,19,8,16],[2,1,19,
2,12,1,1,16,19],[1,19,2,1,16,19],[1,19,2,1,16,19],[2,10,19,2,12,8,10,13,19,13,16,19],[10,19,2,13,19,10,13,16,19],[10,19,2,13,19,10,13,16,19],[12,11,9,16,11,12,16,19,11],[0,16,11,19,11,16],[11,16,19,11,8,16],[9,12,1,1,16,19,11,1,19],[1,19,11,1,16,19],[1,19,11,1,16,19],[9,12,8,10,13,19,11,10,19,13,16,19],[10,19,11,13,19,10,13,16,19],[10,19,11,13,19,10,13,16,19],[16,3,12,16,19,3,3,14,12],[3,16,19,3,0,16,3,14,0],[3,16,19,3,8,16,3,14,9],[3,16,19,3,1,16,3,12,1,3,14,12],[1,16,3,0,3,14,19,3,16],[1,16,3,9,
3,14,19,3,16],[3,13,19,3,14,8,13,16,19,14,12,8],[0,3,14,19,13,16,19,3,13],[9,3,14,19,13,16,19,3,13],[3,16,19,3,12,16,3,2,12],[0,16,3,19,3,16],[8,16,3,19,3,16],[2,12,1,1,16,3,19,3,16],[1,16,3,3,16,19],[1,16,3,3,16,19],[2,12,8,19,3,13,19,13,16],[3,13,19,13,16,19],[3,13,19,13,16,19],[3,16,19,3,12,16,3,9,12],[0,16,3,19,3,16],[8,16,3,19,3,16],[9,12,1,1,16,3,19,3,16],[1,16,3,3,16,19],[1,16,3,3,16,19],[9,12,8,19,3,13,19,13,16],[3,13,19,13,16,19],[3,13,19,13,16,19],[16,10,12,16,15,10,16,19,15,12,10,11,12,
11,14],[11,14,0,15,16,19,15,10,16,10,0,16],[11,14,9,15,16,19,15,10,16,10,8,16],[15,1,16,15,16,19,1,11,12,14,12,11],[1,16,15,0,11,14,19,15,16],[1,16,15,9,11,14,19,15,16],[15,16,19,15,13,16,11,14,12,11,12,8],[0,11,14,16,15,13,19,15,16],[9,11,14,16,15,13,19,15,16],[15,16,19,15,10,16,10,12,16,10,2,12],[0,16,10,10,16,15,19,15,16],[8,16,10,10,16,15,19,15,16],[2,12,1,1,16,15,19,15,16],[1,16,15,15,16,19],[1,16,15,15,16,19],[2,12,8,16,15,13,19,15,16],[15,13,16,15,16,19],[15,13,16,15,16,19],[15,16,19,15,10,
16,10,12,16,10,9,12],[0,16,10,10,16,15,19,15,16],[8,16,10,10,16,15,19,15,16],[9,12,1,1,16,15,19,15,16],[1,16,15,15,16,19],[1,16,15,15,16,19],[9,12,8,16,15,13,19,15,16],[15,13,16,15,16,19],[15,13,16,15,16,19],[19,14,5,5,14,17],[5,19,14,5,14,0,5,0,17],[5,19,8,5,12,17,9,8,14,19,14,8],[5,1,17,5,19,1,1,19,14,1,14,17],[1,5,19,1,19,14,1,14,0,0,17,5],[1,5,19,1,19,14,1,14,9,12,17,5],[5,8,17,5,19,10,10,19,14,10,14,8,14,17,8],[10,14,0,10,19,14,10,5,19,0,17,5],[10,14,9,10,19,14,10,5,19,12,17,5],[5,2,17,5,19,
2],[2,0,5,2,5,19,0,17,5],[2,8,5,2,5,19,12,17,5],[2,1,19,2,17,1,19,1,5,1,17,5],[1,19,2,1,5,19,0,17,5],[1,19,2,1,5,19,12,17,5],[2,10,19,2,17,8,10,5,19,17,5,8],[0,17,5,19,10,5,19,2,10],[12,17,5,19,10,5,19,2,10],[5,9,17,5,11,9,5,19,11],[0,17,5,11,0,5,11,5,19],[11,8,5,11,5,19,12,17,5],[11,5,19,11,1,5,1,9,5,17,5,9],[1,5,11,0,17,5,19,11,5],[1,5,11,12,17,5,19,11,5],[11,10,19,10,5,19,17,5,8,9,17,8],[0,17,5,19,10,5,19,11,10],[12,17,5,19,10,5,19,11,10],[5,14,17,5,3,14,5,19,3],[3,0,5,3,5,19,3,14,0,0,17,5],[3,
8,5,3,5,19,3,14,9,12,17,5],[3,5,19,3,14,1,14,17,1,1,17,5],[0,17,5,0,3,14,19,3,5],[9,3,14,12,17,5,19,3,5],[3,5,19,3,14,8,8,17,5,14,17,8],[0,17,5,0,3,14,19,3,5],[9,3,14,12,17,5,19,3,5],[3,2,5,3,5,19,2,17,5],[19,3,5,0,5,3,17,5,0],[19,3,5,8,5,3,17,5,12],[2,17,1,17,5,1,19,3,5],[0,17,5,3,5,19],[3,5,19,12,17,5],[2,17,8,8,17,5,19,3,5],[0,17,5,3,5,19],[3,5,19,12,17,5],[3,9,5,3,5,19,9,17,5],[19,3,5,0,5,3,17,5,0],[19,3,5,8,5,3,17,5,12],[9,5,1,9,17,5,19,3,5],[0,17,5,3,5,19],[3,5,19,12,17,5],[8,17,5,9,17,8,19,
3,5],[0,17,5,3,5,19],[3,5,19,12,17,5],[5,10,17,5,19,15,11,14,10,17,10,14],[10,0,5,0,17,5,11,14,0,15,5,19],[10,8,5,11,14,9,12,17,5,15,5,19],[11,14,1,14,17,1,1,17,5,15,5,19],[0,17,5,0,11,14,19,15,5],[9,11,14,12,17,5,19,15,5],[8,17,5,14,17,8,11,14,8,15,5,19],[0,17,5,0,11,14,19,15,5],[9,11,14,12,17,5,19,15,5],[10,2,5,2,17,5,15,5,19],[19,15,5,0,5,10,17,5,0],[19,15,5,17,5,12,8,5,10],[2,17,1,17,5,1,19,15,5],[0,17,5,15,5,19],[15,5,19,12,17,5],[2,17,8,8,17,5,19,15,5],[0,17,5,15,5,19],[15,5,19,12,17,5],[10,
9,5,9,17,5,15,5,19],[19,15,5,0,5,10,17,5,0],[19,15,5,17,5,12,8,5,10],[9,5,1,9,17,5,19,15,5],[0,17,5,15,5,19],[15,5,19,12,17,5],[8,17,5,9,17,8,19,15,5],[0,17,5,15,5,19],[15,5,19,12,17,5],[5,19,14,5,14,4],[0,5,14,14,5,19],[8,5,19,8,19,14,9,8,14],[4,1,14,14,1,19,1,5,19],[1,5,19,1,19,14,1,14,0],[1,5,19,1,19,14,1,14,9],[4,8,14,8,10,14,14,10,19,10,5,19],[10,14,0,10,19,14,10,5,19],[10,14,9,10,19,14,10,5,19],[4,5,2,2,5,19],[2,5,19,2,0,5],[2,5,19,2,8,5],[2,4,1,2,1,19,19,1,5],[1,19,2,1,5,19],[1,19,2,1,5,19],
[2,4,8,2,10,19,10,5,19],[10,19,2,5,19,10],[10,19,2,5,19,10],[4,5,9,9,5,11,11,5,19],[11,0,5,11,5,19],[11,8,5,11,5,19],[9,4,1,11,1,5,11,5,19],[1,5,11,5,19,11],[1,5,11,5,19,11],[9,4,8,10,5,19,11,10,19],[10,19,11,5,19,10],[10,19,11,5,19,10],[4,5,3,4,3,14,3,5,19],[3,14,0,3,0,5,3,5,19],[3,14,9,3,8,5,3,5,19],[3,14,1,3,5,19,14,4,1],[0,3,14,5,19,3],[9,3,14,5,19,3],[3,14,8,3,5,19,8,14,4],[0,3,14,5,19,3],[9,3,14,5,19,3],[3,2,4,3,4,5,3,5,19],[0,5,3,5,19,3],[8,5,3,5,19,3],[2,4,1,5,19,3],[5,19,3],[5,19,3],[2,4,
8,5,19,3],[5,19,3],[5,19,3],[3,9,5,3,5,19,9,4,5],[0,5,3,5,19,3],[8,5,3,5,19,3],[9,4,1,5,19,3],[5,19,3],[5,19,3],[9,4,8,5,19,3],[5,19,3],[5,19,3],[4,5,10,4,11,14,4,10,11,15,5,19],[15,5,19,11,14,0,10,0,5],[15,5,19,11,14,9,10,8,5],[15,5,19,11,14,4,11,4,1],[0,11,14,5,19,15],[9,11,14,5,19,15],[11,14,8,8,14,4,15,5,19],[0,11,14,5,19,15],[9,11,14,5,19,15],[15,5,19,10,4,5,10,2,4],[0,5,10,5,19,15],[8,5,10,5,19,15],[2,4,1,5,19,15],[5,19,15],[5,19,15],[2,4,8,5,19,15],[5,19,15],[5,19,15],[10,9,5,9,4,5,15,5,19],
[0,5,10,5,19,15],[8,5,10,5,19,15],[9,4,1,5,19,15],[5,19,15],[5,19,15],[9,4,8,5,19,15],[5,19,15],[5,19,15],[5,19,14,5,14,12],[0,5,14,14,5,19],[8,5,19,8,19,14,9,8,14],[12,1,14,14,1,19,1,5,19],[1,5,19,1,19,14,1,14,0],[1,5,19,1,19,14,1,14,9],[8,10,14,12,8,14,14,10,19,10,5,19],[10,14,0,10,19,14,10,5,19],[10,14,9,10,19,14,10,5,19],[12,5,2,2,5,19],[2,5,19,2,0,5],[2,5,19,2,8,5],[2,1,19,2,12,1,19,1,5],[1,19,2,1,5,19],[1,19,2,1,5,19],[2,10,19,2,12,8,10,5,19],[10,19,2,5,19,10],[10,19,2,5,19,10],[12,5,9,9,5,
11,11,5,19],[11,0,5,11,5,19],[11,8,5,11,5,19],[9,12,1,11,1,5,11,5,19],[1,5,11,5,19,11],[1,5,11,5,19,11],[9,12,8,10,5,19,11,10,19],[10,19,11,5,19,10],[10,19,11,5,19,10],[12,3,14,12,5,3,3,5,19],[3,14,0,3,0,5,3,5,19],[3,14,9,3,8,5,3,5,19],[3,14,12,3,12,1,3,5,19],[0,3,14,5,19,3],[9,3,14,5,19,3],[3,14,8,3,5,19,8,14,12],[0,3,14,5,19,3],[9,3,14,5,19,3],[3,12,5,3,2,12,3,5,19],[0,5,3,5,19,3],[8,5,3,5,19,3],[2,12,1,5,19,3],[5,19,3],[5,19,3],[2,12,8,5,19,3],[5,19,3],[5,19,3],[3,9,5,3,5,19,9,12,5],[0,5,3,5,19,
3],[8,5,3,5,19,3],[9,12,1,5,19,3],[5,19,3],[5,19,3],[9,12,8,5,19,3],[5,19,3],[5,19,3],[12,11,14,12,10,11,12,5,10,15,5,19],[15,5,19,11,14,0,10,0,5],[15,5,19,11,14,9,10,8,5],[15,5,19,11,12,1,11,14,12],[0,11,14,5,19,15],[9,11,14,5,19,15],[11,14,12,11,12,8,15,5,19],[0,11,14,5,19,15],[9,11,14,5,19,15],[15,5,19,10,2,12,10,12,5],[0,5,10,5,19,15],[8,5,10,5,19,15],[2,12,1,5,19,15],[5,19,15],[5,19,15],[2,12,8,5,19,15],[5,19,15],[5,19,15],[10,12,5,10,9,12,15,5,19],[0,5,10,5,19,15],[8,5,10,5,19,15],[9,12,1,5,
19,15],[5,19,15],[5,19,15],[9,12,8,5,19,15],[5,19,15],[5,19,15],[19,14,18,18,14,13,14,16,13,17,16,14],[16,0,17,0,13,14,14,13,18,14,18,19],[16,12,17,9,8,13,9,13,14,14,18,19,14,13,18],[1,18,19,1,19,14,1,14,17,1,17,16],[1,18,19,1,19,14,1,14,0,0,17,16],[1,18,19,1,19,14,1,14,9,12,17,16],[18,19,10,10,19,14,10,14,8,14,17,8,16,8,17],[10,14,0,10,19,14,10,18,19,0,17,16],[10,14,9,10,19,14,10,18,19,12,17,16],[18,2,13,18,19,2,2,17,16,13,2,16],[2,18,19,2,13,18,2,0,13,0,17,16],[2,18,19,2,13,18,2,8,13,12,17,16],
[2,18,19,2,1,18,2,16,1,2,17,16],[1,18,2,0,17,16,19,2,18],[1,18,2,12,17,16,19,2,18],[2,10,19,2,17,8,10,18,19,17,16,8],[0,17,16,19,10,18,19,2,10],[12,17,16,19,10,18,19,2,10],[18,11,13,18,19,11,13,11,9,16,13,9,16,9,17],[0,17,16,11,18,19,11,13,18,11,0,13],[11,18,19,11,13,18,11,8,13,12,17,16],[11,1,18,11,18,19,1,9,16,17,16,9],[1,18,11,0,17,16,19,11,18],[1,18,11,12,17,16,19,11,18],[11,18,19,11,10,18,9,17,16,9,16,8],[0,17,16,18,11,10,19,11,18],[12,17,16,18,11,10,19,11,18],[18,19,3,3,14,13,14,16,13,14,17,
16],[3,18,19,3,14,0,3,0,13,0,17,16],[3,18,19,3,14,9,3,8,13,12,17,16],[3,18,19,3,14,1,14,17,1,17,16,1],[0,17,16,0,3,14,19,3,18],[9,3,14,12,17,16,19,3,18],[3,18,19,3,14,8,8,17,16,14,17,8],[0,17,16,0,3,14,19,3,18],[9,3,14,12,17,16,19,3,18],[3,18,19,3,2,13,13,2,16,2,17,16],[19,3,18,0,13,3,17,16,0],[19,3,18,8,13,3,17,16,12],[2,17,16,2,16,1,19,3,18],[0,17,16,3,18,19],[3,18,19,12,17,16],[2,17,8,8,17,16,19,3,18],[0,17,16,3,18,19],[3,18,19,12,17,16],[3,18,19,3,9,13,13,9,16,9,17,16],[19,3,18,0,13,3,17,16,0],
[19,3,18,8,13,3,17,16,12],[9,16,1,9,17,16,19,3,18],[0,17,16,3,18,19],[3,18,19,12,17,16],[9,16,8,9,17,16,19,3,18],[0,17,16,3,18,19],[3,18,19,12,17,16],[18,19,15,11,13,10,11,14,13,14,17,16,14,16,13],[10,0,13,0,17,16,11,14,0,15,18,19],[10,8,13,11,14,9,12,17,16,15,18,19],[11,14,1,14,17,1,17,16,1,15,18,19],[0,17,16,0,11,14,19,15,18],[9,11,14,12,17,16,19,15,18],[8,17,16,14,17,8,11,14,8,15,18,19],[0,17,16,0,11,14,19,15,18],[9,11,14,12,17,16,19,15,18],[10,2,13,13,2,16,2,17,16,15,18,19],[19,15,18,0,13,10,
17,16,0],[19,15,18,17,16,12,8,13,10],[2,17,16,2,16,1,19,15,18],[0,17,16,15,18,19],[15,18,19,12,17,16],[2,17,8,8,17,16,19,15,18],[0,17,16,15,18,19],[15,18,19,12,17,16],[10,9,13,13,9,16,9,17,16,15,18,19],[19,15,18,0,13,10,17,16,0],[19,15,18,17,16,12,8,13,10],[9,16,1,9,17,16,19,15,18],[0,17,16,15,18,19],[15,18,19,12,17,16],[9,16,8,9,17,16,19,15,18],[0,17,16,15,18,19],[15,18,19,12,17,16],[4,13,14,14,18,19,14,13,18],[0,13,14,14,13,18,14,18,19],[9,8,13,9,13,14,14,18,19,14,13,18],[4,1,14,14,1,19,19,1,18],
[1,18,19,1,19,14,1,14,0],[1,18,19,1,19,14,1,14,9],[4,8,14,8,10,14,14,10,19,10,18,19],[10,14,0,10,19,14,10,18,19],[10,14,9,10,19,14,10,18,19],[4,13,2,13,18,2,2,18,19],[2,18,19,2,13,18,2,0,13],[2,18,19,2,13,18,2,8,13],[2,4,1,2,18,19,2,1,18],[1,18,2,18,19,2],[1,18,2,18,19,2],[2,4,8,2,10,19,10,18,19],[10,19,2,18,19,10],[10,19,2,18,19,10],[4,13,9,9,13,11,11,18,19,13,18,11],[11,0,13,11,13,18,11,18,19],[11,8,13,11,13,18,11,18,19],[9,4,1,11,1,18,11,18,19],[1,18,11,18,19,11],[1,18,11,18,19,11],[9,4,8,11,10,
18,11,18,19],[10,18,11,18,19,11],[10,18,11,18,19,11],[4,3,14,4,13,3,3,18,19],[3,14,0,3,0,13,3,18,19],[3,14,9,3,8,13,3,18,19],[3,14,1,3,18,19,14,4,1],[0,3,14,18,19,3],[9,3,14,18,19,3],[3,14,8,3,18,19,8,14,4],[0,3,14,18,19,3],[9,3,14,18,19,3],[3,2,13,3,18,19,13,2,4],[0,13,3,18,19,3],[8,13,3,18,19,3],[2,4,1,18,19,3],[18,19,3],[18,19,3],[2,4,8,18,19,3],[18,19,3],[18,19,3],[3,9,13,3,18,19,9,4,13],[0,13,3,18,19,3],[8,13,3,18,19,3],[9,4,1,18,19,3],[18,19,3],[18,19,3],[9,4,8,18,19,3],[18,19,3],[18,19,3],
[4,11,14,4,10,11,4,13,10,15,18,19],[15,18,19,11,14,0,10,0,13],[15,18,19,11,14,9,10,8,13],[15,18,19,11,14,4,11,4,1],[0,11,14,18,19,15],[9,11,14,18,19,15],[11,14,8,8,14,4,15,18,19],[0,11,14,18,19,15],[9,11,14,18,19,15],[15,18,19,10,4,13,10,2,4],[0,13,10,18,19,15],[8,13,10,18,19,15],[2,4,1,18,19,15],[18,19,15],[18,19,15],[2,4,8,18,19,15],[18,19,15],[18,19,15],[10,9,13,9,4,13,15,18,19],[0,13,10,18,19,15],[8,13,10,18,19,15],[9,4,1,18,19,15],[18,19,15],[18,19,15],[9,4,8,18,19,15],[18,19,15],[18,19,15],
[18,19,14,13,18,14,13,14,12],[0,13,14,14,13,18,14,18,19],[9,8,13,9,13,14,14,18,19,14,13,18],[12,1,14,14,1,19,19,1,18],[1,18,19,1,19,14,1,14,0],[1,18,19,1,19,14,1,14,9],[8,10,14,12,8,14,14,10,19,10,18,19],[10,14,0,10,19,14,10,18,19],[10,14,9,10,19,14,10,18,19],[12,13,2,13,18,2,2,18,19],[2,18,19,2,13,18,2,0,13],[2,18,19,2,13,18,2,8,13],[2,18,19,2,1,18,2,12,1],[1,18,2,18,19,2],[1,18,2,18,19,2],[2,10,19,2,12,8,10,18,19],[10,19,2,18,19,10],[10,19,2,18,19,10],[12,13,9,13,18,11,9,13,11,11,18,19],[11,0,13,
11,13,18,11,18,19],[11,8,13,11,13,18,11,18,19],[9,12,1,11,1,18,11,18,19],[1,18,11,18,19,11],[1,18,11,18,19,11],[9,12,8,11,10,18,11,18,19],[10,18,11,18,19,11],[10,18,11,18,19,11],[12,3,14,12,13,3,3,18,19],[3,14,0,3,0,13,3,18,19],[3,14,9,3,8,13,3,18,19],[3,14,12,3,12,1,3,18,19],[0,3,14,18,19,3],[9,3,14,18,19,3],[3,14,8,3,18,19,8,14,12],[0,3,14,18,19,3],[9,3,14,18,19,3],[3,12,13,3,2,12,3,18,19],[0,13,3,18,19,3],[8,13,3,18,19,3],[2,12,1,18,19,3],[18,19,3],[18,19,3],[2,12,8,18,19,3],[18,19,3],[18,19,3],
[3,9,13,3,18,19,9,12,13],[0,13,3,18,19,3],[8,13,3,18,19,3],[9,12,1,18,19,3],[18,19,3],[18,19,3],[9,12,8,18,19,3],[18,19,3],[18,19,3],[12,11,14,12,10,11,12,13,10,15,18,19],[15,18,19,11,14,0,10,0,13],[15,18,19,11,14,9,10,8,13],[15,18,19,11,12,1,11,14,12],[0,11,14,18,19,15],[9,11,14,18,19,15],[11,14,12,11,12,8,15,18,19],[0,11,14,18,19,15],[9,11,14,18,19,15],[15,18,19,10,2,12,10,12,13],[0,13,10,18,19,15],[8,13,10,18,19,15],[2,12,1,18,19,15],[18,19,15],[18,19,15],[2,12,8,18,19,15],[18,19,15],[18,19,15],
[10,12,13,10,9,12,15,18,19],[0,13,10,18,19,15],[8,13,10,18,19,15],[9,12,1,18,19,15],[18,19,15],[18,19,15],[9,12,8,18,19,15],[18,19,15],[18,19,15],[],[],[7,8,12,7,9,8,7,12,9],[],[],[1,12,7,1,7,9,12,9,7],[7,13,8,7,8,10],[13,0,7,0,10,7],[13,12,7,12,9,7,10,7,9],[],[],[2,7,12,2,8,7,12,7,8],[],[1,7,2,1,0,7,0,2,7],[1,7,2,1,12,7,12,2,7],[2,10,7,2,7,8,13,8,7],[13,0,7,0,2,7,10,7,2],[12,2,7,13,12,7,10,7,2],[7,9,14,7,11,9],[14,7,0,0,7,11],[14,7,12,12,7,8,11,8,7],[11,1,7,1,9,7,14,7,9],[1,7,11,1,0,7,0,14,7],[1,
7,11,1,12,7,12,14,7],[11,10,7,9,13,8,9,14,13,14,7,13],[13,0,7,0,14,7,10,7,11],[12,14,7,13,12,7,10,7,11],[],[],[3,7,9,3,8,7,9,7,12,12,7,8],[3,7,1],[1,0,7,0,3,7],[1,12,7,9,3,7,12,9,7],[3,7,8,13,8,7],[13,0,7,0,3,7],[9,3,7,12,9,7,13,12,7],[3,2,7],[2,7,0,0,7,3],[2,7,12,8,7,3,12,7,8],[2,7,1],[1,0,7,0,2,7],[1,12,7,12,2,7],[2,7,8,8,7,13],[13,0,7,0,2,7],[12,2,7,13,12,7],[3,9,7,14,7,9],[14,7,0,0,7,3],[8,7,3,12,7,8,14,7,12],[9,7,1,14,7,9],[1,0,7,0,14,7],[1,12,7,12,14,7],[9,13,8,9,14,13,14,7,13],[13,0,7,0,14,
7],[12,14,7,13,12,7],[7,10,11],[11,7,0,0,7,10],[11,7,9,9,7,12,12,7,8,10,8,7],[1,11,7],[1,0,7,0,11,7],[1,12,7,9,11,7,12,9,7],[13,8,7,11,7,8],[13,0,7,0,11,7],[9,11,7,12,9,7,13,12,7],[2,7,10],[2,7,0,0,7,10],[2,7,12,8,7,10,12,7,8],[2,7,1],[1,0,7,0,2,7],[1,12,7,12,2,7],[2,7,8,8,7,13],[13,0,7,0,2,7],[12,2,7,13,12,7],[14,7,9,10,9,7],[14,7,0,0,7,10],[8,7,10,12,7,8,14,7,12],[9,7,1,14,7,9],[1,0,7,0,14,7],[1,12,7,12,14,7],[9,13,8,9,14,13,14,7,13],[13,0,7,0,14,7],[12,14,7,13,12,7],[],[],[4,9,7,4,7,8,9,8,7],[],
[1,4,7,1,7,0,0,7,4],[1,4,7,1,7,9,9,7,4],[4,7,13,4,8,7,10,7,8],[10,7,0,0,7,4,13,4,7],[9,7,4,10,7,9,13,4,7],[],[2,7,4,2,0,7,0,4,7],[2,7,4,2,8,7,8,4,7],[2,4,1,2,7,4,2,1,7,1,4,7],[1,7,2,1,4,7,7,4,2],[1,7,2,1,4,7,7,4,2],[2,4,8,2,7,4,2,10,7,13,4,7],[7,4,2,10,7,2,13,4,7],[7,4,2,10,7,2,13,4,7],[4,14,7,4,7,9,11,9,7],[11,0,7,0,4,7,14,7,4],[8,4,7,11,8,7,14,7,4],[9,4,1,1,4,7,11,1,7,14,7,4],[1,7,11,1,4,7,7,4,14],[1,7,11,1,4,7,7,4,14],[9,4,8,11,10,7,13,4,7,14,7,4],[10,7,11,7,4,14,13,4,7],[10,7,11,7,4,14,13,4,7],
[],[],[3,7,9,3,8,7,7,8,4,9,7,4],[3,4,1,3,7,4,1,4,7],[1,4,7,0,3,4,7,4,3],[1,4,7,7,9,3,7,4,9],[3,4,8,3,7,4,13,4,7],[0,3,4,7,4,3,13,4,7],[7,9,3,7,4,9,13,4,7],[3,2,4,3,4,7,2,7,4],[2,7,4,0,4,3,7,3,4],[2,7,4,7,3,8,7,8,4],[2,7,4,2,4,1,1,4,7],[1,4,7,7,4,2],[1,4,7,7,4,2],[2,7,4,2,4,8,13,4,7],[7,4,2,13,4,7],[7,4,2,13,4,7],[3,9,4,3,4,7,14,7,4],[0,4,3,7,3,4,14,7,4],[7,3,8,7,8,4,14,7,4],[9,4,1,1,4,7,14,7,4],[1,4,7,7,4,14],[1,4,7,7,4,14],[9,4,8,13,4,7,14,7,4],[7,4,14,13,4,7],[7,4,14,13,4,7],[4,11,7,4,7,10,4,10,
11],[7,10,4,11,7,4,11,4,0,0,4,10],[11,7,9,9,7,4,7,8,4,10,8,7],[1,4,7,11,4,1,11,7,4],[1,4,7,0,11,4,7,4,11],[1,4,7,7,9,11,7,4,9],[11,4,8,11,7,4,13,4,7],[0,11,4,7,4,11,13,4,7],[7,9,11,7,4,9,13,4,7],[2,7,4,10,2,4,10,4,7],[2,7,4,0,4,10,7,10,4],[2,7,4,7,10,8,7,8,4],[2,7,4,2,4,1,1,4,7],[1,4,7,7,4,2],[1,4,7,7,4,2],[2,7,4,2,4,8,13,4,7],[7,4,2,13,4,7],[7,4,2,13,4,7],[10,9,4,10,4,7,14,7,4],[0,4,10,7,10,4,14,7,4],[7,10,8,7,8,4,14,7,4],[9,4,1,1,4,7,14,7,4],[1,4,7,7,4,14],[1,4,7,7,4,14],[9,4,8,13,4,7,14,7,4],[7,
4,14,13,4,7],[7,4,14,13,4,7],[7,17,12,7,12,16],[17,0,7,0,16,7],[17,9,7,9,8,7,16,7,8],[16,7,1,1,7,12,17,12,7],[1,16,7,1,7,0,0,7,17],[1,16,7,1,7,9,9,7,17],[16,7,13,10,12,8,10,17,12,10,7,17],[10,7,0,0,7,17,13,16,7],[9,7,17,10,7,9,13,16,7],[17,2,7,2,12,7,16,7,12],[2,7,17,2,0,7,0,16,7],[2,7,17,2,8,7,8,16,7],[2,7,17,2,1,7,2,12,1,1,16,7],[1,7,2,1,16,7,7,17,2],[1,7,2,1,16,7,7,17,2],[2,7,17,2,10,7,2,12,8,13,16,7],[7,17,2,10,7,2,13,16,7],[7,17,2,10,7,2,13,16,7],[17,14,7,11,9,12,11,12,16,11,16,7],[11,0,7,0,
16,7,14,7,17],[8,16,7,11,8,7,14,7,17],[9,12,1,1,16,7,11,1,7,14,7,17],[1,7,11,1,16,7,7,17,14],[1,7,11,1,16,7,7,17,14],[9,12,8,11,10,7,13,16,7,14,7,17],[10,7,11,7,17,14,13,16,7],[10,7,11,7,17,14,13,16,7],[17,12,3,17,3,7,3,16,7,12,16,3],[3,7,17,3,17,0,3,0,16,3,16,7],[3,7,9,3,8,7,7,8,16,9,7,17],[3,7,17,3,17,12,3,12,1,1,16,7],[1,16,7,0,3,17,7,17,3],[1,16,7,7,9,3,7,17,9],[3,7,17,3,17,12,3,12,8,13,16,7],[0,3,17,7,17,3,13,16,7],[7,9,3,7,17,9,13,16,7],[3,16,7,3,12,16,3,2,12,2,7,17],[2,7,17,0,16,3,7,3,16],
[2,7,17,7,3,8,7,8,16],[2,7,17,2,12,1,1,16,7],[1,16,7,7,17,2],[1,16,7,7,17,2],[2,7,17,2,12,8,13,16,7],[7,17,2,13,16,7],[7,17,2,13,16,7],[3,16,7,3,12,16,3,9,12,14,7,17],[0,16,3,7,3,16,14,7,17],[7,3,8,7,8,16,14,7,17],[9,12,1,1,16,7,14,7,17],[1,16,7,7,17,14],[1,16,7,7,17,14],[9,12,8,13,16,7,14,7,17],[7,17,14,13,16,7],[7,17,14,13,16,7],[17,12,11,17,11,7,12,10,11,16,10,12,16,7,10],[7,10,16,11,17,0,11,7,17,0,16,10],[11,7,17,11,17,9,10,16,7,10,8,16],[1,16,7,11,7,17,11,17,12,11,12,1],[1,16,7,0,11,17,7,17,
11],[1,16,7,7,17,11,17,9,11],[11,7,17,11,17,12,11,12,8,13,16,7],[0,11,17,7,17,11,13,16,7],[7,17,11,13,16,7,17,9,11],[2,7,17,10,16,7,10,12,16,10,2,12],[2,7,17,0,16,10,7,10,16],[2,7,17,7,10,16,16,10,8],[2,7,17,2,12,1,1,16,7],[1,16,7,7,17,2],[1,16,7,7,17,2],[2,7,17,2,12,8,13,16,7],[7,17,2,13,16,7],[7,17,2,13,16,7],[10,16,7,10,12,16,10,9,12,14,7,17],[0,16,10,7,10,16,14,7,17],[7,10,16,14,7,17,16,10,8],[9,12,1,1,16,7,14,7,17],[1,16,7,7,17,14],[1,16,7,7,17,14],[9,12,8,13,16,7,14,7,17],[7,17,14,13,16,7],
[7,17,14,13,16,7],[],[],[5,12,7,5,7,8,9,8,7,12,9,7],[5,1,7],[1,7,0,0,7,5],[1,7,9,9,7,12,12,7,5],[5,8,7,10,7,8],[10,7,0,0,7,5],[9,7,12,10,7,9,12,7,5],[],[],[2,7,12,2,8,7,7,8,5,12,7,5],[2,5,1,2,7,5,2,1,7],[1,7,2,0,2,5,7,5,2],[1,7,2,7,12,2,7,5,12],[2,5,8,2,7,5,2,10,7],[0,2,5,7,5,2,10,7,2],[7,12,2,10,7,2,7,5,12],[5,14,7,5,7,11,5,11,9,5,9,14],[7,11,5,14,7,5,14,5,0,0,5,11],[14,7,12,12,7,5,7,8,5,11,8,7],[11,1,7,9,5,1,14,5,9,14,7,5],[1,7,11,0,14,5,7,5,14],[1,7,11,7,12,14,7,5,12],[11,10,7,9,5,8,14,5,9,14,
7,5],[0,14,5,10,7,11,7,5,14],[10,7,11,7,12,14,7,5,12],[5,3,7],[3,0,5,3,7,0,0,7,5],[3,8,5,3,7,9,9,7,12,12,7,5],[3,5,1,3,7,5],[0,7,5,0,3,7],[9,3,7,12,9,7,12,7,5],[3,7,8,7,5,8],[0,7,5,0,3,7],[9,3,7,12,9,7,12,7,5],[3,2,5,2,7,5],[2,7,5,2,5,0,0,5,3],[2,7,12,12,7,5,8,5,3],[2,7,5,2,5,1],[0,2,5,7,5,2],[7,12,2,7,5,12],[2,7,5,2,5,8],[0,2,5,7,5,2],[7,12,2,7,5,12],[3,9,5,9,14,5,14,7,5],[14,5,0,14,7,5,0,5,3],[12,7,5,14,7,12,8,5,3],[9,5,1,14,5,9,14,7,5],[0,14,5,7,5,14],[7,5,12,7,12,14],[9,5,8,14,5,9,14,7,5],[0,
14,5,7,5,14],[7,5,12,7,12,14],[5,11,7,5,10,11],[10,0,5,0,7,5,11,7,0],[10,8,5,9,7,12,11,7,9,12,7,5],[1,11,5,7,5,11],[0,7,5,0,11,7],[9,11,7,12,9,7,12,7,5],[7,5,8,11,7,8],[0,7,5,0,11,7],[9,11,7,12,9,7,12,7,5],[10,2,5,2,7,5],[2,7,5,2,5,0,0,5,10],[2,7,12,12,7,5,8,5,10],[2,7,5,2,5,1],[0,2,5,7,5,2],[7,12,2,7,5,12],[2,7,5,2,5,8],[0,2,5,7,5,2],[7,12,2,7,5,12],[10,9,5,9,14,5,14,7,5],[14,5,0,14,7,5,0,5,10],[12,7,5,14,7,12,8,5,10],[9,5,1,14,5,9,14,7,5],[0,14,5,7,5,14],[7,5,12,7,12,14],[9,5,8,14,5,9,14,7,5],[0,
14,5,7,5,14],[7,5,12,7,12,14],[5,7,4],[4,0,7,0,5,7],[4,9,7,8,5,7,9,8,7],[4,1,7],[1,7,0,0,7,4],[1,7,9,9,7,4],[4,8,7,8,10,7],[10,7,0,0,7,4],[9,7,4,10,7,9],[4,5,2,4,2,7,2,5,7],[2,7,4,2,5,7,2,0,5],[2,7,4,2,8,7,8,5,7],[2,4,1,2,7,4,2,1,7],[1,7,2,7,4,2],[1,7,2,7,4,2],[2,4,8,2,7,4,2,10,7],[7,4,2,10,7,2],[7,4,2,10,7,2],[4,5,9,4,14,7,9,5,11,11,5,7],[11,0,5,11,5,7,14,7,4],[8,5,7,11,8,7,14,7,4],[9,4,1,11,1,7,14,7,4],[1,7,11,7,4,14],[1,7,11,7,4,14],[9,4,8,11,10,7,14,7,4],[10,7,11,7,4,14],[10,7,11,7,4,14],[4,5,
3,4,3,7],[3,4,0,3,7,4,3,0,5],[3,7,9,3,8,5,9,7,4],[3,4,1,3,7,4],[0,3,4,7,4,3],[7,9,3,7,4,9],[3,4,8,3,7,4],[0,3,4,7,4,3],[7,9,3,7,4,9],[3,2,4,3,4,5,2,7,4],[2,7,4,0,5,3],[2,7,4,8,5,3],[2,7,4,2,4,1],[7,4,2],[7,4,2],[2,7,4,2,4,8],[7,4,2],[7,4,2],[3,9,5,9,4,5,14,7,4],[0,5,3,14,7,4],[8,5,3,14,7,4],[9,4,1,14,7,4],[7,4,14],[7,4,14],[9,4,8,14,7,4],[7,4,14],[7,4,14],[4,5,10,4,11,7,4,10,11],[11,7,4,11,4,0,10,0,5],[11,7,9,9,7,4,10,8,5],[11,7,4,11,4,1],[0,11,4,7,4,11],[7,4,9,7,9,11],[11,7,4,11,4,8],[0,11,4,7,4,
11],[7,4,9,7,9,11],[10,4,5,10,2,4,2,7,4],[2,7,4,0,5,10],[2,7,4,8,5,10],[2,7,4,2,4,1],[7,4,2],[7,4,2],[2,7,4,2,4,8],[7,4,2],[7,4,2],[10,9,5,9,4,5,14,7,4],[0,5,10,14,7,4],[8,5,10,14,7,4],[9,4,1,14,7,4],[7,4,14],[7,4,14],[9,4,8,14,7,4],[7,4,14],[7,4,14],[5,7,12,17,12,7],[17,0,7,0,5,7],[8,5,7,9,8,7,17,9,7],[12,1,7,17,12,7],[1,7,0,0,7,17],[1,7,9,9,7,17],[8,10,12,12,10,17,17,10,7],[10,7,0,0,7,17],[9,7,17,10,7,9],[12,5,2,2,5,7,17,2,7],[2,7,17,2,5,7,2,0,5],[2,7,17,2,8,7,8,5,7],[2,7,17,2,1,7,2,12,1],[1,7,
2,7,17,2],[1,7,2,7,17,2],[2,7,17,2,10,7,2,12,8],[7,17,2,10,7,2],[7,17,2,10,7,2],[12,5,9,9,5,11,17,14,7,11,5,7],[11,0,5,11,5,7,14,7,17],[8,5,7,11,8,7,14,7,17],[9,12,1,11,1,7,14,7,17],[1,7,11,7,17,14],[1,7,11,7,17,14],[9,12,8,11,10,7,14,7,17],[10,7,11,7,17,14],[10,7,11,7,17,14],[17,12,3,17,3,7,12,5,3],[3,7,17,3,17,0,3,0,5],[3,7,9,3,8,5,9,7,17],[3,7,17,3,17,12,3,12,1],[0,3,17,7,17,3],[7,9,3,7,17,9],[3,7,17,3,17,12,3,12,8],[0,3,17,7,17,3],[7,9,3,7,17,9],[3,12,5,3,2,12,2,7,17],[2,7,17,0,5,3],[2,7,17,8,
5,3],[2,7,17,2,12,1],[7,17,2],[7,17,2],[2,7,17,2,12,8],[7,17,2],[7,17,2],[3,9,5,14,7,17,9,12,5],[0,5,3,14,7,17],[8,5,3,14,7,17],[9,12,1,14,7,17],[7,17,14],[7,17,14],[9,12,8,14,7,17],[7,17,14],[7,17,14],[17,12,11,17,11,7,12,10,11,12,5,10],[11,17,0,11,7,17,10,0,5],[11,7,17,11,17,9,10,8,5],[11,17,12,11,7,17,11,12,1],[0,11,17,7,17,11],[7,17,11,17,9,11],[11,17,12,11,7,17,11,12,8],[0,11,17,7,17,11],[7,17,11,17,9,11],[10,2,12,10,12,5,2,7,17],[2,7,17,0,5,10],[2,7,17,8,5,10],[2,7,17,2,12,1],[7,17,2],[7,17,
2],[2,7,17,2,12,8],[7,17,2],[7,17,2],[10,12,5,10,9,12,14,7,17],[0,5,10,14,7,17],[8,5,10,14,7,17],[9,12,1,14,7,17],[7,17,14],[7,17,14],[9,12,8,14,7,17],[7,17,14],[7,17,14],[7,16,13],[16,0,7,0,13,7],[16,12,7,12,9,7,9,8,7,13,7,8],[1,7,16],[1,7,0,0,7,16],[1,7,9,9,7,12,12,7,16],[10,7,8,16,8,7],[10,7,0,0,7,16],[9,7,12,10,7,9,12,7,16],[16,13,2,16,2,7,2,13,7],[2,7,16,2,16,0,2,0,13,2,13,7],[2,7,12,2,8,7,7,8,13,12,7,16],[2,7,16,2,16,1,2,1,7],[1,7,2,0,2,16,7,16,2],[1,7,2,7,12,2,7,16,12],[2,7,16,2,16,8,2,10,
7],[0,2,16,7,16,2,10,7,2],[7,12,2,10,7,2,7,16,12],[16,13,9,16,9,14,16,14,7,13,11,9,13,7,11],[7,11,13,14,16,0,14,7,16,0,13,11],[14,7,16,14,16,12,11,13,7,11,8,13],[11,1,7,14,7,16,14,16,9,9,16,1],[1,7,11,0,14,16,7,16,14],[1,7,11,7,16,14,16,12,14],[11,10,7,14,7,16,14,16,9,9,16,8],[0,14,16,10,7,11,7,16,14],[10,7,11,7,16,14,16,12,14],[13,3,16,3,7,16],[3,7,0,3,0,13,0,7,16],[3,7,9,3,8,13,9,7,12,12,7,16],[3,7,16,3,16,1],[0,7,16,0,3,7],[9,3,7,12,9,7,12,7,16],[3,7,8,7,16,8],[0,7,16,0,3,7],[9,3,7,12,9,7,12,7,
16],[3,2,13,13,2,16,2,7,16],[2,7,16,2,16,0,0,13,3],[2,7,12,12,7,16,8,13,3],[2,7,16,2,16,1],[0,2,16,7,16,2],[7,12,2,7,16,12],[2,7,16,2,16,8],[0,2,16,7,16,2],[7,12,2,7,16,12],[3,9,13,13,9,16,14,7,16,9,14,16],[14,16,0,14,7,16,0,13,3],[14,16,12,14,7,16,8,13,3],[9,16,1,14,16,9,14,7,16],[0,14,16,7,16,14],[7,16,14,16,12,14],[9,16,8,14,16,9,14,7,16],[0,14,16,7,16,14],[7,16,14,16,12,14],[13,10,11,16,13,11,16,11,7],[10,0,13,0,7,16,11,7,0],[10,8,13,9,7,12,11,7,9,12,7,16],[1,11,16,7,16,11],[0,7,16,0,11,7],[9,
11,7,12,9,7,12,7,16],[11,7,16,11,16,8],[0,7,16,0,11,7],[9,11,7,12,9,7,12,7,16],[10,2,13,13,2,16,2,7,16],[2,7,16,2,16,0,0,13,10],[2,7,12,12,7,16,8,13,10],[2,7,16,2,16,1],[0,2,16,7,16,2],[7,12,2,7,16,12],[2,7,16,2,16,8],[0,2,16,7,16,2],[7,12,2,7,16,12],[10,9,13,13,9,16,9,14,16,14,7,16],[14,16,0,14,7,16,0,13,10],[14,16,12,14,7,16,8,13,10],[9,16,1,14,16,9,14,7,16],[0,14,16,7,16,14],[7,16,14,16,12,14],[9,16,8,14,16,9,14,7,16],[0,14,16,7,16,14],[7,16,14,16,12,14],[4,13,7],[4,0,7,0,13,7],[4,9,7,8,13,7,9,
8,7],[4,1,7],[1,7,0,0,7,4],[1,7,9,9,7,4],[4,8,7,8,10,7],[10,7,0,0,7,4],[9,7,4,10,7,9],[4,2,7,4,13,2,2,13,7],[2,7,4,2,13,7,2,0,13],[2,7,4,2,8,7,8,13,7],[2,4,1,2,7,4,2,1,7],[1,7,2,7,4,2],[1,7,2,7,4,2],[2,4,8,2,7,4,2,10,7],[7,4,2,10,7,2],[7,4,2,10,7,2],[4,14,7,4,13,9,9,13,11,11,13,7],[11,0,13,11,13,7,14,7,4],[11,8,13,11,13,7,14,7,4],[9,4,1,11,1,7,14,7,4],[1,7,11,7,4,14],[1,7,11,7,4,14],[9,4,8,11,10,7,14,7,4],[10,7,11,7,4,14],[10,7,11,7,4,14],[4,3,7,4,13,3],[3,4,0,3,7,4,3,0,13],[3,7,9,3,8,13,9,7,4],[3,
4,1,3,7,4],[0,3,4,7,4,3],[7,9,3,7,4,9],[3,4,8,3,7,4],[0,3,4,7,4,3],[7,9,3,7,4,9],[3,2,13,13,2,4,2,7,4],[2,7,4,0,13,3],[2,7,4,8,13,3],[2,7,4,2,4,1],[7,4,2],[7,4,2],[2,7,4,2,4,8],[7,4,2],[7,4,2],[3,9,13,9,4,13,14,7,4],[0,13,3,14,7,4],[8,13,3,14,7,4],[9,4,1,14,7,4],[7,4,14],[7,4,14],[9,4,8,14,7,4],[7,4,14],[7,4,14],[4,11,7,4,10,11,4,13,10],[11,7,4,11,4,0,10,0,13],[11,7,9,9,7,4,10,8,13],[11,7,4,11,4,1],[0,11,4,7,4,11],[7,4,9,7,9,11],[11,7,4,11,4,8],[0,11,4,7,4,11],[7,4,9,7,9,11],[10,4,13,10,2,4,2,7,4],
[2,7,4,0,13,10],[2,7,4,8,13,10],[2,7,4,2,4,1],[7,4,2],[7,4,2],[2,7,4,2,4,8],[7,4,2],[7,4,2],[10,9,13,9,4,13,14,7,4],[0,13,10,14,7,4],[8,13,10,14,7,4],[9,4,1,14,7,4],[7,4,14],[7,4,14],[9,4,8,14,7,4],[7,4,14],[7,4,14],[17,12,7,13,7,12],[17,0,7,0,13,7],[8,13,7,9,8,7,17,9,7],[12,1,7,17,12,7],[1,7,0,0,7,17],[1,7,9,9,7,17],[8,10,12,12,10,17,17,10,7],[10,7,0,0,7,17],[9,7,17,10,7,9],[12,13,2,2,13,7,17,2,7],[2,7,17,2,13,7,2,0,13],[2,7,17,2,8,7,8,13,7],[2,7,17,2,1,7,2,12,1],[1,7,2,7,17,2],[1,7,2,7,17,2],[2,
7,17,2,10,7,2,12,8],[7,17,2,10,7,2],[7,17,2,10,7,2],[12,13,9,11,13,7,9,13,11,17,14,7],[11,0,13,11,13,7,14,7,17],[11,8,13,11,13,7,14,7,17],[9,12,1,11,1,7,14,7,17],[1,7,11,7,17,14],[1,7,11,7,17,14],[9,12,8,11,10,7,14,7,17],[10,7,11,7,17,14],[10,7,11,7,17,14],[17,12,3,17,3,7,12,13,3],[3,7,17,3,17,0,3,0,13],[3,7,9,3,8,13,9,7,17],[3,7,17,3,17,12,3,12,1],[0,3,17,7,17,3],[7,9,3,7,17,9],[3,7,17,3,17,12,3,12,8],[0,3,17,7,17,3],[7,9,3,7,17,9],[3,12,13,3,2,12,2,7,17],[2,7,17,0,13,3],[2,7,17,8,13,3],[2,7,17,
2,12,1],[7,17,2],[7,17,2],[2,7,17,2,12,8],[7,17,2],[7,17,2],[3,9,13,9,12,13,14,7,17],[0,13,3,14,7,17],[8,13,3,14,7,17],[9,12,1,14,7,17],[7,17,14],[7,17,14],[9,12,8,14,7,17],[7,17,14],[7,17,14],[17,12,11,17,11,7,12,10,11,12,13,10],[11,17,0,11,7,17,10,0,13],[11,7,17,11,17,9,10,8,13],[11,17,12,11,7,17,11,12,1],[0,11,17,7,17,11],[7,17,11,17,9,11],[11,17,12,11,7,17,11,12,8],[0,11,17,7,17,11],[7,17,11,17,9,11],[10,2,12,10,12,13,2,7,17],[2,7,17,0,13,10],[2,7,17,8,13,10],[2,7,17,2,12,1],[7,17,2],[7,17,2],
[2,7,17,2,12,8],[7,17,2],[7,17,2],[10,12,13,10,9,12,14,7,17],[0,13,10,14,7,17],[8,13,10,14,7,17],[9,12,1,14,7,17],[7,17,14],[7,17,14],[9,12,8,14,7,17],[7,17,14],[7,17,14],[],[],[6,7,12,6,9,7,8,7,9,12,7,8],[],[],[1,12,7,1,7,9,7,6,9,12,6,7],[6,7,13,6,10,7,6,8,10,6,13,8],[7,6,10,13,6,7,13,0,6,0,10,6],[13,12,7,12,6,7,7,6,9,10,7,9],[6,7,2],[2,0,7,0,6,7],[2,8,7,8,12,7,12,6,7],[2,6,1,2,1,7,1,6,7],[1,7,2,1,6,7,1,0,6],[1,7,2,1,12,7,12,6,7],[2,6,8,2,10,7,8,6,13,13,6,7],[13,0,6,13,6,7,10,7,2],[12,6,7,13,12,
7,10,7,2],[6,7,9,11,9,7],[11,0,7,0,6,7],[8,12,7,11,8,7,12,6,7],[9,6,1,1,6,7,11,1,7],[1,7,11,1,6,7,1,0,6],[1,7,11,1,12,7,12,6,7],[9,6,8,8,6,13,11,10,7,13,6,7],[13,0,6,13,6,7,10,7,11],[12,6,7,13,12,7,10,7,11],[6,7,3],[3,6,0,3,0,7,0,6,7],[3,6,9,3,8,7,8,12,7,12,6,7],[3,6,1,1,6,7],[1,6,7,1,0,6,0,3,6],[1,12,7,12,6,7,9,3,6],[3,6,8,8,6,13,13,6,7],[13,0,6,13,6,7,0,3,6],[12,6,7,13,12,7,9,3,6],[3,2,6,3,6,7],[0,6,7,0,7,3],[8,7,3,12,7,8,12,6,7],[2,6,1,1,6,7],[1,6,7,1,0,6],[1,12,7,12,6,7],[2,6,8,8,6,13,13,6,7],
[13,0,6,13,6,7],[12,6,7,13,12,7],[3,9,7,7,9,6],[0,6,7,0,7,3],[8,7,3,12,7,8,12,6,7],[9,6,1,1,6,7],[1,6,7,1,0,6],[1,12,7,12,6,7],[8,6,13,9,6,8,13,6,7],[13,0,6,13,6,7],[12,6,7,13,12,7],[6,7,10,6,10,11],[11,6,0,0,6,7,10,0,7],[11,6,9,8,12,7,10,8,7,12,6,7],[11,6,1,1,6,7],[1,6,7,1,0,6,0,11,6],[1,12,7,12,6,7,9,11,6],[11,6,8,8,6,13,13,6,7],[13,0,6,13,6,7,0,11,6],[12,6,7,13,12,7,9,11,6],[2,6,10,7,10,6],[0,6,7,0,7,10],[8,7,10,12,7,8,12,6,7],[2,6,1,1,6,7],[1,6,7,1,0,6],[1,12,7,12,6,7],[2,6,8,8,6,13,13,6,7],[13,
0,6,13,6,7],[12,6,7,13,12,7],[7,9,6,10,9,7],[0,6,7,0,7,10],[8,7,10,12,7,8,12,6,7],[9,6,1,1,6,7],[1,6,7,1,0,6],[1,12,7,12,6,7],[8,6,13,9,6,8,13,6,7],[13,0,6,13,6,7],[12,6,7,13,12,7],[6,4,7],[4,7,0,0,7,6],[4,7,8,8,7,9,9,7,6],[4,1,6,4,7,1,1,7,6],[1,4,7,1,7,6,1,6,0],[1,4,7,1,7,9,9,7,6],[4,8,6,4,7,13,8,10,6,10,7,6],[10,6,0,10,7,6,13,4,7],[9,7,6,10,7,9,13,4,7],[4,7,2],[2,0,7,0,4,7],[2,8,7,8,4,7],[2,4,1,2,1,7,1,4,7],[1,7,2,1,4,7],[1,7,2,1,4,7],[2,4,8,2,10,7,13,4,7],[10,7,2,13,4,7],[10,7,2,13,4,7],[4,7,9,
9,7,11],[11,0,7,0,4,7],[8,4,7,11,8,7],[9,4,1,1,4,7,11,1,7],[1,7,11,1,4,7],[1,7,11,1,4,7],[9,4,8,11,10,7,13,4,7],[10,7,11,13,4,7],[10,7,11,13,4,7],[4,3,6,4,7,3],[3,0,4,3,4,7,3,6,0],[3,8,7,3,6,9,8,4,7],[3,4,1,3,6,4,1,4,7],[1,4,7,0,3,6],[1,4,7,9,3,6],[3,6,8,8,6,4,13,4,7],[0,3,6,13,4,7],[9,3,6,13,4,7],[3,2,4,3,4,7],[0,4,3,7,3,4],[7,3,8,7,8,4],[2,4,1,1,4,7],[1,4,7],[1,4,7],[2,4,8,13,4,7],[13,4,7],[13,4,7],[3,9,4,3,4,7],[0,4,3,7,3,4],[7,3,8,7,8,4],[9,4,1,1,4,7],[1,4,7],[1,4,7],[9,4,8,13,4,7],[13,4,7],[13,
4,7],[4,11,6,4,7,10,4,10,11],[10,4,7,10,0,4,11,6,0],[10,8,7,8,4,7,11,6,9],[11,6,4,11,4,1,1,4,7],[1,4,7,0,11,6],[1,4,7,9,11,6],[11,6,8,8,6,4,13,4,7],[0,11,6,13,4,7],[9,11,6,13,4,7],[10,4,7,10,2,4],[0,4,10,7,10,4],[7,8,4,7,10,8],[2,4,1,1,4,7],[1,4,7],[1,4,7],[2,4,8,13,4,7],[13,4,7],[13,4,7],[10,4,7,10,9,4],[0,4,10,7,10,4],[7,8,4,7,10,8],[9,4,1,1,4,7],[1,4,7],[1,4,7],[9,4,8,13,4,7],[13,4,7],[13,4,7],[6,12,7,16,7,12],[16,7,0,0,7,6],[8,7,9,16,7,8,9,7,6],[12,1,6,1,7,6,16,7,1],[1,16,7,1,7,6,1,6,0],[1,16,
7,1,7,9,9,7,6],[12,8,6,8,10,6,16,7,13,10,7,6],[10,6,0,10,7,6,13,16,7],[9,7,6,10,7,9,13,16,7],[12,7,2,16,7,12],[2,0,7,0,16,7],[2,8,7,8,16,7],[2,1,7,2,12,1,1,16,7],[1,7,2,1,16,7],[1,7,2,1,16,7],[2,10,7,2,12,8,13,16,7],[10,7,2,13,16,7],[10,7,2,13,16,7],[9,12,11,12,16,11,16,7,11],[11,0,7,0,16,7],[8,16,7,11,8,7],[9,12,1,1,16,7,11,1,7],[1,7,11,1,16,7],[1,7,11,1,16,7],[9,12,8,11,10,7,13,16,7],[10,7,11,13,16,7],[10,7,11,13,16,7],[16,3,12,16,7,3,12,3,6],[3,16,7,3,0,16,3,6,0],[3,8,7,3,6,9,8,16,7],[3,6,12,3,
12,1,1,16,7],[1,16,7,0,3,6],[1,16,7,9,3,6],[3,6,8,13,16,7,8,6,12],[0,3,6,13,16,7],[9,3,6,13,16,7],[3,16,7,3,12,16,3,2,12],[0,16,3,7,3,16],[7,3,8,7,8,16],[2,12,1,1,16,7],[1,16,7],[1,16,7],[2,12,8,13,16,7],[13,16,7],[13,16,7],[3,16,7,3,12,16,3,9,12],[0,16,3,7,3,16],[7,3,8,7,8,16],[9,12,1,1,16,7],[1,16,7],[1,16,7],[9,12,8,13,16,7],[13,16,7],[13,16,7],[16,10,12,16,7,10,12,11,6,12,10,11],[10,0,16,10,16,7,11,6,0],[10,16,7,10,8,16,11,6,9],[11,12,1,11,6,12,1,16,7],[1,16,7,0,11,6],[1,16,7,9,11,6],[11,6,12,
11,12,8,13,16,7],[0,11,6,13,16,7],[9,11,6,13,16,7],[10,12,16,10,16,7,10,2,12],[0,16,10,7,10,16],[7,10,16,16,10,8],[2,12,1,1,16,7],[1,16,7],[1,16,7],[2,12,8,13,16,7],[13,16,7],[13,16,7],[10,12,16,10,16,7,10,9,12],[0,16,10,7,10,16],[7,10,16,16,10,8],[9,12,1,1,16,7],[1,16,7],[1,16,7],[9,12,8,13,16,7],[13,16,7],[13,16,7],[6,5,7],[5,0,6,5,7,0,0,7,6],[5,12,6,5,7,8,8,7,9,9,7,6],[5,1,6,1,7,6],[1,7,6,1,6,0,0,6,5],[1,7,9,9,7,6,12,6,5],[5,8,6,8,10,6,10,7,6],[10,6,0,10,7,6,0,6,5],[9,7,6,10,7,9,12,6,5],[5,2,6,
5,7,2],[2,0,5,2,5,7,0,6,5],[2,8,7,8,5,7,12,6,5],[2,5,1,2,6,5,2,1,7],[1,7,2,0,6,5],[1,7,2,12,6,5],[2,6,8,2,10,7,8,6,5],[0,6,5,10,7,2],[12,6,5,10,7,2],[5,9,6,5,7,11,5,11,9],[11,5,7,11,0,5,0,6,5],[11,8,7,8,5,7,12,6,5],[9,6,5,9,5,1,11,1,7],[1,7,11,0,6,5],[1,7,11,12,6,5],[9,6,8,8,6,5,11,10,7],[0,6,5,10,7,11],[12,6,5,10,7,11],[5,3,6],[3,0,5,3,6,0,0,6,5],[3,8,5,3,6,9,12,6,5],[3,6,1,1,6,5],[0,6,5,0,3,6],[9,3,6,12,6,5],[3,6,8,8,6,5],[0,6,5,0,3,6],[9,3,6,12,6,5],[3,2,5,2,6,5],[6,5,0,0,5,3],[6,5,12,8,5,3],[2,
6,5,2,5,1],[0,6,5],[12,6,5],[2,6,8,8,6,5],[0,6,5],[12,6,5],[3,9,5,9,6,5],[6,5,0,0,5,3],[6,5,12,8,5,3],[9,5,1,9,6,5],[0,6,5],[12,6,5],[8,6,5,9,6,8],[0,6,5],[12,6,5],[5,10,6,10,11,6],[10,0,5,0,6,5,11,6,0],[10,8,5,11,6,9,12,6,5],[11,6,1,1,6,5],[0,6,5,0,11,6],[9,11,6,12,6,5],[8,6,5,11,6,8],[0,6,5,0,11,6],[9,11,6,12,6,5],[10,2,5,2,6,5],[6,5,0,0,5,10],[6,5,12,8,5,10],[2,6,5,2,5,1],[0,6,5],[12,6,5],[2,6,8,8,6,5],[0,6,5],[12,6,5],[10,9,5,9,6,5],[6,5,0,0,5,10],[6,5,12,8,5,10],[9,5,1,9,6,5],[0,6,5],[12,6,5],
[8,6,5,9,6,8],[0,6,5],[12,6,5],[5,6,4,5,7,6],[0,7,6,0,5,7],[8,5,7,9,8,7,9,7,6],[4,1,6,1,7,6],[1,7,6,1,6,0],[1,7,9,9,7,6],[4,8,6,8,10,6,10,7,6],[10,6,0,10,7,6],[9,7,6,10,7,9],[4,5,2,2,5,7],[2,5,7,2,0,5],[2,8,7,8,5,7],[2,4,1,2,1,7],[1,7,2],[1,7,2],[2,4,8,2,10,7],[10,7,2],[10,7,2],[4,5,9,9,5,11,11,5,7],[11,0,5,11,5,7],[8,5,7,11,8,7],[9,4,1,11,1,7],[1,7,11],[1,7,11],[9,4,8,11,10,7],[10,7,11],[10,7,11],[4,5,3,4,3,6],[3,6,0,3,0,5],[3,6,9,3,8,5],[3,4,1,3,6,4],[0,3,6],[9,3,6],[3,6,8,8,6,4],[0,3,6],[9,3,6],
[3,2,4,3,4,5],[0,5,3],[8,5,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,5,9,4,5],[0,5,3],[8,5,3],[9,4,1],[],[],[9,4,8],[],[],[4,5,10,4,11,6,4,10,11],[11,6,0,10,0,5],[11,6,9,10,8,5],[11,6,4,11,4,1],[0,11,6],[9,11,6],[11,6,8,8,6,4],[0,11,6],[9,11,6],[10,4,5,10,2,4],[0,5,10],[8,5,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,5,9,4,5],[0,5,10],[8,5,10],[9,4,1],[],[],[9,4,8],[],[],[5,7,12,7,6,12],[0,7,6,0,5,7],[8,5,7,9,8,7,9,7,6],[12,1,6,1,7,6],[1,7,6,1,6,0],[1,7,9,9,7,6],[8,10,6,12,8,6,10,7,6],[10,6,0,10,7,6],[9,7,6,
10,7,9],[12,5,2,2,5,7],[2,5,7,2,0,5],[2,8,7,8,5,7],[2,1,7,2,12,1],[1,7,2],[1,7,2],[2,10,7,2,12,8],[10,7,2],[10,7,2],[12,5,9,9,5,11,11,5,7],[11,0,5,11,5,7],[8,5,7,11,8,7],[9,12,1,11,1,7],[1,7,11],[1,7,11],[9,12,8,11,10,7],[10,7,11],[10,7,11],[12,3,6,12,5,3],[3,6,0,3,0,5],[3,6,9,3,8,5],[3,6,12,3,12,1],[0,3,6],[9,3,6],[3,6,8,8,6,12],[0,3,6],[9,3,6],[3,12,5,3,2,12],[0,5,3],[8,5,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,5,9,12,5],[0,5,3],[8,5,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,6,12,10,11,12,5,10],[11,
6,0,10,0,5],[11,6,9,10,8,5],[11,12,1,11,6,12],[0,11,6],[9,11,6],[11,6,12,11,12,8],[0,11,6],[9,11,6],[10,2,12,10,12,5],[0,5,10],[8,5,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,5,10,9,12],[0,5,10],[8,5,10],[9,12,1],[],[],[9,12,8],[],[],[6,13,7,6,16,13],[16,0,6,0,7,6,13,7,0],[16,12,6,8,7,9,13,7,8,9,7,6],[16,1,6,1,7,6],[1,7,6,1,6,0,0,6,16],[1,7,9,9,7,6,12,6,16],[16,8,6,8,10,6,10,7,6],[10,6,0,10,7,6,0,6,16],[9,7,6,10,7,9,12,6,16],[16,13,2,16,2,6,13,7,2],[2,13,7,2,0,13,0,6,16],[2,8,7,12,6,16,8,13,7],[2,6,
16,2,16,1,2,1,7],[1,7,2,0,6,16],[1,7,2,12,6,16],[2,6,8,2,10,7,8,6,16],[0,6,16,10,7,2],[12,6,16,10,7,2],[16,13,9,16,9,6,13,11,9,13,7,11],[11,0,13,11,13,7,0,6,16],[11,13,7,11,8,13,12,6,16],[9,16,1,9,6,16,11,1,7],[1,7,11,0,6,16],[1,7,11,12,6,16],[9,6,16,9,16,8,11,10,7],[0,6,16,10,7,11],[12,6,16,10,7,11],[16,13,6,13,3,6],[3,6,0,3,0,13,0,6,16],[3,6,9,3,8,13,12,6,16],[3,6,1,1,6,16],[0,6,16,0,3,6],[9,3,6,12,6,16],[3,6,8,8,6,16],[0,6,16,0,3,6],[9,3,6,12,6,16],[3,2,13,13,2,16,2,6,16],[6,16,0,0,13,3],[6,16,
12,8,13,3],[2,6,16,2,16,1],[0,6,16],[12,6,16],[2,6,8,8,6,16],[0,6,16],[12,6,16],[3,9,13,13,9,16,9,6,16],[6,16,0,0,13,3],[6,16,12,8,13,3],[9,16,1,9,6,16],[0,6,16],[12,6,16],[9,16,8,9,6,16],[0,6,16],[12,6,16],[13,11,16,10,11,13,16,11,6],[10,0,13,0,6,16,11,6,0],[10,8,13,11,6,9,12,6,16],[11,6,1,1,6,16],[0,6,16,0,11,6],[9,11,6,12,6,16],[8,6,16,11,6,8],[0,6,16,0,11,6],[9,11,6,12,6,16],[10,2,13,13,2,16,2,6,16],[6,16,0,0,13,10],[6,16,12,8,13,10],[2,6,16,2,16,1],[0,6,16],[12,6,16],[2,6,8,8,6,16],[0,6,16],
[12,6,16],[10,9,13,13,9,16,9,6,16],[6,16,0,0,13,10],[6,16,12,8,13,10],[9,16,1,9,6,16],[0,6,16],[12,6,16],[9,16,8,9,6,16],[0,6,16],[12,6,16],[4,13,6,7,6,13],[0,7,6,0,13,7],[8,13,7,9,8,7,9,7,6],[4,1,6,1,7,6],[1,7,6,1,6,0],[1,7,9,9,7,6],[4,8,6,8,10,6,10,7,6],[10,6,0,10,7,6],[9,7,6,10,7,9],[4,13,2,2,13,7],[2,13,7,2,0,13],[2,8,7,8,13,7],[2,4,1,2,1,7],[1,7,2],[1,7,2],[2,4,8,2,10,7],[10,7,2],[10,7,2],[4,13,9,9,13,11,11,13,7],[11,0,13,11,13,7],[11,8,13,11,13,7],[9,4,1,11,1,7],[1,7,11],[1,7,11],[9,4,8,11,
10,7],[10,7,11],[10,7,11],[4,3,6,4,13,3],[3,6,0,3,0,13],[3,6,9,3,8,13],[3,4,1,3,6,4],[0,3,6],[9,3,6],[3,6,8,8,6,4],[0,3,6],[9,3,6],[3,2,13,13,2,4],[0,13,3],[8,13,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,13,9,4,13],[0,13,3],[8,13,3],[9,4,1],[],[],[9,4,8],[],[],[4,11,6,4,10,11,4,13,10],[11,6,0,10,0,13],[11,6,9,10,8,13],[11,6,4,11,4,1],[0,11,6],[9,11,6],[11,6,8,8,6,4],[0,11,6],[9,11,6],[10,4,13,10,2,4],[0,13,10],[8,13,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,13,9,4,13],[0,13,10],[8,13,10],[9,4,1],[],[],[9,4,
8],[],[],[7,6,12,13,7,12],[0,7,6,0,13,7],[8,13,7,9,8,7,9,7,6],[12,1,6,1,7,6],[1,7,6,1,6,0],[1,7,9,9,7,6],[8,10,6,12,8,6,10,7,6],[10,6,0,10,7,6],[9,7,6,10,7,9],[12,13,2,2,13,7],[2,13,7,2,0,13],[2,8,7,8,13,7],[2,1,7,2,12,1],[1,7,2],[1,7,2],[2,10,7,2,12,8],[10,7,2],[10,7,2],[12,13,9,11,13,7,9,13,11],[11,0,13,11,13,7],[11,8,13,11,13,7],[9,12,1,11,1,7],[1,7,11],[1,7,11],[9,12,8,11,10,7],[10,7,11],[10,7,11],[12,3,6,12,13,3],[3,6,0,3,0,13],[3,6,9,3,8,13],[3,6,12,3,12,1],[0,3,6],[9,3,6],[3,6,8,8,6,12],[0,
3,6],[9,3,6],[3,12,13,3,2,12],[0,13,3],[8,13,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,13,9,12,13],[0,13,3],[8,13,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,6,12,10,11,12,13,10],[11,6,0,10,0,13],[11,6,9,10,8,13],[11,12,1,11,6,12],[0,11,6],[9,11,6],[11,6,12,11,12,8],[0,11,6],[9,11,6],[10,2,12,10,12,13],[0,13,10],[8,13,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,13,10,9,12],[0,13,10],[8,13,10],[9,12,1],[],[],[9,12,8],[],[],[7,14,17],[17,7,0,0,7,14],[17,7,12,12,7,8,8,7,9,14,9,7],[17,1,14,17,7,1,1,7,14],[1,17,
7,1,0,17,1,14,0,1,7,14],[1,12,7,1,7,9,7,14,9,12,17,7],[17,8,14,17,13,8,17,7,13,14,8,10,14,10,7],[7,14,10,13,0,17,13,17,7,0,10,14],[13,17,7,13,12,17,10,7,14,10,14,9],[2,17,7],[2,0,7,0,17,7],[2,8,7,8,12,7,12,17,7],[2,1,7,2,17,1,1,17,7],[1,7,2,1,17,7,1,0,17],[1,7,2,1,12,7,12,17,7],[2,10,7,2,17,8,8,17,13,13,17,7],[13,0,17,13,17,7,10,7,2],[13,12,17,13,17,7,10,7,2],[11,9,7,17,7,9],[11,0,7,0,17,7],[8,12,7,11,8,7,12,17,7],[9,17,1,1,17,7,11,1,7],[1,7,11,1,17,7,1,0,17],[1,7,11,1,12,7,12,17,7],[9,17,8,13,17,
7,8,17,13,11,10,7],[13,0,17,13,17,7,10,7,11],[13,12,17,13,17,7,10,7,11],[14,17,3,3,17,7],[3,0,7,3,14,0,0,17,7],[3,8,7,3,14,9,8,12,7,12,17,7],[3,14,1,14,17,1,1,17,7],[1,17,7,1,0,17,0,3,14],[1,12,7,12,17,7,9,3,14],[3,14,8,14,17,8,13,17,7,8,17,13],[13,0,17,13,17,7,0,3,14],[13,12,17,13,17,7,9,3,14],[3,17,7,3,2,17],[0,17,7,0,7,3],[8,7,3,12,7,8,12,17,7],[2,17,1,1,17,7],[1,17,7,1,0,17],[1,12,7,12,17,7],[2,17,8,8,17,13,13,17,7],[13,0,17,13,17,7],[13,12,17,13,17,7],[3,9,7,7,9,17],[0,17,7,0,7,3],[8,7,3,12,
7,8,12,17,7],[9,17,1,1,17,7],[1,17,7,1,0,17],[1,12,7,12,17,7],[8,17,13,9,17,8,13,17,7],[13,0,17,13,17,7],[13,12,17,13,17,7],[14,10,11,17,10,14,17,7,10],[11,14,0,0,17,7,10,0,7],[11,14,9,8,12,7,10,8,7,12,17,7],[11,14,1,14,17,1,1,17,7],[1,17,7,1,0,17,0,11,14],[1,12,7,12,17,7,9,11,14],[11,14,8,14,17,8,8,17,13,13,17,7],[13,0,17,13,17,7,0,11,14],[13,12,17,13,17,7,9,11,14],[2,17,10,7,10,17],[0,17,7,0,7,10],[8,7,10,12,7,8,12,17,7],[2,17,1,1,17,7],[1,17,7,1,0,17],[1,12,7,12,17,7],[2,17,8,8,17,13,13,17,7],
[13,0,17,13,17,7],[13,12,17,13,17,7],[10,17,7,10,9,17],[0,17,7,0,7,10],[8,7,10,12,7,8,12,17,7],[9,17,1,1,17,7],[1,17,7,1,0,17],[1,12,7,12,17,7],[8,17,13,9,17,8,13,17,7],[13,0,17,13,17,7],[13,12,17,13,17,7],[4,7,14],[4,7,0,0,7,14],[4,7,8,8,7,9,9,7,14],[4,7,1,4,1,14,1,7,14],[1,4,7,1,7,14,1,14,0],[1,4,7,1,7,9,9,7,14],[4,7,13,4,8,14,8,10,14,10,7,14],[10,14,0,10,7,14,13,4,7],[10,14,9,10,7,14,13,4,7],[4,7,2],[2,0,7,0,4,7],[2,8,7,8,4,7],[2,4,1,2,1,7,1,4,7],[1,7,2,1,4,7],[1,7,2,1,4,7],[2,4,8,2,10,7,13,4,
7],[10,7,2,13,4,7],[10,7,2,13,4,7],[4,7,9,9,7,11],[11,0,7,0,4,7],[8,4,7,11,8,7],[9,4,1,1,4,7,11,1,7],[1,7,11,1,4,7],[1,7,11,1,4,7],[9,4,8,11,10,7,13,4,7],[10,7,11,13,4,7],[10,7,11,13,4,7],[4,7,3,4,3,14],[3,0,4,3,4,7,3,14,0],[3,8,7,3,14,9,8,4,7],[3,14,1,14,4,1,1,4,7],[1,4,7,0,3,14],[1,4,7,9,3,14],[3,14,8,8,14,4,13,4,7],[0,3,14,13,4,7],[9,3,14,13,4,7],[3,2,4,3,4,7],[0,4,3,7,3,4],[7,3,8,7,8,4],[2,4,1,1,4,7],[1,4,7],[1,4,7],[2,4,8,13,4,7],[13,4,7],[13,4,7],[3,9,4,3,4,7],[0,4,3,7,3,4],[7,3,8,7,8,4],[9,
4,1,1,4,7],[1,4,7],[1,4,7],[9,4,8,13,4,7],[13,4,7],[13,4,7],[4,7,10,4,10,11,4,11,14],[10,4,7,10,0,4,11,14,0],[10,8,7,8,4,7,11,14,9],[11,14,4,11,4,1,1,4,7],[1,4,7,0,11,14],[1,4,7,9,11,14],[11,14,8,8,14,4,13,4,7],[0,11,14,13,4,7],[9,11,14,13,4,7],[10,4,7,10,2,4],[0,4,10,7,10,4],[7,8,4,7,10,8],[2,4,1,1,4,7],[1,4,7],[1,4,7],[2,4,8,13,4,7],[13,4,7],[13,4,7],[10,4,7,10,9,4],[0,4,10,7,10,4],[7,8,4,7,10,8],[9,4,1,1,4,7],[1,4,7],[1,4,7],[9,4,8,13,4,7],[13,4,7],[13,4,7],[16,7,12,14,12,7],[16,7,0,0,7,14],[8,
7,9,16,7,8,9,7,14],[12,1,14,1,7,14,16,7,1],[1,16,7,1,7,14,1,14,0],[1,16,7,1,7,9,9,7,14],[12,8,14,10,7,14,8,10,14,16,7,13],[10,14,0,10,7,14,13,16,7],[10,14,9,10,7,14,13,16,7],[12,7,2,16,7,12],[2,0,7,0,16,7],[2,8,7,8,16,7],[2,1,7,2,12,1,1,16,7],[1,7,2,1,16,7],[1,7,2,1,16,7],[2,10,7,2,12,8,13,16,7],[10,7,2,13,16,7],[10,7,2,13,16,7],[9,12,11,12,16,11,16,7,11],[11,0,7,0,16,7],[8,16,7,11,8,7],[9,12,1,1,16,7,11,1,7],[1,7,11,1,16,7],[1,7,11,1,16,7],[9,12,8,11,10,7,13,16,7],[10,7,11,13,16,7],[10,7,11,13,16,
7],[16,3,12,16,7,3,12,3,14],[3,16,7,3,0,16,3,14,0],[3,8,7,3,14,9,8,16,7],[3,14,12,3,12,1,1,16,7],[1,16,7,0,3,14],[1,16,7,9,3,14],[3,14,8,8,14,12,13,16,7],[0,3,14,13,16,7],[9,3,14,13,16,7],[3,16,7,3,12,16,3,2,12],[0,16,3,7,3,16],[7,3,8,7,8,16],[2,12,1,1,16,7],[1,16,7],[1,16,7],[2,12,8,13,16,7],[13,16,7],[13,16,7],[3,16,7,3,12,16,3,9,12],[0,16,3,7,3,16],[7,3,8,7,8,16],[9,12,1,1,16,7],[1,16,7],[1,16,7],[9,12,8,13,16,7],[13,16,7],[13,16,7],[16,10,12,16,7,10,12,11,14,12,10,11],[10,0,16,10,16,7,11,14,0],
[10,16,7,10,8,16,11,14,9],[11,12,1,11,14,12,1,16,7],[1,16,7,0,11,14],[1,16,7,9,11,14],[11,14,12,11,12,8,13,16,7],[0,11,14,13,16,7],[9,11,14,13,16,7],[10,12,16,10,16,7,10,2,12],[0,16,10,7,10,16],[7,10,16,16,10,8],[2,12,1,1,16,7],[1,16,7],[1,16,7],[2,12,8,13,16,7],[13,16,7],[13,16,7],[10,12,16,10,16,7,10,9,12],[0,16,10,7,10,16],[7,10,16,16,10,8],[9,12,1,1,16,7],[1,16,7],[1,16,7],[9,12,8,13,16,7],[13,16,7],[13,16,7],[17,5,14,5,7,14],[5,7,0,5,0,17,0,7,14],[5,7,8,5,12,17,8,7,9,9,7,14],[5,1,17,1,14,17,
1,7,14],[1,7,14,1,14,0,0,17,5],[1,7,9,9,7,14,12,17,5],[5,8,17,8,14,17,8,10,14,10,7,14],[10,14,0,10,7,14,0,17,5],[10,14,9,10,7,14,12,17,5],[5,7,2,5,2,17],[2,0,5,2,5,7,0,17,5],[2,8,7,8,5,7,12,17,5],[2,17,1,2,1,7,17,5,1],[1,7,2,0,17,5],[1,7,2,12,17,5],[2,17,8,2,10,7,8,17,5],[0,17,5,10,7,2],[12,17,5,10,7,2],[5,7,11,5,11,9,5,9,17],[11,5,7,11,0,5,0,17,5],[11,8,7,8,5,7,12,17,5],[9,17,5,9,5,1,11,1,7],[1,7,11,0,17,5],[1,7,11,12,17,5],[9,17,8,8,17,5,11,10,7],[0,17,5,10,7,11],[12,17,5,10,7,11],[5,3,14,5,14,
17],[3,0,5,3,14,0,0,17,5],[3,8,5,3,14,9,12,17,5],[3,14,1,14,17,1,1,17,5],[0,17,5,0,3,14],[9,3,14,12,17,5],[3,14,8,8,17,5,14,17,8],[0,17,5,0,3,14],[9,3,14,12,17,5],[3,2,5,2,17,5],[0,5,3,17,5,0],[8,5,3,17,5,12],[2,17,1,17,5,1],[0,17,5],[12,17,5],[2,17,8,8,17,5],[0,17,5],[12,17,5],[3,9,5,9,17,5],[0,5,3,17,5,0],[8,5,3,17,5,12],[9,5,1,9,17,5],[0,17,5],[12,17,5],[8,17,5,9,17,8],[0,17,5],[12,17,5],[5,10,17,17,10,14,10,11,14],[10,0,5,0,17,5,11,14,0],[10,8,5,11,14,9,12,17,5],[11,14,1,14,17,1,1,17,5],[0,17,
5,0,11,14],[9,11,14,12,17,5],[8,17,5,14,17,8,11,14,8],[0,17,5,0,11,14],[9,11,14,12,17,5],[10,2,5,2,17,5],[0,5,10,17,5,0],[17,5,12,8,5,10],[2,17,1,17,5,1],[0,17,5],[12,17,5],[2,17,8,8,17,5],[0,17,5],[12,17,5],[10,9,5,9,17,5],[0,5,10,17,5,0],[17,5,12,8,5,10],[9,5,1,9,17,5],[0,17,5],[12,17,5],[8,17,5,9,17,8],[0,17,5],[12,17,5],[5,7,14,5,14,4],[0,7,14,0,5,7],[8,5,7,9,8,7,9,7,14],[4,1,14,1,7,14],[1,7,14,1,14,0],[1,7,9,9,7,14],[4,8,14,8,10,14,10,7,14],[10,14,0,10,7,14],[10,14,9,10,7,14],[4,5,2,2,5,7],[2,
5,7,2,0,5],[2,8,7,8,5,7],[2,4,1,2,1,7],[1,7,2],[1,7,2],[2,4,8,2,10,7],[10,7,2],[10,7,2],[4,5,9,9,5,11,11,5,7],[11,0,5,11,5,7],[8,5,7,11,8,7],[9,4,1,11,1,7],[1,7,11],[1,7,11],[9,4,8,11,10,7],[10,7,11],[10,7,11],[4,5,3,4,3,14],[3,14,0,3,0,5],[3,14,9,3,8,5],[3,14,1,14,4,1],[0,3,14],[9,3,14],[3,14,8,8,14,4],[0,3,14],[9,3,14],[3,2,4,3,4,5],[0,5,3],[8,5,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,5,9,4,5],[0,5,3],[8,5,3],[9,4,1],[],[],[9,4,8],[],[],[4,5,10,4,11,14,4,10,11],[11,14,0,10,0,5],[11,14,9,10,8,5],[11,
14,4,11,4,1],[0,11,14],[9,11,14],[11,14,8,8,14,4],[0,11,14],[9,11,14],[10,4,5,10,2,4],[0,5,10],[8,5,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,5,9,4,5],[0,5,10],[8,5,10],[9,4,1],[],[],[9,4,8],[],[],[5,7,12,7,14,12],[0,7,14,0,5,7],[8,5,7,9,8,7,9,7,14],[12,1,14,1,7,14],[1,7,14,1,14,0],[1,7,9,9,7,14],[8,10,14,12,8,14,10,7,14],[10,14,0,10,7,14],[10,14,9,10,7,14],[12,5,2,2,5,7],[2,5,7,2,0,5],[2,8,7,8,5,7],[2,1,7,2,12,1],[1,7,2],[1,7,2],[2,10,7,2,12,8],[10,7,2],[10,7,2],[12,5,9,9,5,11,11,5,7],[11,0,5,11,5,7],
[8,5,7,11,8,7],[9,12,1,11,1,7],[1,7,11],[1,7,11],[9,12,8,11,10,7],[10,7,11],[10,7,11],[12,3,14,12,5,3],[3,14,0,3,0,5],[3,14,9,3,8,5],[3,14,12,3,12,1],[0,3,14],[9,3,14],[3,14,8,8,14,12],[0,3,14],[9,3,14],[3,12,5,3,2,12],[0,5,3],[8,5,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,5,9,12,5],[0,5,3],[8,5,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,14,12,10,11,12,5,10],[11,14,0,10,0,5],[11,14,9,10,8,5],[11,12,1,11,14,12],[0,11,14],[9,11,14],[11,14,12,11,12,8],[0,11,14],[9,11,14],[10,2,12,10,12,5],[0,5,10],[8,5,10],
[2,12,1],[],[],[2,12,8],[],[],[10,12,5,10,9,12],[0,5,10],[8,5,10],[9,12,1],[],[],[9,12,8],[],[],[16,13,14,17,16,14,14,13,7],[16,0,17,0,7,14,13,7,0],[16,12,17,8,7,9,13,7,8,9,7,14],[1,17,16,1,14,17,1,7,14],[1,7,14,1,14,0,0,17,16],[1,7,9,9,7,14,12,17,16],[16,8,17,8,14,17,8,10,14,10,7,14],[10,14,0,10,7,14,0,17,16],[10,14,9,10,7,14,12,17,16],[16,13,2,16,2,17,13,7,2],[2,13,7,2,0,13,0,17,16],[2,8,7,12,17,16,8,13,7],[2,17,16,2,16,1,2,1,7],[1,7,2,0,17,16],[1,7,2,12,17,16],[2,17,8,2,10,7,8,17,16],[0,17,16,
10,7,2],[12,17,16,10,7,2],[16,13,9,16,9,17,13,11,9,13,7,11],[11,0,13,11,13,7,0,17,16],[11,13,7,11,8,13,12,17,16],[9,16,1,9,17,16,11,1,7],[1,7,11,0,17,16],[1,7,11,12,17,16],[9,17,16,9,16,8,11,10,7],[0,17,16,10,7,11],[12,17,16,10,7,11],[13,14,16,13,3,14,16,14,17],[3,14,0,3,0,13,0,17,16],[3,14,9,3,8,13,12,17,16],[3,14,1,14,17,1,17,16,1],[0,17,16,0,3,14],[9,3,14,12,17,16],[3,14,8,8,17,16,14,17,8],[0,17,16,0,3,14],[9,3,14,12,17,16],[3,2,13,13,2,16,2,17,16],[0,13,3,17,16,0],[8,13,3,17,16,12],[2,17,16,2,
16,1],[0,17,16],[12,17,16],[2,17,8,8,17,16],[0,17,16],[12,17,16],[3,9,13,13,9,16,9,17,16],[0,13,3,17,16,0],[8,13,3,17,16,12],[9,16,1,9,17,16],[0,17,16],[12,17,16],[9,16,8,9,17,16],[0,17,16],[12,17,16],[13,14,16,13,11,14,10,11,13,16,14,17],[10,0,13,0,17,16,11,14,0],[10,8,13,11,14,9,12,17,16],[11,14,1,14,17,1,17,16,1],[0,17,16,0,11,14],[9,11,14,12,17,16],[8,17,16,14,17,8,11,14,8],[0,17,16,0,11,14],[9,11,14,12,17,16],[10,2,13,13,2,16,2,17,16],[0,13,10,17,16,0],[17,16,12,8,13,10],[2,17,16,2,16,1],[0,
17,16],[12,17,16],[2,17,8,8,17,16],[0,17,16],[12,17,16],[10,9,13,13,9,16,9,17,16],[0,13,10,17,16,0],[17,16,12,8,13,10],[9,16,1,9,17,16],[0,17,16],[12,17,16],[9,16,8,9,17,16],[0,17,16],[12,17,16],[4,13,14,7,14,13],[0,7,14,0,13,7],[8,13,7,9,8,7,9,7,14],[4,1,14,1,7,14],[1,7,14,1,14,0],[1,7,9,9,7,14],[4,8,14,8,10,14,10,7,14],[10,14,0,10,7,14],[10,14,9,10,7,14],[4,13,2,2,13,7],[2,13,7,2,0,13],[2,8,7,8,13,7],[2,4,1,2,1,7],[1,7,2],[1,7,2],[2,4,8,2,10,7],[10,7,2],[10,7,2],[4,13,9,9,13,11,11,13,7],[11,0,13,
11,13,7],[11,8,13,11,13,7],[9,4,1,11,1,7],[1,7,11],[1,7,11],[9,4,8,11,10,7],[10,7,11],[10,7,11],[4,3,14,4,13,3],[3,14,0,3,0,13],[3,14,9,3,8,13],[3,14,1,14,4,1],[0,3,14],[9,3,14],[3,14,8,8,14,4],[0,3,14],[9,3,14],[3,2,13,13,2,4],[0,13,3],[8,13,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,13,9,4,13],[0,13,3],[8,13,3],[9,4,1],[],[],[9,4,8],[],[],[4,11,14,4,10,11,4,13,10],[11,14,0,10,0,13],[11,14,9,10,8,13],[11,14,4,11,4,1],[0,11,14],[9,11,14],[11,14,8,8,14,4],[0,11,14],[9,11,14],[10,4,13,10,2,4],[0,13,10],[8,
13,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,13,9,4,13],[0,13,10],[8,13,10],[9,4,1],[],[],[9,4,8],[],[],[13,7,14,13,14,12],[0,7,14,0,13,7],[8,13,7,9,8,7,9,7,14],[12,1,14,1,7,14],[1,7,14,1,14,0],[1,7,9,9,7,14],[8,10,14,12,8,14,10,7,14],[10,14,0,10,7,14],[10,14,9,10,7,14],[12,13,2,2,13,7],[2,13,7,2,0,13],[2,8,7,8,13,7],[2,1,7,2,12,1],[1,7,2],[1,7,2],[2,10,7,2,12,8],[10,7,2],[10,7,2],[12,13,9,11,13,7,9,13,11],[11,0,13,11,13,7],[11,8,13,11,13,7],[9,12,1,11,1,7],[1,7,11],[1,7,11],[9,12,8,11,10,7],[10,7,11],
[10,7,11],[12,3,14,12,13,3],[3,14,0,3,0,13],[3,14,9,3,8,13],[3,14,12,3,12,1],[0,3,14],[9,3,14],[3,14,8,8,14,12],[0,3,14],[9,3,14],[3,12,13,3,2,12],[0,13,3],[8,13,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,13,9,12,13],[0,13,3],[8,13,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,14,12,10,11,12,13,10],[11,14,0,10,0,13],[11,14,9,10,8,13],[11,12,1,11,14,12],[0,11,14],[9,11,14],[11,14,12,11,12,8],[0,11,14],[9,11,14],[10,2,12,10,12,13],[0,13,10],[8,13,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,13,10,9,12],[0,13,10],
[8,13,10],[9,12,1],[],[],[9,12,8],[],[],[15,19,18],[19,18,0,19,0,15,0,18,15],[19,9,15,19,12,9,19,18,12,18,8,12,18,15,8,15,9,8],[18,1,19,1,15,19],[1,15,0,1,0,18,18,0,19,0,15,19],[1,15,9,1,12,18,18,12,19,15,19,9,12,9,19],[15,8,10,19,8,15,19,18,8,18,13,8],[13,0,18,18,0,19,0,15,19,0,10,15],[13,12,18,18,12,19,12,9,19,15,19,9,10,15,9],[19,18,2,2,18,15],[2,0,15,2,19,0,0,19,18,0,18,15],[2,8,15,2,19,12,12,19,18,12,18,8,15,8,18],[2,1,15,2,18,1,2,19,18],[1,15,2,1,0,18,18,0,19,0,2,19],[1,15,2,1,12,18,12,2,19,
18,12,19],[2,19,8,2,10,15,13,8,18,19,18,8],[13,0,18,18,0,19,0,2,19,10,15,2],[12,2,19,18,12,19,13,12,18,10,15,2],[15,11,9,18,15,9,18,9,14,19,18,14],[14,19,0,19,18,0,0,18,15,0,15,11],[14,19,12,12,19,18,12,18,8,15,8,18,11,8,15],[11,1,15,1,9,18,14,18,9,14,19,18],[1,15,11,1,0,18,0,19,18,0,14,19],[1,15,11,1,12,18,12,14,19,18,12,19],[11,10,15,9,13,8,9,14,13,14,18,13,14,19,18],[13,0,18,0,19,18,0,14,19,10,15,11],[12,14,19,18,12,19,13,12,18,10,15,11],[3,19,18],[3,0,18,3,19,0,0,19,18],[3,8,18,3,19,9,9,19,12,
12,18,8,12,19,18],[3,19,1,1,19,18],[1,0,18,18,0,19,0,3,19],[1,12,18,9,3,19,12,9,19,18,12,19],[3,19,8,13,8,18,18,8,19],[13,0,18,18,0,19,0,3,19],[9,3,19,12,9,19,18,12,19,13,12,18],[3,2,18,2,19,18],[2,19,0,0,19,18,0,18,3],[2,19,12,8,18,3,12,18,8,12,19,18],[2,19,18,2,18,1],[1,0,18,18,0,19,0,2,19],[1,12,18,12,2,19,18,12,19],[2,19,8,8,18,13,19,18,8],[13,0,18,18,0,19,0,2,19],[12,2,19,18,12,19,13,12,18],[3,9,18,14,19,18,14,18,9],[14,19,0,19,18,0,0,18,3],[8,18,3,12,18,8,12,19,18,14,19,12],[9,18,1,14,18,9,
14,19,18],[1,0,18,0,19,18,0,14,19],[1,12,18,12,14,19,18,12,19],[9,13,8,9,14,13,14,18,13,14,19,18],[13,0,18,0,19,18,0,14,19],[12,14,19,18,12,19,13,12,18],[18,10,11,19,18,11],[11,19,0,0,19,18,0,18,10],[11,19,9,12,19,18,9,19,12,12,18,8,10,8,18],[1,11,19,1,19,18],[1,0,18,18,0,19,0,11,19],[1,12,18,9,11,19,12,9,19,18,12,19],[13,8,18,18,8,19,11,19,8],[13,0,18,18,0,19,0,11,19],[9,11,19,12,9,19,18,12,19,13,12,18],[2,18,10,2,19,18],[2,19,0,0,19,18,0,18,10],[2,19,12,8,18,10,12,18,8,12,19,18],[2,19,18,2,18,1],
[1,0,18,18,0,19,0,2,19],[1,12,18,12,2,19,18,12,19],[2,19,8,8,18,13,19,18,8],[13,0,18,18,0,19,0,2,19],[12,2,19,18,12,19,13,12,18],[14,19,18,14,18,9,10,9,18],[14,19,0,19,18,0,0,18,10],[8,18,10,12,18,8,12,19,18,14,19,12],[9,18,1,14,18,9,14,19,18],[1,0,18,0,19,18,0,14,19],[1,12,18,12,14,19,18,12,19],[9,13,8,9,14,13,14,18,13,14,19,18],[13,0,18,0,19,18,0,14,19],[12,14,19,18,12,19,13,12,18],[19,4,15,4,18,15],[4,18,0,4,0,19,0,15,19,0,18,15],[4,18,8,4,9,19,9,15,19,9,8,15,15,8,18],[4,15,19,4,1,15,4,18,1],[1,
4,18,1,15,0,15,19,0,0,19,4],[1,4,18,1,15,9,9,19,4,15,19,9],[4,8,19,4,18,13,10,15,8,19,8,15],[10,15,0,15,19,0,0,19,4,13,4,18],[9,19,4,15,19,9,10,15,9,13,4,18],[4,18,15,4,15,2,4,2,19],[2,19,4,2,0,15,15,0,18,0,4,18],[2,19,4,2,8,15,8,4,18,15,8,18],[2,4,1,2,19,4,2,1,15,1,4,18],[1,15,2,1,4,18,19,4,2],[1,15,2,1,4,18,19,4,2],[2,4,8,2,19,4,2,10,15,13,4,18],[19,4,2,10,15,2,13,4,18],[19,4,2,10,15,2,13,4,18],[4,18,9,4,14,19,11,9,15,18,15,9],[11,0,15,15,0,18,0,4,18,14,19,4],[8,4,18,15,8,18,11,8,15,14,19,4],[9,
4,1,1,4,18,11,1,15,14,19,4],[1,15,11,1,4,18,19,4,14],[1,15,11,1,4,18,19,4,14],[9,4,8,11,10,15,13,4,18,14,19,4],[10,15,11,13,4,18,19,4,14],[10,15,11,13,4,18,19,4,14],[4,18,3,4,3,19],[3,19,0,3,0,18,19,4,0,0,4,18],[3,19,9,3,8,18,9,19,4,18,8,4],[3,4,1,3,19,4,1,4,18],[1,4,18,0,19,4,0,3,19],[1,4,18,19,9,3,19,4,9],[3,4,8,3,19,4,13,4,18],[0,19,4,0,3,19,13,4,18],[19,9,3,13,4,18,19,4,9],[3,2,4,3,4,18,2,19,4],[2,19,4,0,4,18,0,18,3],[2,19,4,18,3,8,18,8,4],[2,19,4,2,4,1,1,4,18],[1,4,18,19,4,2],[1,4,18,19,4,2],
[2,19,4,2,4,8,13,4,18],[19,4,2,13,4,18],[19,4,2,13,4,18],[3,9,4,3,4,18,14,19,4],[0,4,18,0,18,3,14,19,4],[18,3,8,14,19,4,18,8,4],[9,4,1,1,4,18,14,19,4],[1,4,18,19,4,14],[1,4,18,19,4,14],[9,4,8,13,4,18,14,19,4],[13,4,18,19,4,14],[13,4,18,19,4,14],[4,18,10,4,10,11,4,11,19],[11,19,4,11,4,0,0,4,10,18,10,4],[11,19,9,9,19,4,18,8,4,10,8,18],[1,4,18,11,4,1,11,19,4],[1,4,18,0,11,4,19,4,11],[1,4,18,19,4,9,19,9,11],[11,4,8,11,19,4,13,4,18],[0,11,4,13,4,18,19,4,11],[13,4,18,19,4,9,19,9,11],[2,19,4,10,2,4,10,4,
18],[2,19,4,0,4,10,18,10,4],[2,19,4,18,8,4,18,10,8],[2,19,4,2,4,1,1,4,18],[1,4,18,19,4,2],[1,4,18,19,4,2],[2,19,4,2,4,8,13,4,18],[19,4,2,13,4,18],[19,4,2,13,4,18],[10,9,4,10,4,18,14,19,4],[0,4,10,14,19,4,18,10,4],[14,19,4,18,8,4,18,10,8],[9,4,1,1,4,18,14,19,4],[1,4,18,19,4,14],[1,4,18,19,4,14],[9,4,8,13,4,18,14,19,4],[13,4,18,19,4,14],[13,4,18,19,4,14],[19,17,15,17,12,15,15,12,16,18,15,16],[0,19,17,0,15,19,0,18,15,0,16,18],[17,9,19,9,15,19,9,8,15,15,8,18,16,18,8],[16,18,1,1,15,12,15,17,12,15,19,17],
[1,16,18,1,15,0,15,19,0,19,17,0],[1,16,18,1,15,9,9,19,17,15,19,9],[16,18,13,10,12,8,10,15,12,15,19,17,15,17,12],[10,15,0,15,19,0,19,17,0,13,16,18],[9,19,17,15,19,9,10,15,9,13,16,18],[17,2,19,2,12,15,15,12,16,15,16,18],[2,19,17,2,0,15,15,0,18,18,0,16],[2,19,17,2,8,15,8,16,18,15,8,18],[2,19,17,2,1,15,2,12,1,1,16,18],[1,15,2,1,16,18,19,17,2],[1,15,2,1,16,18,19,17,2],[2,19,17,2,10,15,2,12,8,13,16,18],[19,17,2,10,15,2,13,16,18],[19,17,2,10,15,2,13,16,18],[17,14,19,11,9,12,11,12,15,15,16,18,15,12,16],[11,
0,15,15,0,18,18,0,16,14,19,17],[8,16,18,15,8,18,11,8,15,14,19,17],[9,12,1,1,16,18,11,1,15,14,19,17],[1,15,11,1,16,18,19,17,14],[1,15,11,1,16,18,19,17,14],[9,12,8,11,10,15,13,16,18,14,19,17],[10,15,11,13,16,18,19,17,14],[10,15,11,13,16,18,19,17,14],[17,12,3,17,3,19,3,16,18,12,16,3],[3,19,17,3,17,0,3,0,16,3,16,18],[3,19,9,3,8,18,9,19,17,18,8,16],[3,19,17,3,17,12,3,12,1,1,16,18],[1,16,18,0,3,17,19,17,3],[1,16,18,19,9,3,19,17,9],[3,19,17,3,17,12,3,12,8,13,16,18],[0,3,17,19,17,3,13,16,18],[19,9,3,13,16,
18,19,17,9],[3,16,18,3,12,16,3,2,12,2,19,17],[2,19,17,0,16,3,18,3,16],[2,19,17,18,3,8,18,8,16],[2,19,17,2,12,1,1,16,18],[1,16,18,19,17,2],[1,16,18,19,17,2],[2,19,17,2,12,8,13,16,18],[19,17,2,13,16,18],[19,17,2,13,16,18],[3,16,18,3,12,16,3,9,12,14,19,17],[0,16,3,18,3,16,14,19,17],[18,3,8,14,19,17,18,8,16],[9,12,1,1,16,18,14,19,17],[1,16,18,19,17,14],[1,16,18,19,17,14],[9,12,8,13,16,18,14,19,17],[13,16,18,19,17,14],[13,16,18,19,17,14],[17,12,11,17,11,19,12,10,11,16,10,12,16,18,10],[11,17,0,11,19,17,
0,16,10,18,10,16],[11,19,17,11,17,9,10,16,18,10,8,16],[1,16,18,11,19,17,11,17,12,11,12,1],[1,16,18,0,11,17,19,17,11],[1,16,18,17,9,11,19,17,11],[11,19,17,11,17,12,11,12,8,13,16,18],[0,11,17,13,16,18,19,17,11],[13,16,18,17,9,11,19,17,11],[2,19,17,10,16,18,10,12,16,10,2,12],[2,19,17,0,16,10,18,10,16],[2,19,17,16,10,8,18,10,16],[2,19,17,2,12,1,1,16,18],[1,16,18,19,17,2],[1,16,18,19,17,2],[2,19,17,2,12,8,13,16,18],[19,17,2,13,16,18],[19,17,2,13,16,18],[10,16,18,10,12,16,10,9,12,14,19,17],[0,16,10,14,
19,17,18,10,16],[14,19,17,16,10,8,18,10,16],[9,12,1,1,16,18,14,19,17],[1,16,18,19,17,14],[1,16,18,19,17,14],[9,12,8,13,16,18,14,19,17],[13,16,18,19,17,14],[13,16,18,19,17,14],[5,15,19],[5,15,0,5,0,19,0,15,19],[5,15,8,5,12,19,12,9,19,9,8,15,9,15,19],[5,1,19,1,15,19],[1,15,0,15,19,0,0,19,5],[1,15,9,9,19,12,15,19,9,12,19,5],[5,8,19,10,15,8,15,19,8],[10,15,0,15,19,0,0,19,5],[9,19,12,15,19,9,10,15,9,12,19,5],[5,15,2,5,2,19],[2,19,0,2,0,15,19,5,0,0,5,15],[2,19,12,2,8,15,12,19,5,15,8,5],[2,5,1,2,19,5,2,
1,15],[1,15,2,0,19,5,0,2,19],[1,15,2,19,12,2,19,5,12],[2,5,8,2,19,5,2,10,15],[0,19,5,0,2,19,10,15,2],[19,12,2,10,15,2,19,5,12],[5,15,11,5,11,9,5,9,14,5,14,19],[14,19,5,14,5,0,0,5,11,15,11,5],[14,19,12,12,19,5,15,8,5,11,8,15],[11,1,15,9,5,1,14,5,9,14,19,5],[1,15,11,0,14,5,19,5,14],[1,15,11,19,5,12,19,12,14],[11,10,15,9,5,8,14,5,9,14,19,5],[0,14,5,10,15,11,19,5,14],[10,15,11,19,5,12,19,12,14],[5,3,19],[3,0,5,3,19,0,0,19,5],[3,8,5,3,19,9,9,19,12,12,19,5],[3,19,1,1,19,5],[0,19,5,0,3,19],[9,3,19,12,9,
19,12,19,5],[3,19,8,19,5,8],[0,19,5,0,3,19],[9,3,19,12,9,19,12,19,5],[3,2,5,2,19,5],[2,19,0,19,5,0,0,5,3],[2,19,12,12,19,5,8,5,3],[2,19,5,2,5,1],[0,19,5,0,2,19],[19,12,2,19,5,12],[2,19,5,2,5,8],[0,19,5,0,2,19],[19,12,2,19,5,12],[3,9,5,9,14,5,14,19,5],[14,5,0,14,19,5,0,5,3],[12,19,5,14,19,12,8,5,3],[9,5,1,14,5,9,14,19,5],[0,14,5,19,5,14],[19,12,14,19,5,12],[9,5,8,14,5,9,14,19,5],[0,14,5,19,5,14],[19,12,14,19,5,12],[5,11,19,5,10,11],[10,0,5,0,19,5,11,19,0],[10,8,5,9,19,12,11,19,9,12,19,5],[1,11,5,19,
5,11],[0,19,5,0,11,19],[9,11,19,12,9,19,12,19,5],[19,5,8,11,19,8],[0,19,5,0,11,19],[9,11,19,12,9,19,12,19,5],[10,2,5,2,19,5],[2,19,0,19,5,0,0,5,10],[2,19,12,12,19,5,8,5,10],[2,19,5,2,5,1],[0,19,5,0,2,19],[19,12,2,19,5,12],[2,19,5,2,5,8],[0,19,5,0,2,19],[19,12,2,19,5,12],[10,9,5,9,14,5,14,19,5],[14,5,0,14,19,5,0,5,10],[12,19,5,14,19,12,8,5,10],[9,5,1,14,5,9,14,19,5],[0,14,5,19,5,14],[19,12,14,19,5,12],[9,5,8,14,5,9,14,19,5],[0,14,5,19,5,14],[19,12,14,19,5,12],[5,15,4,4,15,19],[4,0,19,0,15,19,0,5,15],
[4,9,19,8,5,15,9,8,15,9,15,19],[4,15,19,4,1,15],[1,15,0,15,19,0,0,19,4],[1,15,9,9,19,4,15,19,9],[4,8,19,8,10,15,19,8,15],[10,15,0,15,19,0,0,19,4],[9,19,4,15,19,9,10,15,9],[4,5,2,4,2,19,2,5,15],[2,19,4,2,0,15,15,0,5],[2,19,4,2,8,15,8,5,15],[2,4,1,2,19,4,2,1,15],[1,15,2,19,4,2],[1,15,2,19,4,2],[2,4,8,2,19,4,2,10,15],[19,4,2,10,15,2],[19,4,2,10,15,2],[4,5,9,4,14,19,9,5,11,11,5,15],[11,0,5,11,5,15,14,19,4],[8,5,15,11,8,15,14,19,4],[9,4,1,11,1,15,14,19,4],[1,15,11,19,4,14],[1,15,11,19,4,14],[9,4,8,11,
10,15,14,19,4],[10,15,11,19,4,14],[10,15,11,19,4,14],[4,5,3,4,3,19],[3,19,0,3,0,5,19,4,0],[3,19,9,3,8,5,9,19,4],[3,4,1,3,19,4],[0,19,4,0,3,19],[19,9,3,19,4,9],[3,4,8,3,19,4],[0,19,4,0,3,19],[19,9,3,19,4,9],[3,2,4,3,4,5,2,19,4],[2,19,4,0,5,3],[2,19,4,8,5,3],[2,19,4,2,4,1],[19,4,2],[19,4,2],[2,19,4,2,4,8],[19,4,2],[19,4,2],[3,9,5,9,4,5,14,19,4],[0,5,3,14,19,4],[8,5,3,14,19,4],[9,4,1,14,19,4],[19,4,14],[19,4,14],[9,4,8,14,19,4],[19,4,14],[19,4,14],[4,5,10,4,11,19,4,10,11],[11,19,4,11,4,0,10,0,5],[11,
19,9,9,19,4,10,8,5],[11,19,4,11,4,1],[0,11,4,19,4,11],[19,9,11,19,4,9],[11,19,4,11,4,8],[0,11,4,19,4,11],[19,9,11,19,4,9],[10,4,5,10,2,4,2,19,4],[2,19,4,0,5,10],[2,19,4,8,5,10],[2,19,4,2,4,1],[19,4,2],[19,4,2],[2,19,4,2,4,8],[19,4,2],[19,4,2],[10,9,5,9,4,5,14,19,4],[0,5,10,14,19,4],[8,5,10,14,19,4],[9,4,1,14,19,4],[19,4,14],[19,4,14],[9,4,8,14,19,4],[19,4,14],[19,4,14],[5,15,12,15,19,17,15,17,12],[0,19,17,0,15,19,0,5,15],[8,5,15,9,8,15,9,15,19,17,9,19],[12,1,15,12,15,17,17,15,19],[1,15,0,15,19,0,
19,17,0],[1,15,9,9,19,17,15,19,9],[8,10,12,12,10,15,12,15,17,17,15,19],[10,15,0,15,19,0,19,17,0],[9,19,17,15,19,9,10,15,9],[12,5,2,2,5,15,17,2,19],[2,19,17,2,0,15,15,0,5],[2,19,17,2,8,15,8,5,15],[2,19,17,2,1,15,2,12,1],[1,15,2,19,17,2],[1,15,2,19,17,2],[2,19,17,2,10,15,2,12,8],[19,17,2,10,15,2],[19,17,2,10,15,2],[12,5,9,9,5,11,17,14,19,11,5,15],[11,0,5,11,5,15,14,19,17],[8,5,15,11,8,15,14,19,17],[9,12,1,11,1,15,14,19,17],[1,15,11,19,17,14],[1,15,11,19,17,14],[9,12,8,11,10,15,14,19,17],[10,15,11,19,
17,14],[10,15,11,19,17,14],[17,12,3,17,3,19,12,5,3],[3,19,17,3,17,0,3,0,5],[3,19,9,3,8,5,9,19,17],[3,19,17,3,17,12,3,12,1],[0,3,17,19,17,3],[19,9,3,19,17,9],[3,19,17,3,17,12,3,12,8],[0,3,17,19,17,3],[19,9,3,19,17,9],[3,12,5,3,2,12,2,19,17],[2,19,17,0,5,3],[2,19,17,8,5,3],[2,19,17,2,12,1],[19,17,2],[19,17,2],[2,19,17,2,12,8],[19,17,2],[19,17,2],[3,9,5,14,19,17,9,12,5],[0,5,3,14,19,17],[8,5,3,14,19,17],[9,12,1,14,19,17],[19,17,14],[19,17,14],[9,12,8,14,19,17],[19,17,14],[19,17,14],[17,12,11,17,11,19,
12,10,11,12,5,10],[11,17,0,11,19,17,10,0,5],[11,19,17,11,17,9,10,8,5],[11,17,12,11,19,17,11,12,1],[0,11,17,19,17,11],[19,17,11,17,9,11],[11,17,12,11,19,17,11,12,8],[0,11,17,19,17,11],[19,17,11,17,9,11],[10,2,12,10,12,5,2,19,17],[2,19,17,0,5,10],[2,19,17,8,5,10],[2,19,17,2,12,1],[19,17,2],[19,17,2],[2,19,17,2,12,8],[19,17,2],[19,17,2],[10,12,5,10,9,12,14,19,17],[0,5,10,14,19,17],[8,5,10,14,19,17],[9,12,1,14,19,17],[19,17,14],[19,17,14],[9,12,8,14,19,17],[19,17,14],[19,17,14],[15,16,13,19,16,15],[16,
0,19,0,15,19,0,13,15],[16,12,19,9,15,19,12,9,19,9,8,15,13,15,8],[1,19,16,1,15,19],[1,15,0,15,19,0,0,19,16],[1,15,9,9,19,12,15,19,9,12,19,16],[10,15,8,15,19,8,16,8,19],[10,15,0,15,19,0,0,19,16],[9,19,12,15,19,9,10,15,9,12,19,16],[16,13,2,16,2,19,2,13,15],[2,19,16,2,16,0,2,0,13,2,13,15],[2,19,12,2,8,15,12,19,16,15,8,13],[2,19,16,2,16,1,2,1,15],[1,15,2,0,2,16,19,16,2],[1,15,2,19,12,2,19,16,12],[2,19,16,2,16,8,2,10,15],[0,2,16,19,16,2,10,15,2],[19,12,2,10,15,2,19,16,12],[16,13,9,16,9,14,16,14,19,13,11,
9,13,15,11],[14,16,0,14,19,16,0,13,11,15,11,13],[14,19,16,14,16,12,11,13,15,11,8,13],[11,1,15,14,19,16,14,16,9,9,16,1],[1,15,11,0,14,16,19,16,14],[1,15,11,16,12,14,19,16,14],[11,10,15,14,19,16,14,16,9,9,16,8],[0,14,16,10,15,11,19,16,14],[10,15,11,16,12,14,19,16,14],[13,3,16,3,19,16],[3,19,0,3,0,13,0,19,16],[3,19,9,3,8,13,9,19,12,12,19,16],[3,19,16,3,16,1],[0,19,16,0,3,19],[9,3,19,12,9,19,12,19,16],[3,19,8,19,16,8],[0,19,16,0,3,19],[9,3,19,12,9,19,12,19,16],[3,2,13,13,2,16,2,19,16],[2,19,16,2,16,0,
0,13,3],[2,19,12,12,19,16,8,13,3],[2,19,16,2,16,1],[0,2,16,19,16,2],[19,12,2,19,16,12],[2,19,16,2,16,8],[0,2,16,19,16,2],[19,12,2,19,16,12],[3,9,13,13,9,16,14,19,16,9,14,16],[14,16,0,14,19,16,0,13,3],[14,16,12,14,19,16,8,13,3],[9,16,1,14,16,9,14,19,16],[0,14,16,19,16,14],[19,16,14,16,12,14],[9,16,8,14,16,9,14,19,16],[0,14,16,19,16,14],[19,16,14,16,12,14],[13,10,11,16,13,11,16,11,19],[10,0,13,0,19,16,11,19,0],[10,8,13,9,19,12,11,19,9,12,19,16],[1,11,16,19,16,11],[0,19,16,0,11,19],[9,11,19,12,9,19,
12,19,16],[11,19,16,11,16,8],[0,19,16,0,11,19],[9,11,19,12,9,19,12,19,16],[10,2,13,13,2,16,2,19,16],[2,19,16,2,16,0,0,13,10],[2,19,12,12,19,16,8,13,10],[2,19,16,2,16,1],[0,2,16,19,16,2],[19,12,2,19,16,12],[2,19,16,2,16,8],[0,2,16,19,16,2],[19,12,2,19,16,12],[10,9,13,13,9,16,9,14,16,14,19,16],[14,16,0,14,19,16,0,13,10],[14,16,12,14,19,16,8,13,10],[9,16,1,14,16,9,14,19,16],[0,14,16,19,16,14],[19,16,14,16,12,14],[9,16,8,14,16,9,14,19,16],[0,14,16,19,16,14],[19,16,14,16,12,14],[4,13,15,4,15,19],[4,0,
19,0,15,19,0,13,15],[4,9,19,8,13,15,9,8,15,9,15,19],[4,15,19,4,1,15],[1,15,0,15,19,0,0,19,4],[1,15,9,9,19,4,15,19,9],[4,8,19,8,10,15,19,8,15],[10,15,0,15,19,0,0,19,4],[9,19,4,15,19,9,10,15,9],[4,2,19,4,13,2,2,13,15],[2,19,4,2,13,15,2,0,13],[2,19,4,2,8,15,8,13,15],[2,4,1,2,19,4,2,1,15],[1,15,2,19,4,2],[1,15,2,19,4,2],[2,4,8,2,19,4,2,10,15],[19,4,2,10,15,2],[19,4,2,10,15,2],[4,14,19,4,13,9,9,13,11,11,13,15],[11,0,13,11,13,15,14,19,4],[11,8,13,11,13,15,14,19,4],[9,4,1,11,1,15,14,19,4],[1,15,11,19,4,
14],[1,15,11,19,4,14],[9,4,8,11,10,15,14,19,4],[10,15,11,19,4,14],[10,15,11,19,4,14],[4,3,19,4,13,3],[3,19,0,3,0,13,19,4,0],[3,19,9,3,8,13,9,19,4],[3,4,1,3,19,4],[0,19,4,0,3,19],[19,9,3,19,4,9],[3,4,8,3,19,4],[0,19,4,0,3,19],[19,9,3,19,4,9],[3,2,13,13,2,4,2,19,4],[2,19,4,0,13,3],[2,19,4,8,13,3],[2,19,4,2,4,1],[19,4,2],[19,4,2],[2,19,4,2,4,8],[19,4,2],[19,4,2],[3,9,13,9,4,13,14,19,4],[0,13,3,14,19,4],[8,13,3,14,19,4],[9,4,1,14,19,4],[19,4,14],[19,4,14],[9,4,8,14,19,4],[19,4,14],[19,4,14],[4,11,19,
4,10,11,4,13,10],[11,19,4,11,4,0,10,0,13],[11,19,9,9,19,4,10,8,13],[11,19,4,11,4,1],[0,11,4,19,4,11],[19,9,11,19,4,9],[11,19,4,11,4,8],[0,11,4,19,4,11],[19,9,11,19,4,9],[10,4,13,10,2,4,2,19,4],[2,19,4,0,13,10],[2,19,4,8,13,10],[2,19,4,2,4,1],[19,4,2],[19,4,2],[2,19,4,2,4,8],[19,4,2],[19,4,2],[10,9,13,9,4,13,14,19,4],[0,13,10,14,19,4],[8,13,10,14,19,4],[9,4,1,14,19,4],[19,4,14],[19,4,14],[9,4,8,14,19,4],[19,4,14],[19,4,14],[13,15,12,15,17,12,15,19,17],[0,19,17,0,15,19,0,13,15],[8,13,15,9,8,15,9,15,
19,17,9,19],[12,1,15,12,15,17,17,15,19],[1,15,0,15,19,0,19,17,0],[1,15,9,9,19,17,15,19,9],[8,10,12,12,10,15,12,15,17,17,15,19],[10,15,0,15,19,0,19,17,0],[9,19,17,15,19,9,10,15,9],[12,13,2,2,13,15,17,2,19],[2,19,17,2,13,15,2,0,13],[2,19,17,2,8,15,8,13,15],[2,19,17,2,1,15,2,12,1],[1,15,2,19,17,2],[1,15,2,19,17,2],[2,19,17,2,10,15,2,12,8],[19,17,2,10,15,2],[19,17,2,10,15,2],[12,13,9,11,13,15,9,13,11,17,14,19],[11,0,13,11,13,15,14,19,17],[11,8,13,11,13,15,14,19,17],[9,12,1,11,1,15,14,19,17],[1,15,11,
19,17,14],[1,15,11,19,17,14],[9,12,8,11,10,15,14,19,17],[10,15,11,19,17,14],[10,15,11,19,17,14],[17,12,3,17,3,19,12,13,3],[3,19,17,3,17,0,3,0,13],[3,19,9,3,8,13,9,19,17],[3,19,17,3,17,12,3,12,1],[0,3,17,19,17,3],[19,9,3,19,17,9],[3,19,17,3,17,12,3,12,8],[0,3,17,19,17,3],[19,9,3,19,17,9],[3,12,13,3,2,12,2,19,17],[2,19,17,0,13,3],[2,19,17,8,13,3],[2,19,17,2,12,1],[19,17,2],[19,17,2],[2,19,17,2,12,8],[19,17,2],[19,17,2],[3,9,13,9,12,13,14,19,17],[0,13,3,14,19,17],[8,13,3,14,19,17],[9,12,1,14,19,17],
[19,17,14],[19,17,14],[9,12,8,14,19,17],[19,17,14],[19,17,14],[17,12,11,17,11,19,12,10,11,12,13,10],[11,17,0,11,19,17,10,0,13],[11,19,17,11,17,9,10,8,13],[11,17,12,11,19,17,11,12,1],[0,11,17,19,17,11],[19,17,11,17,9,11],[11,17,12,11,19,17,11,12,8],[0,11,17,19,17,11],[19,17,11,17,9,11],[10,2,12,10,12,13,2,19,17],[2,19,17,0,13,10],[2,19,17,8,13,10],[2,19,17,2,12,1],[19,17,2],[19,17,2],[2,19,17,2,12,8],[19,17,2],[19,17,2],[10,12,13,10,9,12,14,19,17],[0,13,10,14,19,17],[8,13,10,14,19,17],[9,12,1,14,19,
17],[19,17,14],[19,17,14],[9,12,8,14,19,17],[19,17,14],[19,17,14],[6,18,15],[6,0,15,6,18,0,0,18,15],[6,9,15,6,18,12,12,18,8,8,15,9,8,18,15],[6,1,15,6,18,1],[1,0,18,1,15,0,18,0,6,0,15,6],[1,12,18,1,15,9,12,6,18,15,6,9],[6,10,15,6,8,10,6,13,8,6,18,13],[13,6,18,13,0,6,0,10,6,15,6,10],[13,12,18,12,6,18,15,6,9,10,15,9],[6,18,2,2,18,15],[2,0,15,15,0,18,0,6,18],[2,8,15,8,12,18,15,8,18,12,6,18],[2,6,1,2,1,15,1,6,18],[1,15,2,1,0,18,18,0,6],[1,15,2,1,12,18,12,6,18],[2,6,8,2,10,15,8,6,13,13,6,18],[13,0,6,13,
6,18,10,15,2],[12,6,18,13,12,18,10,15,2],[6,18,9,11,9,15,15,9,18],[11,0,15,15,0,18,0,6,18],[8,12,18,15,8,18,11,8,15,12,6,18],[9,6,1,1,6,18,11,1,15],[1,15,11,1,0,18,18,0,6],[1,15,11,1,12,18,12,6,18],[9,6,8,8,6,13,11,10,15,13,6,18],[13,0,6,13,6,18,10,15,11],[12,6,18,13,12,18,10,15,11],[6,18,3],[3,6,0,3,0,18,0,6,18],[3,6,9,3,8,18,8,12,18,12,6,18],[3,6,1,1,6,18],[1,0,18,18,0,6,0,3,6],[1,12,18,12,6,18,9,3,6],[3,6,8,8,6,13,13,6,18],[13,0,6,13,6,18,0,3,6],[12,6,18,13,12,18,9,3,6],[3,2,18,2,6,18],[0,6,18,
0,18,3],[8,18,3,12,18,8,12,6,18],[2,6,1,1,6,18],[1,0,18,18,0,6],[1,12,18,12,6,18],[2,6,8,8,6,13,13,6,18],[13,0,6,13,6,18],[12,6,18,13,12,18],[3,9,18,18,9,6],[0,6,18,0,18,3],[8,18,3,12,18,8,12,6,18],[9,6,1,1,6,18],[1,0,18,18,0,6],[1,12,18,12,6,18],[8,6,13,9,6,8,13,6,18],[13,0,6,13,6,18],[12,6,18,13,12,18],[6,18,10,6,10,11],[11,6,0,0,6,18,10,0,18],[11,6,9,8,12,18,10,8,18,12,6,18],[11,6,1,1,6,18],[1,0,18,18,0,6,0,11,6],[1,12,18,12,6,18,9,11,6],[11,6,8,8,6,13,13,6,18],[13,0,6,13,6,18,0,11,6],[12,6,18,
13,12,18,9,11,6],[2,6,10,18,10,6],[0,6,18,0,18,10],[8,18,10,12,18,8,12,6,18],[2,6,1,1,6,18],[1,0,18,18,0,6],[1,12,18,12,6,18],[2,6,8,8,6,13,13,6,18],[13,0,6,13,6,18],[12,6,18,13,12,18],[18,9,6,10,9,18],[0,6,18,0,18,10],[8,18,10,12,18,8,12,6,18],[9,6,1,1,6,18],[1,0,18,18,0,6],[1,12,18,12,6,18],[8,6,13,9,6,8,13,6,18],[13,0,6,13,6,18],[12,6,18,13,12,18],[6,4,15,4,18,15],[4,18,0,0,18,15,0,15,6],[4,18,8,8,15,9,8,18,15,9,15,6],[4,1,6,4,18,1,1,15,6],[1,4,18,1,15,0,15,6,0],[1,4,18,1,15,9,9,15,6],[4,8,6,4,
18,13,8,10,6,10,15,6],[10,6,0,10,15,6,13,4,18],[9,15,6,10,15,9,13,4,18],[4,18,15,4,15,2],[2,0,15,15,0,18,0,4,18],[2,8,15,8,4,18,15,8,18],[2,4,1,2,1,15,1,4,18],[1,15,2,1,4,18],[1,15,2,1,4,18],[2,4,8,2,10,15,13,4,18],[10,15,2,13,4,18],[10,15,2,13,4,18],[4,18,9,9,15,11,18,15,9],[11,0,15,15,0,18,0,4,18],[8,4,18,15,8,18,11,8,15],[9,4,1,1,4,18,11,1,15],[1,15,11,1,4,18],[1,15,11,1,4,18],[9,4,8,11,10,15,13,4,18],[10,15,11,13,4,18],[10,15,11,13,4,18],[4,3,6,4,18,3],[3,0,18,3,6,0,18,0,4],[3,8,18,3,6,9,8,4,
18],[3,4,1,3,6,4,1,4,18],[1,4,18,0,3,6],[1,4,18,9,3,6],[3,6,8,8,6,4,13,4,18],[0,3,6,13,4,18],[9,3,6,13,4,18],[3,2,4,3,4,18],[0,4,18,0,18,3],[18,3,8,18,8,4],[2,4,1,1,4,18],[1,4,18],[1,4,18],[2,4,8,13,4,18],[13,4,18],[13,4,18],[3,9,4,3,4,18],[0,4,18,0,18,3],[18,3,8,18,8,4],[9,4,1,1,4,18],[1,4,18],[1,4,18],[9,4,8,13,4,18],[13,4,18],[13,4,18],[4,11,6,4,18,10,4,10,11],[10,4,18,10,0,4,11,6,0],[10,8,18,8,4,18,11,6,9],[11,6,4,11,4,1,1,4,18],[1,4,18,0,11,6],[1,4,18,9,11,6],[11,6,8,8,6,4,13,4,18],[0,11,6,13,
4,18],[9,11,6,13,4,18],[10,4,18,10,2,4],[0,4,10,18,10,4],[18,10,8,18,8,4],[2,4,1,1,4,18],[1,4,18],[1,4,18],[2,4,8,13,4,18],[13,4,18],[13,4,18],[10,4,18,10,9,4],[0,4,10,18,10,4],[18,10,8,18,8,4],[9,4,1,1,4,18],[1,4,18],[1,4,18],[9,4,8,13,4,18],[13,4,18],[13,4,18],[6,12,15,15,16,18,15,12,16],[0,16,18,0,18,15,0,15,6],[8,15,9,8,18,15,16,18,8,9,15,6],[12,1,6,1,15,6,16,18,1],[1,16,18,1,15,0,15,6,0],[1,16,18,1,15,9,9,15,6],[12,8,6,8,10,6,16,18,13,10,15,6],[10,6,0,10,15,6,13,16,18],[9,15,6,10,15,9,13,16,
18],[12,15,2,12,16,15,16,18,15],[2,0,15,15,0,18,18,0,16],[2,8,15,8,16,18,15,8,18],[2,1,15,2,12,1,1,16,18],[1,15,2,1,16,18],[1,15,2,1,16,18],[2,10,15,2,12,8,13,16,18],[10,15,2,13,16,18],[10,15,2,13,16,18],[9,12,11,12,15,11,12,16,15,16,18,15],[11,0,15,15,0,18,18,0,16],[8,16,18,15,8,18,11,8,15],[9,12,1,1,16,18,11,1,15],[1,15,11,1,16,18],[1,15,11,1,16,18],[9,12,8,11,10,15,13,16,18],[10,15,11,13,16,18],[10,15,11,13,16,18],[16,3,12,16,18,3,12,3,6],[3,16,18,3,0,16,3,6,0],[3,8,18,3,6,9,8,16,18],[3,6,12,3,
12,1,1,16,18],[1,16,18,0,3,6],[1,16,18,9,3,6],[3,6,8,13,16,18,8,6,12],[0,3,6,13,16,18],[9,3,6,13,16,18],[3,16,18,3,12,16,3,2,12],[0,16,3,18,3,16],[18,3,8,18,8,16],[2,12,1,1,16,18],[1,16,18],[1,16,18],[2,12,8,13,16,18],[13,16,18],[13,16,18],[3,16,18,3,12,16,3,9,12],[0,16,3,18,3,16],[18,3,8,18,8,16],[9,12,1,1,16,18],[1,16,18],[1,16,18],[9,12,8,13,16,18],[13,16,18],[13,16,18],[16,10,12,16,18,10,12,11,6,12,10,11],[10,0,16,10,16,18,11,6,0],[10,16,18,10,8,16,11,6,9],[11,12,1,11,6,12,1,16,18],[1,16,18,0,
11,6],[1,16,18,9,11,6],[11,6,12,11,12,8,13,16,18],[0,11,6,13,16,18],[9,11,6,13,16,18],[10,12,16,10,16,18,10,2,12],[0,16,10,18,10,16],[18,10,16,16,10,8],[2,12,1,1,16,18],[1,16,18],[1,16,18],[2,12,8,13,16,18],[13,16,18],[13,16,18],[10,12,16,10,16,18,10,9,12],[0,16,10,18,10,16],[18,10,16,16,10,8],[9,12,1,1,16,18],[1,16,18],[1,16,18],[9,12,8,13,16,18],[13,16,18],[13,16,18],[6,5,15],[5,0,6,5,15,0,0,15,6],[5,12,6,5,15,8,8,15,9,9,15,6],[5,1,6,1,15,6],[1,15,0,15,6,0,0,6,5],[1,15,9,9,15,6,12,6,5],[5,8,6,8,
10,6,10,15,6],[10,6,0,10,15,6,0,6,5],[9,15,6,10,15,9,12,6,5],[5,2,6,5,15,2],[2,0,15,15,0,5,0,6,5],[2,8,15,8,5,15,12,6,5],[2,5,1,2,6,5,2,1,15],[1,15,2,0,6,5],[1,15,2,12,6,5],[2,6,8,2,10,15,8,6,5],[0,6,5,10,15,2],[12,6,5,10,15,2],[5,9,6,5,15,11,5,11,9],[11,5,15,11,0,5,0,6,5],[11,8,15,8,5,15,12,6,5],[9,6,5,9,5,1,11,1,15],[1,15,11,0,6,5],[1,15,11,12,6,5],[9,6,8,8,6,5,11,10,15],[0,6,5,10,15,11],[12,6,5,10,15,11],[5,3,6],[3,0,5,3,6,0,0,6,5],[3,8,5,3,6,9,12,6,5],[3,6,1,1,6,5],[0,6,5,0,3,6],[9,3,6,12,6,5],
[3,6,8,8,6,5],[0,6,5,0,3,6],[9,3,6,12,6,5],[3,2,5,2,6,5],[6,5,0,0,5,3],[6,5,12,8,5,3],[2,6,5,2,5,1],[0,6,5],[12,6,5],[2,6,8,8,6,5],[0,6,5],[12,6,5],[3,9,5,9,6,5],[6,5,0,0,5,3],[6,5,12,8,5,3],[9,5,1,9,6,5],[0,6,5],[12,6,5],[8,6,5,9,6,8],[0,6,5],[12,6,5],[5,10,6,10,11,6],[10,0,5,0,6,5,11,6,0],[10,8,5,11,6,9,12,6,5],[11,6,1,1,6,5],[0,6,5,0,11,6],[9,11,6,12,6,5],[8,6,5,11,6,8],[0,6,5,0,11,6],[9,11,6,12,6,5],[10,2,5,2,6,5],[6,5,0,0,5,10],[6,5,12,8,5,10],[2,6,5,2,5,1],[0,6,5],[12,6,5],[2,6,8,8,6,5],[0,
6,5],[12,6,5],[10,9,5,9,6,5],[6,5,0,0,5,10],[6,5,12,8,5,10],[9,5,1,9,6,5],[0,6,5],[12,6,5],[8,6,5,9,6,8],[0,6,5],[12,6,5],[5,15,4,4,15,6],[0,15,6,0,5,15],[8,5,15,9,8,15,9,15,6],[4,1,6,1,15,6],[1,15,0,15,6,0],[1,15,9,9,15,6],[4,8,6,8,10,6,10,15,6],[10,6,0,10,15,6],[9,15,6,10,15,9],[4,5,2,2,5,15],[2,0,15,15,0,5],[2,8,15,8,5,15],[2,4,1,2,1,15],[1,15,2],[1,15,2],[2,4,8,2,10,15],[10,15,2],[10,15,2],[4,5,9,9,5,11,11,5,15],[11,0,5,11,5,15],[8,5,15,11,8,15],[9,4,1,11,1,15],[1,15,11],[1,15,11],[9,4,8,11,10,
15],[10,15,11],[10,15,11],[4,5,3,4,3,6],[3,6,0,3,0,5],[3,6,9,3,8,5],[3,4,1,3,6,4],[0,3,6],[9,3,6],[3,6,8,8,6,4],[0,3,6],[9,3,6],[3,2,4,3,4,5],[0,5,3],[8,5,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,5,9,4,5],[0,5,3],[8,5,3],[9,4,1],[],[],[9,4,8],[],[],[4,5,10,4,11,6,4,10,11],[11,6,0,10,0,5],[11,6,9,10,8,5],[11,6,4,11,4,1],[0,11,6],[9,11,6],[11,6,8,8,6,4],[0,11,6],[9,11,6],[10,4,5,10,2,4],[0,5,10],[8,5,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,5,9,4,5],[0,5,10],[8,5,10],[9,4,1],[],[],[9,4,8],[],[],[5,15,12,15,
6,12],[0,15,6,0,5,15],[8,5,15,9,8,15,9,15,6],[12,1,6,1,15,6],[1,15,0,15,6,0],[1,15,9,9,15,6],[8,10,6,12,8,6,10,15,6],[10,6,0,10,15,6],[9,15,6,10,15,9],[12,5,2,2,5,15],[2,0,15,15,0,5],[2,8,15,8,5,15],[2,1,15,2,12,1],[1,15,2],[1,15,2],[2,10,15,2,12,8],[10,15,2],[10,15,2],[12,5,9,9,5,11,11,5,15],[11,0,5,11,5,15],[8,5,15,11,8,15],[9,12,1,11,1,15],[1,15,11],[1,15,11],[9,12,8,11,10,15],[10,15,11],[10,15,11],[12,3,6,12,5,3],[3,6,0,3,0,5],[3,6,9,3,8,5],[3,6,12,3,12,1],[0,3,6],[9,3,6],[3,6,8,8,6,12],[0,3,
6],[9,3,6],[3,12,5,3,2,12],[0,5,3],[8,5,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,5,9,12,5],[0,5,3],[8,5,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,6,12,10,11,12,5,10],[11,6,0,10,0,5],[11,6,9,10,8,5],[11,12,1,11,6,12],[0,11,6],[9,11,6],[11,6,12,11,12,8],[0,11,6],[9,11,6],[10,2,12,10,12,5],[0,5,10],[8,5,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,5,10,9,12],[0,5,10],[8,5,10],[9,12,1],[],[],[9,12,8],[],[],[6,13,15,6,16,13],[16,0,6,0,15,6,13,15,0],[16,12,6,8,15,9,13,15,8,9,15,6],[16,1,6,1,15,6],[1,15,0,15,6,0,
0,6,16],[1,15,9,9,15,6,12,6,16],[16,8,6,8,10,6,10,15,6],[10,6,0,10,15,6,0,6,16],[9,15,6,10,15,9,12,6,16],[16,13,2,16,2,6,13,15,2],[2,13,15,2,0,13,0,6,16],[2,8,15,8,13,15,12,6,16],[2,6,16,2,16,1,2,1,15],[1,15,2,0,6,16],[1,15,2,12,6,16],[2,6,8,2,10,15,8,6,16],[0,6,16,10,15,2],[12,6,16,10,15,2],[16,13,9,16,9,6,13,11,9,13,15,11],[11,0,13,11,13,15,0,6,16],[11,13,15,11,8,13,12,6,16],[9,16,1,9,6,16,11,1,15],[1,15,11,0,6,16],[1,15,11,12,6,16],[9,6,16,9,16,8,11,10,15],[0,6,16,10,15,11],[12,6,16,10,15,11],
[16,13,6,13,3,6],[3,6,0,3,0,13,0,6,16],[3,6,9,3,8,13,12,6,16],[3,6,1,1,6,16],[0,6,16,0,3,6],[9,3,6,12,6,16],[3,6,8,8,6,16],[0,6,16,0,3,6],[9,3,6,12,6,16],[3,2,13,13,2,16,2,6,16],[6,16,0,0,13,3],[6,16,12,8,13,3],[2,6,16,2,16,1],[0,6,16],[12,6,16],[2,6,8,8,6,16],[0,6,16],[12,6,16],[3,9,13,13,9,16,9,6,16],[6,16,0,0,13,3],[6,16,12,8,13,3],[9,16,1,9,6,16],[0,6,16],[12,6,16],[9,16,8,9,6,16],[0,6,16],[12,6,16],[13,11,16,10,11,13,16,11,6],[10,0,13,0,6,16,11,6,0],[10,8,13,11,6,9,12,6,16],[11,6,1,1,6,16],[0,
6,16,0,11,6],[9,11,6,12,6,16],[8,6,16,11,6,8],[0,6,16,0,11,6],[9,11,6,12,6,16],[10,2,13,13,2,16,2,6,16],[6,16,0,0,13,10],[6,16,12,8,13,10],[2,6,16,2,16,1],[0,6,16],[12,6,16],[2,6,8,8,6,16],[0,6,16],[12,6,16],[10,9,13,13,9,16,9,6,16],[6,16,0,0,13,10],[6,16,12,8,13,10],[9,16,1,9,6,16],[0,6,16],[12,6,16],[9,16,8,9,6,16],[0,6,16],[12,6,16],[4,13,6,15,6,13],[0,15,6,0,13,15],[8,13,15,9,8,15,9,15,6],[4,1,6,1,15,6],[1,15,0,15,6,0],[1,15,9,9,15,6],[4,8,6,8,10,6,10,15,6],[10,6,0,10,15,6],[9,15,6,10,15,9],[4,
13,2,2,13,15],[2,13,15,2,0,13],[2,8,15,8,13,15],[2,4,1,2,1,15],[1,15,2],[1,15,2],[2,4,8,2,10,15],[10,15,2],[10,15,2],[4,13,9,9,13,11,11,13,15],[11,0,13,11,13,15],[11,8,13,11,13,15],[9,4,1,11,1,15],[1,15,11],[1,15,11],[9,4,8,11,10,15],[10,15,11],[10,15,11],[4,3,6,4,13,3],[3,6,0,3,0,13],[3,6,9,3,8,13],[3,4,1,3,6,4],[0,3,6],[9,3,6],[3,6,8,8,6,4],[0,3,6],[9,3,6],[3,2,13,13,2,4],[0,13,3],[8,13,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,13,9,4,13],[0,13,3],[8,13,3],[9,4,1],[],[],[9,4,8],[],[],[4,11,6,4,10,11,
4,13,10],[11,6,0,10,0,13],[11,6,9,10,8,13],[11,6,4,11,4,1],[0,11,6],[9,11,6],[11,6,8,8,6,4],[0,11,6],[9,11,6],[10,4,13,10,2,4],[0,13,10],[8,13,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,13,9,4,13],[0,13,10],[8,13,10],[9,4,1],[],[],[9,4,8],[],[],[15,6,12,13,15,12],[0,15,6,0,13,15],[8,13,15,9,8,15,9,15,6],[12,1,6,1,15,6],[1,15,0,15,6,0],[1,15,9,9,15,6],[8,10,6,12,8,6,10,15,6],[10,6,0,10,15,6],[9,15,6,10,15,9],[12,13,2,2,13,15],[2,13,15,2,0,13],[2,8,15,8,13,15],[2,1,15,2,12,1],[1,15,2],[1,15,2],[2,10,15,
2,12,8],[10,15,2],[10,15,2],[12,13,9,11,13,15,9,13,11],[11,0,13,11,13,15],[11,8,13,11,13,15],[9,12,1,11,1,15],[1,15,11],[1,15,11],[9,12,8,11,10,15],[10,15,11],[10,15,11],[12,3,6,12,13,3],[3,6,0,3,0,13],[3,6,9,3,8,13],[3,6,12,3,12,1],[0,3,6],[9,3,6],[3,6,8,8,6,12],[0,3,6],[9,3,6],[3,12,13,3,2,12],[0,13,3],[8,13,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,13,9,12,13],[0,13,3],[8,13,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,6,12,10,11,12,13,10],[11,6,0,10,0,13],[11,6,9,10,8,13],[11,12,1,11,6,12],[0,11,6],[9,
11,6],[11,6,12,11,12,8],[0,11,6],[9,11,6],[10,2,12,10,12,13],[0,13,10],[8,13,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,13,10,9,12],[0,13,10],[8,13,10],[9,12,1],[],[],[9,12,8],[],[],[15,14,17,18,15,17],[17,18,0,0,18,15,0,15,14],[17,18,12,8,18,15,12,18,8,8,15,9,14,9,15],[17,1,14,17,18,1,1,15,14],[1,17,18,1,0,17,1,14,0,1,15,14],[1,12,18,1,15,9,12,17,18,15,14,9],[17,8,14,17,13,8,17,18,13,14,8,10,14,10,15],[13,0,17,13,17,18,0,10,14,15,14,10],[13,17,18,13,12,17,10,15,14,10,14,9],[2,17,18,2,18,15],[2,0,15,
15,0,18,0,17,18],[2,8,15,8,12,18,15,8,18,12,17,18],[2,1,15,2,17,1,1,17,18],[1,15,2,1,17,18,1,0,17],[1,15,2,1,12,18,12,17,18],[2,10,15,2,17,8,8,17,13,13,17,18],[13,0,17,13,17,18,10,15,2],[13,12,17,13,17,18,10,15,2],[11,9,15,15,9,18,17,18,9],[11,0,15,15,0,18,0,17,18],[8,12,18,15,8,18,11,8,15,12,17,18],[9,17,1,1,17,18,11,1,15],[1,15,11,1,17,18,1,0,17],[1,15,11,1,12,18,12,17,18],[9,17,8,13,17,18,8,17,13,11,10,15],[13,0,17,13,17,18,10,15,11],[13,12,17,13,17,18,10,15,11],[14,17,3,3,17,18],[3,0,18,3,14,
0,0,17,18],[3,8,18,3,14,9,8,12,18,12,17,18],[3,14,1,14,17,1,1,17,18],[1,17,18,1,0,17,0,3,14],[1,12,18,12,17,18,9,3,14],[3,14,8,14,17,8,13,17,18,8,17,13],[13,0,17,13,17,18,0,3,14],[13,12,17,13,17,18,9,3,14],[3,17,18,3,2,17],[0,17,18,0,18,3],[8,18,3,12,18,8,12,17,18],[2,17,1,1,17,18],[1,17,18,1,0,17],[1,12,18,12,17,18],[2,17,8,8,17,13,13,17,18],[13,0,17,13,17,18],[13,12,17,13,17,18],[3,9,18,18,9,17],[0,17,18,0,18,3],[8,18,3,12,18,8,12,17,18],[9,17,1,1,17,18],[1,17,18,1,0,17],[1,12,18,12,17,18],[8,17,
13,9,17,8,13,17,18],[13,0,17,13,17,18],[13,12,17,13,17,18],[14,10,11,17,10,14,17,18,10],[11,14,0,0,17,18,10,0,18],[11,14,9,8,12,18,10,8,18,12,17,18],[11,14,1,14,17,1,1,17,18],[1,17,18,1,0,17,0,11,14],[1,12,18,12,17,18,9,11,14],[11,14,8,14,17,8,8,17,13,13,17,18],[13,0,17,13,17,18,0,11,14],[13,12,17,13,17,18,9,11,14],[2,17,10,18,10,17],[0,17,18,0,18,10],[8,18,10,12,18,8,12,17,18],[2,17,1,1,17,18],[1,17,18,1,0,17],[1,12,18,12,17,18],[2,17,8,8,17,13,13,17,18],[13,0,17,13,17,18],[13,12,17,13,17,18],[10,
17,18,10,9,17],[0,17,18,0,18,10],[8,18,10,12,18,8,12,17,18],[9,17,1,1,17,18],[1,17,18,1,0,17],[1,12,18,12,17,18],[8,17,13,9,17,8,13,17,18],[13,0,17,13,17,18],[13,12,17,13,17,18],[4,15,14,4,18,15],[4,18,0,0,18,15,0,15,14],[4,18,8,8,15,9,8,18,15,9,15,14],[4,18,1,4,1,14,1,15,14],[1,4,18,1,15,14,1,14,0],[1,4,18,1,15,9,9,15,14],[4,18,13,4,8,14,8,10,14,10,15,14],[10,14,0,10,15,14,13,4,18],[10,14,9,10,15,14,13,4,18],[4,18,15,4,15,2],[2,0,15,15,0,18,0,4,18],[2,8,15,8,4,18,15,8,18],[2,4,1,2,1,15,1,4,18],[1,
15,2,1,4,18],[1,15,2,1,4,18],[2,4,8,2,10,15,13,4,18],[10,15,2,13,4,18],[10,15,2,13,4,18],[4,18,9,9,15,11,18,15,9],[11,0,15,15,0,18,0,4,18],[8,4,18,15,8,18,11,8,15],[9,4,1,1,4,18,11,1,15],[1,15,11,1,4,18],[1,15,11,1,4,18],[9,4,8,11,10,15,13,4,18],[10,15,11,13,4,18],[10,15,11,13,4,18],[4,18,3,4,3,14],[3,0,18,3,14,0,18,0,4],[3,8,18,3,14,9,8,4,18],[3,14,1,14,4,1,1,4,18],[1,4,18,0,3,14],[1,4,18,9,3,14],[3,14,8,8,14,4,13,4,18],[0,3,14,13,4,18],[9,3,14,13,4,18],[3,2,4,3,4,18],[0,4,18,0,18,3],[18,3,8,18,
8,4],[2,4,1,1,4,18],[1,4,18],[1,4,18],[2,4,8,13,4,18],[13,4,18],[13,4,18],[3,9,4,3,4,18],[0,4,18,0,18,3],[18,3,8,18,8,4],[9,4,1,1,4,18],[1,4,18],[1,4,18],[9,4,8,13,4,18],[13,4,18],[13,4,18],[4,18,10,4,10,11,4,11,14],[10,4,18,10,0,4,11,14,0],[10,8,18,8,4,18,11,14,9],[11,14,4,11,4,1,1,4,18],[1,4,18,0,11,14],[1,4,18,9,11,14],[11,14,8,8,14,4,13,4,18],[0,11,14,13,4,18],[9,11,14,13,4,18],[10,4,18,10,2,4],[0,4,10,18,10,4],[18,10,8,18,8,4],[2,4,1,1,4,18],[1,4,18],[1,4,18],[2,4,8,13,4,18],[13,4,18],[13,4,
18],[10,4,18,10,9,4],[0,4,10,18,10,4],[18,10,8,18,8,4],[9,4,1,1,4,18],[1,4,18],[1,4,18],[9,4,8,13,4,18],[13,4,18],[13,4,18],[14,12,15,15,12,16,15,16,18],[0,16,18,0,18,15,0,15,14],[8,15,9,8,18,15,16,18,8,9,15,14],[12,1,14,1,15,14,16,18,1],[1,16,18,1,15,14,1,14,0],[1,16,18,1,15,9,9,15,14],[12,8,14,10,15,14,8,10,14,16,18,13],[10,14,0,10,15,14,13,16,18],[10,14,9,10,15,14,13,16,18],[12,15,2,12,16,15,16,18,15],[2,0,15,15,0,18,18,0,16],[2,8,15,8,16,18,15,8,18],[2,1,15,2,12,1,1,16,18],[1,15,2,1,16,18],[1,
15,2,1,16,18],[2,10,15,2,12,8,13,16,18],[10,15,2,13,16,18],[10,15,2,13,16,18],[9,12,11,12,15,11,12,16,15,16,18,15],[11,0,15,15,0,18,18,0,16],[8,16,18,15,8,18,11,8,15],[9,12,1,1,16,18,11,1,15],[1,15,11,1,16,18],[1,15,11,1,16,18],[9,12,8,11,10,15,13,16,18],[10,15,11,13,16,18],[10,15,11,13,16,18],[16,3,12,16,18,3,12,3,14],[3,16,18,3,0,16,3,14,0],[3,8,18,3,14,9,8,16,18],[3,14,12,3,12,1,1,16,18],[1,16,18,0,3,14],[1,16,18,9,3,14],[3,14,8,8,14,12,13,16,18],[0,3,14,13,16,18],[9,3,14,13,16,18],[3,16,18,3,
12,16,3,2,12],[0,16,3,18,3,16],[18,3,8,18,8,16],[2,12,1,1,16,18],[1,16,18],[1,16,18],[2,12,8,13,16,18],[13,16,18],[13,16,18],[3,16,18,3,12,16,3,9,12],[0,16,3,18,3,16],[18,3,8,18,8,16],[9,12,1,1,16,18],[1,16,18],[1,16,18],[9,12,8,13,16,18],[13,16,18],[13,16,18],[16,10,12,16,18,10,12,11,14,12,10,11],[10,0,16,10,16,18,11,14,0],[10,16,18,10,8,16,11,14,9],[11,12,1,11,14,12,1,16,18],[1,16,18,0,11,14],[1,16,18,9,11,14],[11,14,12,11,12,8,13,16,18],[0,11,14,13,16,18],[9,11,14,13,16,18],[10,12,16,10,16,18,
10,2,12],[0,16,10,18,10,16],[18,10,16,16,10,8],[2,12,1,1,16,18],[1,16,18],[1,16,18],[2,12,8,13,16,18],[13,16,18],[13,16,18],[10,12,16,10,16,18,10,9,12],[0,16,10,18,10,16],[18,10,16,16,10,8],[9,12,1,1,16,18],[1,16,18],[1,16,18],[9,12,8,13,16,18],[13,16,18],[13,16,18],[17,5,14,5,15,14],[5,15,0,5,0,17,0,15,14],[5,15,8,5,12,17,8,15,9,9,15,14],[5,1,17,1,14,17,1,15,14],[1,15,14,1,14,0,0,17,5],[1,15,9,9,15,14,12,17,5],[5,8,17,8,14,17,8,10,14,10,15,14],[10,14,0,10,15,14,0,17,5],[10,14,9,10,15,14,12,17,5],
[5,15,2,5,2,17],[2,0,15,15,0,5,0,17,5],[2,8,15,8,5,15,12,17,5],[2,17,1,2,1,15,17,5,1],[1,15,2,0,17,5],[1,15,2,12,17,5],[2,17,8,2,10,15,8,17,5],[0,17,5,10,15,2],[12,17,5,10,15,2],[5,15,11,5,11,9,5,9,17],[11,5,15,11,0,5,0,17,5],[11,8,15,8,5,15,12,17,5],[9,17,5,9,5,1,11,1,15],[1,15,11,0,17,5],[1,15,11,12,17,5],[9,17,8,8,17,5,11,10,15],[0,17,5,10,15,11],[12,17,5,10,15,11],[5,3,14,5,14,17],[3,0,5,3,14,0,0,17,5],[3,8,5,3,14,9,12,17,5],[3,14,1,14,17,1,1,17,5],[0,17,5,0,3,14],[9,3,14,12,17,5],[3,14,8,8,17,
5,14,17,8],[0,17,5,0,3,14],[9,3,14,12,17,5],[3,2,5,2,17,5],[0,5,3,17,5,0],[8,5,3,17,5,12],[2,17,1,17,5,1],[0,17,5],[12,17,5],[2,17,8,8,17,5],[0,17,5],[12,17,5],[3,9,5,9,17,5],[0,5,3,17,5,0],[8,5,3,17,5,12],[9,5,1,9,17,5],[0,17,5],[12,17,5],[8,17,5,9,17,8],[0,17,5],[12,17,5],[5,10,17,17,10,14,10,11,14],[10,0,5,0,17,5,11,14,0],[10,8,5,11,14,9,12,17,5],[11,14,1,14,17,1,1,17,5],[0,17,5,0,11,14],[9,11,14,12,17,5],[8,17,5,14,17,8,11,14,8],[0,17,5,0,11,14],[9,11,14,12,17,5],[10,2,5,2,17,5],[0,5,10,17,5,
0],[17,5,12,8,5,10],[2,17,1,17,5,1],[0,17,5],[12,17,5],[2,17,8,8,17,5],[0,17,5],[12,17,5],[10,9,5,9,17,5],[0,5,10,17,5,0],[17,5,12,8,5,10],[9,5,1,9,17,5],[0,17,5],[12,17,5],[8,17,5,9,17,8],[0,17,5],[12,17,5],[5,15,14,5,14,4],[0,15,14,0,5,15],[8,5,15,9,8,15,9,15,14],[4,1,14,1,15,14],[1,15,14,1,14,0],[1,15,9,9,15,14],[4,8,14,8,10,14,10,15,14],[10,14,0,10,15,14],[10,14,9,10,15,14],[4,5,2,2,5,15],[2,0,15,15,0,5],[2,8,15,8,5,15],[2,4,1,2,1,15],[1,15,2],[1,15,2],[2,4,8,2,10,15],[10,15,2],[10,15,2],[4,5,
9,9,5,11,11,5,15],[11,0,5,11,5,15],[8,5,15,11,8,15],[9,4,1,11,1,15],[1,15,11],[1,15,11],[9,4,8,11,10,15],[10,15,11],[10,15,11],[4,5,3,4,3,14],[3,14,0,3,0,5],[3,14,9,3,8,5],[3,14,1,14,4,1],[0,3,14],[9,3,14],[3,14,8,8,14,4],[0,3,14],[9,3,14],[3,2,4,3,4,5],[0,5,3],[8,5,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,5,9,4,5],[0,5,3],[8,5,3],[9,4,1],[],[],[9,4,8],[],[],[4,5,10,4,11,14,4,10,11],[11,14,0,10,0,5],[11,14,9,10,8,5],[11,14,4,11,4,1],[0,11,14],[9,11,14],[11,14,8,8,14,4],[0,11,14],[9,11,14],[10,4,5,10,2,
4],[0,5,10],[8,5,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,5,9,4,5],[0,5,10],[8,5,10],[9,4,1],[],[],[9,4,8],[],[],[5,15,12,15,14,12],[0,15,14,0,5,15],[8,5,15,9,8,15,9,15,14],[12,1,14,1,15,14],[1,15,14,1,14,0],[1,15,9,9,15,14],[8,10,14,12,8,14,10,15,14],[10,14,0,10,15,14],[10,14,9,10,15,14],[12,5,2,2,5,15],[2,0,15,15,0,5],[2,8,15,8,5,15],[2,1,15,2,12,1],[1,15,2],[1,15,2],[2,10,15,2,12,8],[10,15,2],[10,15,2],[12,5,9,9,5,11,11,5,15],[11,0,5,11,5,15],[8,5,15,11,8,15],[9,12,1,11,1,15],[1,15,11],[1,15,11],
[9,12,8,11,10,15],[10,15,11],[10,15,11],[12,3,14,12,5,3],[3,14,0,3,0,5],[3,14,9,3,8,5],[3,14,12,3,12,1],[0,3,14],[9,3,14],[3,14,8,8,14,12],[0,3,14],[9,3,14],[3,12,5,3,2,12],[0,5,3],[8,5,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,5,9,12,5],[0,5,3],[8,5,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,14,12,10,11,12,5,10],[11,14,0,10,0,5],[11,14,9,10,8,5],[11,12,1,11,14,12],[0,11,14],[9,11,14],[11,14,12,11,12,8],[0,11,14],[9,11,14],[10,2,12,10,12,5],[0,5,10],[8,5,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,5,10,9,12],
[0,5,10],[8,5,10],[9,12,1],[],[],[9,12,8],[],[],[16,13,14,17,16,14,14,13,15],[16,0,17,0,15,14,13,15,0],[16,12,17,8,15,9,13,15,8,9,15,14],[1,17,16,1,14,17,1,15,14],[1,15,14,1,14,0,0,17,16],[1,15,9,9,15,14,12,17,16],[16,8,17,8,14,17,8,10,14,10,15,14],[10,14,0,10,15,14,0,17,16],[10,14,9,10,15,14,12,17,16],[16,13,2,16,2,17,13,15,2],[2,13,15,2,0,13,0,17,16],[2,8,15,8,13,15,12,17,16],[2,17,16,2,16,1,2,1,15],[1,15,2,0,17,16],[1,15,2,12,17,16],[2,17,8,2,10,15,8,17,16],[0,17,16,10,15,2],[12,17,16,10,15,2],
[16,13,9,16,9,17,13,11,9,13,15,11],[11,0,13,11,13,15,0,17,16],[11,13,15,11,8,13,12,17,16],[9,16,1,9,17,16,11,1,15],[1,15,11,0,17,16],[1,15,11,12,17,16],[9,17,16,9,16,8,11,10,15],[0,17,16,10,15,11],[12,17,16,10,15,11],[13,14,16,13,3,14,16,14,17],[3,14,0,3,0,13,0,17,16],[3,14,9,3,8,13,12,17,16],[3,14,1,14,17,1,17,16,1],[0,17,16,0,3,14],[9,3,14,12,17,16],[3,14,8,8,17,16,14,17,8],[0,17,16,0,3,14],[9,3,14,12,17,16],[3,2,13,13,2,16,2,17,16],[0,13,3,17,16,0],[8,13,3,17,16,12],[2,17,16,2,16,1],[0,17,16],
[12,17,16],[2,17,8,8,17,16],[0,17,16],[12,17,16],[3,9,13,13,9,16,9,17,16],[0,13,3,17,16,0],[8,13,3,17,16,12],[9,16,1,9,17,16],[0,17,16],[12,17,16],[9,16,8,9,17,16],[0,17,16],[12,17,16],[13,14,16,13,11,14,10,11,13,16,14,17],[10,0,13,0,17,16,11,14,0],[10,8,13,11,14,9,12,17,16],[11,14,1,14,17,1,17,16,1],[0,17,16,0,11,14],[9,11,14,12,17,16],[8,17,16,14,17,8,11,14,8],[0,17,16,0,11,14],[9,11,14,12,17,16],[10,2,13,13,2,16,2,17,16],[0,13,10,17,16,0],[17,16,12,8,13,10],[2,17,16,2,16,1],[0,17,16],[12,17,16],
[2,17,8,8,17,16],[0,17,16],[12,17,16],[10,9,13,13,9,16,9,17,16],[0,13,10,17,16,0],[17,16,12,8,13,10],[9,16,1,9,17,16],[0,17,16],[12,17,16],[9,16,8,9,17,16],[0,17,16],[12,17,16],[4,13,14,15,14,13],[0,15,14,0,13,15],[8,13,15,9,8,15,9,15,14],[4,1,14,1,15,14],[1,15,14,1,14,0],[1,15,9,9,15,14],[4,8,14,8,10,14,10,15,14],[10,14,0,10,15,14],[10,14,9,10,15,14],[4,13,2,2,13,15],[2,13,15,2,0,13],[2,8,15,8,13,15],[2,4,1,2,1,15],[1,15,2],[1,15,2],[2,4,8,2,10,15],[10,15,2],[10,15,2],[4,13,9,9,13,11,11,13,15],[11,
0,13,11,13,15],[11,8,13,11,13,15],[9,4,1,11,1,15],[1,15,11],[1,15,11],[9,4,8,11,10,15],[10,15,11],[10,15,11],[4,3,14,4,13,3],[3,14,0,3,0,13],[3,14,9,3,8,13],[3,14,1,14,4,1],[0,3,14],[9,3,14],[3,14,8,8,14,4],[0,3,14],[9,3,14],[3,2,13,13,2,4],[0,13,3],[8,13,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,13,9,4,13],[0,13,3],[8,13,3],[9,4,1],[],[],[9,4,8],[],[],[4,11,14,4,10,11,4,13,10],[11,14,0,10,0,13],[11,14,9,10,8,13],[11,14,4,11,4,1],[0,11,14],[9,11,14],[11,14,8,8,14,4],[0,11,14],[9,11,14],[10,4,13,10,2,4],
[0,13,10],[8,13,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,13,9,4,13],[0,13,10],[8,13,10],[9,4,1],[],[],[9,4,8],[],[],[13,15,14,13,14,12],[0,15,14,0,13,15],[8,13,15,9,8,15,9,15,14],[12,1,14,1,15,14],[1,15,14,1,14,0],[1,15,9,9,15,14],[8,10,14,12,8,14,10,15,14],[10,14,0,10,15,14],[10,14,9,10,15,14],[12,13,2,2,13,15],[2,13,15,2,0,13],[2,8,15,8,13,15],[2,1,15,2,12,1],[1,15,2],[1,15,2],[2,10,15,2,12,8],[10,15,2],[10,15,2],[12,13,9,11,13,15,9,13,11],[11,0,13,11,13,15],[11,8,13,11,13,15],[9,12,1,11,1,15],[1,
15,11],[1,15,11],[9,12,8,11,10,15],[10,15,11],[10,15,11],[12,3,14,12,13,3],[3,14,0,3,0,13],[3,14,9,3,8,13],[3,14,12,3,12,1],[0,3,14],[9,3,14],[3,14,8,8,14,12],[0,3,14],[9,3,14],[3,12,13,3,2,12],[0,13,3],[8,13,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,13,9,12,13],[0,13,3],[8,13,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,14,12,10,11,12,13,10],[11,14,0,10,0,13],[11,14,9,10,8,13],[11,12,1,11,14,12],[0,11,14],[9,11,14],[11,14,12,11,12,8],[0,11,14],[9,11,14],[10,2,12,10,12,13],[0,13,10],[8,13,10],[2,12,1],[],
[],[2,12,8],[],[],[10,12,13,10,9,12],[0,13,10],[8,13,10],[9,12,1],[],[],[9,12,8],[],[]];
}).call(this);//# sourceMappingURL=CindyPrint.js.map

